<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2021/06/21/git-jiao-cheng/"/>
      <url>/2021/06/21/git-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="GIT教程"><a href="#GIT教程" class="headerlink" title="GIT教程"></a>GIT教程</h1><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>git是一种分布式版本控制工具。目前项目中比较常见的版本控制器有SVN、CVS等，这些版本控制工具属于集中式版本控制器。</p><p>集中式版本控制器的主要特点就是项目的版本库保存在服务器，该服务器和开发人员的开发机要在同一网段中，开发机从服务器down下项目，然后进行开发，开发过程中需要实时地将新的版本更新到服务器。一旦服务器挂掉了，整个开发就会受到很大的影响。</p><p>分布式版本控制器的主要特点就是不需要专用服务器，每台开发机都有独立的版本库，相当于每台开发机都是服务器，开发机之间可以互相传递版本内容。由于没有中央服务器，也不用担心网络中断后影响开发。当然，为了方便传递数据，也可以建立一个专门用来交换数据的服务器，比如github就充当着这个角色。</p><h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><p>不同系统下安装git有所不同：</p><h4 id="LINUX上安装"><a href="#LINUX上安装" class="headerlink" title="LINUX上安装"></a>LINUX上安装</h4><p>Ubuntu或Debian系统：</p><pre><code>sudo apt-get install git</code></pre><p>其他Linux系统可以是用源码安装。</p><h4 id="MAC-OS-X上安装"><a href="#MAC-OS-X上安装" class="headerlink" title="MAC OS X上安装"></a>MAC OS X上安装</h4><ul><li>方法1：homebrew，然后通过homebrew安装git，参考<a href="http://brew.sh/">http://brew.sh/</a> 。</li><li>方法2：是用xcode。</li></ul><h4 id="Windows上安装"><a href="#Windows上安装" class="headerlink" title="Windows上安装"></a>Windows上安装</h4><p>windows上安装是采用模拟Linux环境下进行的，所以需要先安装模拟环境。目前有个非常好的模拟环境工具，其集成了Linux环境和git，这个工具就是msysgit，从官网下载下来后直接安装即可。下载网址<a href="https://git-for-windows.github.io/">https://git-for-windows.github.io/</a></p><p>安装完成后可执行文件有3个：</p><ul><li>git bash<ul><li>仿Linux命令行</li></ul></li><li>git cmd<ul><li>windows命令行</li></ul></li><li>git gui<ul><li>可视化窗口</li></ul></li></ul><p>最常用的应该是git bash，毕竟git最适合的环境就是Linux。可视化窗口工具只是个辅助工具，是用命令操作才是最灵活和快捷的选择。因此接下来主要学习git的各种命令。</p><p>虽然git的命令比较多，但是常用的就是那10多种。</p><p>安装完成后，需要进一步设置用户名和email。因为git是分布式版本控制工具，因此需要每台开发机自报家门。</p><pre><code>$ git config --global user.name "Your Name"$ git config --global user.email "email@example.com"</code></pre><p>其中–global表示将设置内容配置到全局，这样整个系统的用户都应用这个设置。后面我们还将介绍直接在配置文件中设置的方法。</p><h4 id="git的各种命令"><a href="#git的各种命令" class="headerlink" title="git的各种命令"></a>git的各种命令</h4><ul><li><a href="#init">git init</a> - 初始化版本库</li><li><a href="#add">git add</a> - 将增加或修改内容放到暂存库</li><li><a href="#commit">git commit</a> - 提交暂存库的内容</li><li><a href="#status">git status</a> - 查看状态</li><li><a href="#diff">git diff</a> - 比较两次版本的不同</li><li><a href="#log">git log</a> - 查看版本日志</li><li><a href="#reflog">git reflog</a> - 查看执行的命令日志</li><li><a href="#reset">git reset</a> - 回退历史版本</li><li><a href="#rm">git rm</a> - 从版本库中删除</li><li><a href="#checkout">git checkout</a> - 切换分支</li><li><a href="#branch">git branch</a> - 创建或查看分支</li><li><a href="#merge">git merge</a> - 合并分支</li><li><a href="#stash">git stash</a> - 存储工作区临时</li><li><a href="#tag">git tag</a> - 创建或查看标签</li><li><a href="#remote">git remote</a> - 查看远程版本库的名称</li><li><a href="#push">git push</a> - 推送本地库版本到远程库</li><li><a href="#pull">git pull</a> - 从远程库拉取到本地库</li><li><a href="#clone">git clone</a> - 从远程或本地克隆版本库到指定位置</li></ul><h4 id="init">git init</h4><p>将空目录或者有内容的目录加入到git版本控制器中，由git来跟踪并管理。</p><pre><code>git init</code></pre><p>命令执行完后，会在当前目录下生成一个.git的目录，该目录是隐藏的。这个目录不能轻易改动，里面保存着所有的git配置。</p><h4 id="add">git add</h4><p>将增加或修改的文件保存到暂存库中。</p><pre><code>git add [文件]</code></pre><p>将所有改动的文件都存放到暂存库。</p><pre><code>git add -A</code></pre><h4 id="commit">git commit</h4><p>将暂存区的内容提交到版本库。每次提交都必须将提交的注释加上。</p><pre><code>git commit -m "注释"  </code></pre><p>如果文件的修改或删除没有通过add或rm放入暂存区，也可以通过加入-a的参数直接提交。(增加必须通过add加入暂存区)</p><pre><code>git commit -a -m "注释"</code></pre><h4 id="status">git status</h4><p>查看文件有没有被修改的状态，无论文件是否放入暂存区，只要git监控到文件增加、修改、删除，都可以使用该命令来查看。</p><pre><code>git status</code></pre><h4 id="diff">git diff</h4><p>比较未提交到暂存区的修改和上个版本的差别。</p><pre><code>git diff [文件]</code></pre><p>比较所有提交到暂存区的文件。</p><pre><code>git diff</code></pre><h4 id="log">git log</h4><p>查看操作日志，记录所有提交后的版本信息。可以根据日志信息回退到指定的版本。</p><pre><code>git log</code></pre><p>查看分支合并图</p><pre><code>git log --graph格式化显示效果$ git log --graph --pretty=oneline --abbrev-commit</code></pre><h4 id="reflog">git reflog</h4><p>查看所有执行的命令历史。</p><pre><code>git reflog</code></pre><h4 id="reset">git reset</h4><p>回退历史版本。如果执行提交后又反悔了，可以通过该命令进行回退。</p><p>回退到当前版本，比如放弃当前未提交的修改。</p><pre><code>git reset --hard head</code></pre><p>如果要回退上一个版本，则改成</p><pre><code>git reset --hard head~1</code></pre><p>head~后面跟数字，表示回退到从当前版本往回数第几个版本。</p><p>也可以指定回退到某一个版本。首先通过git log，查看版本的id号，再根据id号来回退。id号可只写前四位。</p><pre><code>git reset --hard [id]</code></pre><h4 id="rm">git rm</h4><p>删除文件有两种方式</p><ol><li><p>直接从文件夹中删除，但是版本库中并没有被删，如果需要提交版本库就要用到git rm，再使用git commit提交。</p></li><li><p>使用git rm删除，文件会从版本库和工作区都删除，然后使用git commit提交。</p></li></ol><p>用法：</p><pre><code>git rm [文件]</code></pre><h4 id="checkout">git checkout</h4><p>切换分支。</p><pre><code>git checkout [分支名称]</code></pre><p>创建并切换到该分支。</p><pre><code>git checkout -b [分支名称]</code></pre><h4 id="branch">git branch</h4><p>查看分支。</p><pre><code>git branch</code></pre><p>创建分支。</p><pre><code>git branch [分支名称]</code></pre><p>删除分支。</p><pre><code>git branch -d [分支名称]</code></pre><p>如果删除的分支没有被合并，需要进行强制删除。</p><pre><code>git branch -D [分支名称]</code></pre><h4 id="merge">git merge</h4><p>快速合并，直接改变合并分支的指针。如果合并的分支间有冲突，则需要手动解决冲突后再提交。</p><pre><code>git merge [合并的分支名称]</code></pre><p>快速合并分支后，如果删除分支则日志记录中不会记录分支合并的操作。如果希望能记录分支合并的操作，则需要禁用快速合并。</p><pre><code>git merge --no-ff</code></pre><h4 id="stash">git stash</h4><p>存储当前工作区。如果任务进行到一半，需要解决其他版本的问题，比如修复BUG。当前进行的操作可暂时保存下来，解决问题再恢复。</p><pre><code>git stash</code></pre><p>查看所有保存的工作现场。</p><pre><code>git stash list</code></pre><p>恢复保存的工作现场。</p><pre><code>git stash apply [工作现场名称]恢复后删除工作现场git stash drop [工作现场名称]</code></pre><p>恢复最后保存的工作现场并同时删除</p><pre><code>git stash pop</code></pre><h4 id="tag">git tag</h4><p>给最新的版本加上标签。</p><pre><code>git tag [标签号]</code></pre><p>给历史版本加上标签。版本id可以通过git log查看。</p><pre><code>git tag [标签号] [版本id]</code></pre><p>创建带有说明的标签。</p><pre><code>git tag -a [标签号] -m "标签说明" [版本id]</code></pre><p>删除标签。</p><pre><code>git tag -d [标签号]</code></pre><h3 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h3><p>如果不想搭建自己的git服务器，可以选择使用github或gitee。由于github网站在国外，国内访问比较慢，这里一律采用国内的托管服务器gitee。首先需要在gitee上注册账号，然后可以通过注册的账号和密码进行登录和操作。</p><p><strong>创建远程仓库的步骤：</strong></p><ol><li>新建仓库</li><li>输入仓库名称</li><li>设置为公开源</li><li>选择使用Readme文件初始化仓库</li></ol><p>创建好远程仓库后有两种方式可以和远程仓库关联：</p><p><strong>一、通过clone命令</strong></p><p>在本地用命令行输入：</p><pre class="line-numbers language-none"><code class="language-none">git clone https://gitee.com/asbdk/testgit.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>它会将远程仓库克隆到本地，并建立关联。</p><p>从远程克隆下来的项目只能看到master分支，如果要抓取其他分支可以使用git checkout。</p><pre><code>git checkout -b dev1 origin/dev1</code></pre><p>提交数据到远程仓库：</p><pre class="line-numbers language-none"><code class="language-none">git push origin [分支名]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过-u参数可以在提交后建立远程仓库的分支和本地分支的关联，这样以后就可以直接用git push命令</p><pre class="line-numbers language-none"><code class="language-none">git push -u origin [分支名]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第一次推送时，系统会弹出输入账号和密码的对话框，请输入网站注册的账号和密码。</p><p>如果输错了，可以打开控制面板 &gt;&gt; 凭据管理 &gt;&gt; windows凭据，找到git:<a href="https://gitee.com项,删除它.再次push时又可以重新输入账号和密码./">https://gitee.com项，删除它。再次push时又可以重新输入账号和密码。</a></p><p>拉去远程仓库数据到本地：</p><pre class="line-numbers language-none"><code class="language-none">git pull origin [分支名]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以拉取时建立关联</p><pre class="line-numbers language-none"><code class="language-none">git pull --set-upstream origin [分支名]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>还有一种建立关联的方法：</p><pre class="line-numbers language-none"><code class="language-none">git branch -u origin/[远程分支名] [分支名]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>关联建立好后就只需要通过git pull拉取既可。</p><p>git pull实际上是git fetch和git merge的组合。如果想拉取后通过变基合并，需要加上：</p><pre class="line-numbers language-none"><code class="language-none">git pull --rebase<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>二、本地建立仓库，然后和远程关联。</strong></p><p>使用git remote来指定关联的远程仓库</p><pre><code>git remote add origin [你的github地址]</code></pre><p>查看远程库信息</p><pre><code>git remote -v</code></pre><p>这种方式建立关联后，如果通过git push和git pull都会报错，因为本地库和远程库没有相同的提交历史。解决方法就是先拉取，但拉取时跟上参数：</p><pre class="line-numbers language-none"><code class="language-none">git pull origin [分支名] --allow-unrelated-histories<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以上是通过输入自己的账号和密码进行授权操作，但如果要多人来开发同一个项目，那么把自己账号和密码告诉给他人显然是不合适的。</p><p>还有一种方式是通过公钥授权给开发者来实现共同开发。创建公钥的步骤：</p><p>第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：</p><pre><code>$ ssh-keygen -t rsa -C [你的email]</code></pre><p>如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。</p><p>第2步：登陆gitee，在设置中找到SSH公钥选项。</p><p>第3步：将公钥粘贴进公钥的文本框中，点击确定完成创建。</p><p>你可以添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到gitee，就可以在每台电脑上往gitee推送了。</p><h3 id="忽略特殊文件"><a href="#忽略特殊文件" class="headerlink" title="忽略特殊文件"></a>忽略特殊文件</h3><p>在项目中往往有些文件不需要受git控制，比如中间的编译文件、系统生成的配置文件等等，那么可以在项目的根目录下建立一个后缀名为.gitignore的文件，将需要忽略的文件或文件夹写在里面即可。.gitignore文件需要提交到git版本控制中。</p><p>比如该文件可有如下配置：</p><pre><code># Windows:Thumbs.dbehthumbs.dbDesktop.ini# My configurations:db.inideploy_key_rsadistbuild</code></pre><h3 id="配置别名"><a href="#配置别名" class="headerlink" title="配置别名"></a>配置别名</h3><p>上面很多命令都很长，而每次都去敲相同的命令显得比较繁琐。git还提供了配置别名的方法，可以将很长的命令进行简化。配置的方法有两种：</p><ol><li><p>命令行配置</p><pre><code> #给git status设置别名st: git config --global alias.st "status" #以后就可以调用git st来获取文件的状态。</code></pre></li><li><p>在配置文件中设置</p><p> 如果嫌命令行操作太过于麻烦，也可以到用户的根目录下找到.gitconfig文件，直接修改该文件内容也可以到达设置的效果。</p><pre><code> #下面是.gitconfig文件的设置： [user] name = bdk email = 12899931@qq.com [alias] last = log -1 #美化日志输出的效果 lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit st = status ck = checkout ckb = checkout -b cm = commit -a -m ...</code></pre></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>如何生成二维码？</title>
      <link href="/2021/06/21/ru-he-sheng-cheng-er-wei-ma/"/>
      <url>/2021/06/21/ru-he-sheng-cheng-er-wei-ma/</url>
      
        <content type="html"><![CDATA[<hr><h5 id="一、关于扫一扫二维码登录？关于支付端的二维码？关于扫二维码添加好友？"><a href="#一、关于扫一扫二维码登录？关于支付端的二维码？关于扫二维码添加好友？" class="headerlink" title="一、关于扫一扫二维码登录？关于支付端的二维码？关于扫二维码添加好友？"></a>一、关于扫一扫二维码登录？关于支付端的二维码？关于扫二维码添加好友？</h5><p>理解：无论是何种功能的二维码，它都是基于生成该二维码的请求，列如：扫码登录对应一个扫码后登录的Api、扫码支付对应支付的Api、扫码加好友对应加好友的Api。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">//引入谷歌提供的二维码依赖&lt;dependency&gt;    &lt;groupId&gt;com.google.zxing&lt;/groupId&gt;    &lt;artifactId&gt;core&lt;/artifactId&gt;    &lt;version&gt;3.3.0&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;com.google.zxing&lt;/groupId&gt;    &lt;artifactId&gt;javase&lt;/artifactId&gt;    &lt;version&gt;3.3.0&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;commons-codec&lt;/groupId&gt;    &lt;artifactId&gt;commons-codec&lt;/artifactId&gt;    &lt;version&gt;1.10&lt;/version&gt;&lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://mp.weixin.qq.com/s/5RjXSWmwMlJZ0NQdzyHfsg">源码解析</a></p><hr><h5 id="二、关于生成几种常见样式的二维码？"><a href="#二、关于生成几种常见样式的二维码？" class="headerlink" title="二、关于生成几种常见样式的二维码？"></a>二、关于生成几种常见样式的二维码？</h5><p>市面上生成二维码的技术：</p><p>1、google：zxing（主流的，但只能生成黑白相间（普通和logo）的二维码）</p><p>2、github：qrcode（基于zxing，可生成绚丽多彩的二维码，如下：）</p><img src="/2021/06/21/ru-he-sheng-cheng-er-wei-ma/1.png" style="zoom:0%;"><hr><h5 id="三、实现：QrCodeController、ZxingUtil、QrCodeUtil、index-html"><a href="#三、实现：QrCodeController、ZxingUtil、QrCodeUtil、index-html" class="headerlink" title="三、实现：QrCodeController、ZxingUtil、QrCodeUtil、index.html"></a>三、实现：QrCodeController、ZxingUtil、QrCodeUtil、index.html</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">   //构建生成二维码项目所需依赖<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.4.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-autoconfigure<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--        google:zxing--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.google.zxing<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.google.zxing<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>javase<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--        github:qrCode--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.github.liuyueyi.media<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>qrcode-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.5.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>commons-lang<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-lang<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html">//静态资源下的：index.html<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JavaScript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jquery-3.5.1.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>单文件上传<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">    <span class="token selector">img[src=""].img:not([src])</span><span class="token punctuation">{</span>        <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript:void(0)<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>uploadPhoto()<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>选择图片<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>photoFile<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入跳转链接<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>preview_photo<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>normal<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>生成普通二维码<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>upload(<span class="token punctuation">'</span>normal<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logo<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>生成logo二维码<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>upload(<span class="token punctuation">'</span>logo<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>color<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>生成彩色二维码<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>upload(<span class="token punctuation">'</span>color<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>background<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>生成带背景二维码<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>upload(<span class="token punctuation">'</span>background<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>style<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>生成特殊形状二维码<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>upload(<span class="token punctuation">'</span>style<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>imageFile<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>生成图片二维码<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>upload(<span class="token punctuation">'</span>imageFile<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gif<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>生成gif二维码<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>upload(<span class="token punctuation">'</span>gif<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">function</span> <span class="token function">uploadPhoto</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#photoFile'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 上传图片     * @param flag     */</span>    <span class="token keyword">function</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token parameter">flag</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'logoFile'</span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'photoFile'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'text'</span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'text'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'flag'</span><span class="token punctuation">,</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>        $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            url<span class="token operator">:</span><span class="token string">"http://localhost:8080/create"</span><span class="token punctuation">,</span>            type<span class="token operator">:</span><span class="token string">"post"</span><span class="token punctuation">,</span>            data<span class="token operator">:</span>formData<span class="token punctuation">,</span>            contentType<span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>            processData<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token function-variable function">success</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#preview_photo'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">,</span><span class="token string">"data:image/jpeg;base64,"</span><span class="token operator">+</span>data<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function-variable function">error</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"上传失败"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">//用于返回 生成二维码的base64字符串格式图片/** * 基于Zxing jar包生成普通和logo二维码 * @Author:LuJiaHong * @Date:2021/1/27~3:55:57 * @Version 1.0 */public class ZxingUtil {    public static String createImage(String text, InputStream imgPath) throws Exception{        HashMap map = new HashMap();        map.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.H);//纠错程度        map.put(EncodeHintType.CHARACTER_SET,"utf-8");//字符编码        map.put(EncodeHintType.MARGIN,1);//边距        BitMatrix bitMatrix = new MultiFormatWriter().encode(text, BarcodeFormat.QR_CODE,300,300,map);        int width = bitMatrix.getWidth();        int height = bitMatrix.getHeight();        BufferedImage image = new BufferedImage(width,height,BufferedImage.TYPE_INT_RGB);        for(int x = 0 ; x &lt; width ; x++){            for(int y = 0; y &lt; height ; y++){                image.setRGB(x,y,bitMatrix.get(x,y) ? 0xFF000000 : 0xFFFFFF);            }        }        if(imgPath == null){            return imageToBase64(image);        }        image = insertLogo(image,imgPath);        return imageToBase64(image);    }    /**     * 生成logo二维码     * @param image     * @param imgPath     * @return     * @throws Exception     */    private static BufferedImage insertLogo(BufferedImage image, InputStream imgPath) throws Exception{        Image logo = ImageIO.read(imgPath);        int w = logo.getWidth(null);        int h = logo.getHeight(null);        if(w&gt;100){            w=100;        }        if(h&gt;100){            h=100;        }        Image logo1 = logo.getScaledInstance(w,h,Image.SCALE_SMOOTH);        BufferedImage bfImage = new BufferedImage(w,h,BufferedImage.TYPE_INT_RGB);        Graphics g = bfImage.getGraphics();        g.drawImage(logo1,0,0,null);        g.dispose();        Graphics2D gra = image.createGraphics();        int x = (300-w)/2;        int y = (300-h)/2;        gra.drawImage(logo1,x,y,null);        Shape shape = new RoundRectangle2D.Double(x,y,w,h,6,6);//设置圆角        gra.setStroke(new BasicStroke(3f));//设置画笔粗细        gra.draw(shape);        gra.dispose();//释放资源        return image;    }    /**     * 图片转为base64格式     * @param image     * @return     * @throws Exception     */    public static String imageToBase64(BufferedImage image) throws Exception{        ByteArrayOutputStream os = new ByteArrayOutputStream();        ImageIO.write(image,"png",os);        return Base64.encodeBase64String(os.toByteArray());    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">/** * 基于gitHub上开源的QrCode jar包生成各种类型二维码 * @Author:LuJiaHong * @Date:2021/1/31~23:32:22 * @Version 1.0 */public class QrCodeUtil {    /**     * 普通二维码     * @param text     * @return     * @throws Exception     */    public static String normal(String text) throws Exception {        return QrCodeGenWrapper.of(text).asString();    }    /**     * logo二维码     * @param text     * @param logoFile     * @return     * @throws Exception     */    public static String logo(String text, InputStream logoFile) throws Exception {        return QrCodeGenWrapper                .of(text)                .setLogo(logoFile)                .setLogoRate(7)                .setLogoStyle(QrCodeOptions.LogoStyle.ROUND)                .asString();    }    /**     * 带颜色二维码     * @param text     * @return     * @throws Exception     */    public static String color(String text) throws Exception {        return QrCodeGenWrapper                .of(text)                .setDrawBgColor(Color.red)                .asString();    }    /**     * 带背景图标二维码     * @param text     * @param bgFile     * @return     * @throws Exception     */    public static String backGround(String text, InputStream bgFile) throws Exception {        return QrCodeGenWrapper                .of(text)                .setBgImg(bgFile)// .setBgStyle(QrCodeOptions.BgImgStyle.FILL)//填充模式.setBgStyle(QrCodeOptions.BgImgStyle.PENETRATE)//渲染模式                .setBgH(500)                .setBgW(500)                .setW(500)                .setH(500)//                .setBgStartX(130)//                .setBgStartY(130)//                .setBgOpacity(0.5f)                .asString();    }    /**     * 特殊形状二维码     * @param text     * @return     * @throws Exception     */    public static String style(String text) throws Exception {        return QrCodeGenWrapper                .of(text)                .setBgH(500)                .setBgW(500)                .setW(500)                .setH(500)                .setDrawEnableScale(true)               .setDrawStyle(QrCodeOptions.DrawStyle.CIRCLE)                .asString();    }    /**     * 生成图片二维码     * @param text     * @param bgFile     * @return     * @throws Exception     */    public static String imageFile(String text, InputStream bgFile) throws Exception {        return QrCodeGenWrapper                .of(text)                .setW(500)                .setH(500)                .setDrawEnableScale(true)                .setErrorCorrection(ErrorCorrectionLevel.H)                .setDrawStyle(QrCodeOptions.DrawStyle.IMAGE)                .addImg(1,1,bgFile)                .asString();    }    /**     * 生成gif二维码     * @param text     * @param bgFile     * @return     * @throws Exception     */    public static String gif(String text, InputStream bgFile) throws Exception {        return QrCodeGenWrapper                .of(text)                .setW(500)                .setH(500)                .setBgImg(bgFile)                .setBgOpacity(0.5f)                .setPicType("gif")                .asString();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">//供异步请求获取 生成的Base64二维码图片 控制层@RestControllerpublic class QrCodeController {    @RequestMapping("/create")    public String CreateQrCode(@RequestParam(value = "logoFile",required = false)MultipartFile file,                               @RequestParam(value = "text")String text,                               @RequestParam(value = "flag")String flag){        try {            if(file != null){                if("logo".equals(flag)) {//return ZxingUtil.createImage(text,file.getInputStream());                    return QrCodeUtil.logo(text,file.getInputStream());                }else if ("background".equals(flag)){                    return QrCodeUtil.backGround(text,file.getInputStream());                }else if ("imageFile".equals(flag)){                    return QrCodeUtil.imageFile(text,file.getInputStream());                }else if ("gif".equals(flag)){                    return QrCodeUtil.gif(text,file.getInputStream());                }            }else{                if("normal".equals(flag)) {//                return ZxingUtil.createImage(text,null);                    return QrCodeUtil.normal(text);                }else if ("color".equals(flag)){                    return QrCodeUtil.color(text);                }else if ("style".equals(flag)){                    return QrCodeUtil.style(text);                }            }        } catch (Exception e) {            e.printStackTrace();        }        return "hello";    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h5 id="四、说明"><a href="#四、说明" class="headerlink" title="四、说明"></a>四、说明</h5><p>按给定的跳转链接（字段）和背景图片，生成的指定样式二维码，微信扫码即可实现链接的跳转（获取字段）</p><img src="/2021/06/21/ru-he-sheng-cheng-er-wei-ma/2.png" style="zoom:0%;"><p><a href="https://www.bilibili.com/video/BV19A411H7NM?p=1">视频教学</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用Hexo搭建一个属于自己的博客</title>
      <link href="/2021/06/21/shi-yong-hexo-da-jian-yi-ge-shu-yu-zi-ji-de-bo-ke-ji-yu-windows/"/>
      <url>/2021/06/21/shi-yong-hexo-da-jian-yi-ge-shu-yu-zi-ji-de-bo-ke-ji-yu-windows/</url>
      
        <content type="html"><![CDATA[<hr><h5 id="一、博客的创建"><a href="#一、博客的创建" class="headerlink" title="一、博客的创建"></a>一、博客的创建</h5><pre class="line-numbers language-text" data-language="text"><code class="language-text">1、下载node.js和Git并安装（Hexo框架依赖于node.js）2、查看node.js的版本：node -v3、查看npm的版本：npm -v4、切换成国内的打包工具（使用淘宝的）：npm install -g cnpm -registry=https://registry.npm.tabao.org5、查看cnpm的版本： cnpm -v6、安装博客的框架（Hexo）：cnpm install -g hexo-cli7、查看Hexo框架的版本： hexo -v8、windows下查看当前目录位置： chdir9、创建一个文件夹blog在你指定的盘，进入文件夹右键，点击 git bash here（安装好git后就会有此选择；pwd查看当前目录）10、初始化Hexo框架： hexo init11、启动Hexo服务： hexo s12、访问： http://localhost:4000/13、创建自己的博客： hexo n "我的第一个博客"14、本地指定blog位置可查看博客，并可以本地编辑15、清除没用的东西： hexo clean16、重新发布博客： hexo g17、重启Hexo服务： hexo s18、再访问： http://localhost:4000/19、可查看到我们自己创建的博客："我的第一个博客"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h5 id="二、如何通过外网来访问我的博客"><a href="#二、如何通过外网来访问我的博客" class="headerlink" title="二、如何通过外网来访问我的博客"></a>二、如何通过外网来访问我的博客</h5><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">1、在gitee上创建一个仓库（我的是：https://gitee.com/LJH130168/ljh-of-blog.git）2、安装git部署工具：cnpm install --save hexo-deployer-git3、修改blog根目录下的config.yml文件：deploy:type:'git'repo:https://gitee.com/LJH130168/ljh-of-blog.gitbranch:master4、部署（发布项目到码云）：hexo d5、部署报错运行：git config --global user.name "LuJiaHong" git config --global user.email "2275435906@qq.com"6、再执行部署：hexo d7、使用gitee pages服务发布项目成一个网站8、添加样式（修改blog根目录下的config.yml文件）：url: http://ljh130168.gitee.ioroot: /ljh-of-blog/9、再执行：hexo clean、hexo g、hexo s、hexo d 系列步骤10、访问：https://gitee.com/LJH130168/ljh-of-blog/pages部署点更新即可11、即可访问个人博客：http://ljh130168.gitee.io/ljh-of-blog/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div align="center">     <img src="/2021/06/21/shi-yong-hexo-da-jian-yi-ge-shu-yu-zi-ji-de-bo-ke-ji-yu-windows/1.png" height="20%" width="200">      <img src="/2021/06/21/shi-yong-hexo-da-jian-yi-ge-shu-yu-zi-ji-de-bo-ke-ji-yu-windows/2.png" height="20%" width="200">    </div><hr><h5 id="三、修改个人博客主题（Hexo）"><a href="#三、修改个人博客主题（Hexo）" class="headerlink" title="三、修改个人博客主题（Hexo）"></a>三、修改个人博客主题（Hexo）</h5><blockquote><p><a href="https://hexo.io/themes/">主题网站</a></p><pre class="line-numbers language-http" data-language="http"><code class="language-http">https://hexo.io/themes/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><em><a href="https://blog.soymilk.fun/2019/11/07/Blog/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/#Windows">参考博客</a></em></p></blockquote><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">我们查看E:\blog\themes知道默认主题，因此自己下载一些主题放里面即可。1、主题：yilia主题：https://github.com/litten/hexo-theme-yiliayilia-plus主题：https://github.com/JoeyBling/hexo-theme-yilia-plus2、在blog子文件themes里面克隆：yilia主题：git clone https://github.com/litten/hexo-theme-yilia.git themes/yiliayilia-plus主题：git clone --depth=1 https://github.com/JoeyBling/hexo-theme-yilia-plus.git ./yilia-plus3、配置修改hexo根目录下的 _config.yml ➡️ theme: yilia-plus4、显示侧边栏（在博客根目录（不是yilia-plus根目录）执行以下命令）：cnpm i hexo-generator-json-content --save5、复制下面到blog下面的_config.yml中jsonContent:    meta: false    pages: false    posts:      title: true      date: true      path: true      text: false      raw: false      content: false      slug: false      updated: false      comments: false      link: false      permalink: false      excerpt: false      categories: false      tags: true6、再执行：hexo clean、hexo g、hexo s、hexo d 系列步骤7、访问：https://gitee.com/LJH130168/ljh-of-blog/pages部署点更新即可8、即可访问个人博客：http://ljh130168.gitee.io/ljh-of-blog/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h5 id="四、如何外网上显示自己博客上传的图片"><a href="#四、如何外网上显示自己博客上传的图片" class="headerlink" title="四、如何外网上显示自己博客上传的图片"></a>四、如何外网上显示自己博客上传的图片</h5><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">1.找到Hexo下的_config.yml里的post_asset_folder，把这个选项从false改成true。2.在Hexo目录下打开Git Brsh，执行一个下载上传图片插件的命令:cnpm install hexo-asset-image --save。3.继续在Git Brsh下利用hexo n "博客名"来生成md的文件，这时就会在同级的目录下生成一个同名的文件夹。4.在.md的文件中要插入图片时，先要把所要插入的图片放在生成的同名文件夹下。5.利用markdown的语法将文件引入文章中。6.最后再执行：hexo clean、hexo g、hexo s、hexo d 系列步骤7.访问：https://gitee.com/LJH130168/ljh-of-blog/pages部署点更新即可8.即可访问个人博客：http://ljh130168.gitee.io/ljh-of-blog/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://blog.csdn.net/z952957407/article/details/111642548">另一种方法</a></p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">#下载插件npm install hexo-asset-img --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/06/21/shi-yong-hexo-da-jian-yi-ge-shu-yu-zi-ji-de-bo-ke-ji-yu-windows/image-20210621220018850.png" alt="image-20210621220018850"></p></blockquote><hr><h5 id="五、插入图片的方法"><a href="#五、插入图片的方法" class="headerlink" title="五、插入图片的方法"></a>五、插入图片的方法</h5><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">1、原生写法：![这是代替图片的文字，随便写](xxx\xxx.png)2、html-&gt;img写法（控制图片缩放）：&lt;img src="xxx\xxx.png" style="zoom:50%;" /&gt;3、html-&gt;div-&gt;img写法（插入多张图片，并控制大小）：&lt;div align="center"&gt; &lt;img src="xxx\xxx.png" height="300" width="100%" /&gt;  &lt;img src="xxx\xxx.png" height="300" width="100%" /&gt;     &lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h5 id="六、插入视频"><a href="#六、插入视频" class="headerlink" title="六、插入视频"></a>六、插入视频</h5><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>链接<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>video/mp4<span class="token punctuation">"</span></span> <span class="token attr-name">controls</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>controls<span class="token punctuation">"</span></span> <span class="token style-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token style language-css"><span class="token property">max-width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span> <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span> <span class="token property">margin-left</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span> <span class="token property">margin-right</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>your browser does not support the video tag<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h5 id="七、github"><a href="#七、github" class="headerlink" title="七、github"></a>七、github</h5><ul><li><p>我的github<a href="https://github.com/LJH130168">地址</a></p><pre class="line-numbers language-http" data-language="http"><code class="language-http">https://github.com/LJH130168<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>用户名和密码</p><pre class="line-numbers language-none"><code class="language-none">username：LJH130168password：LuJiaHong130168<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><a href="https://zhuanlan.zhihu.com/p/370635512">cankao</a></p><pre class="line-numbers language-http" data-language="http"><code class="language-http">https://zhuanlan.zhihu.com/p/370635512https://zhuanlan.zhihu.com/p/60578464https://blog.csdn.net/sinat_37781304/article/details/82729029?depth_1-<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><hr><hr><p><a href="http://nodejs.cn/download/">node.js下载</a></p><p><a href="https://git-scm.com/download/win">git下载</a></p><p><a href="https://www.bilibili.com/video/BV17J411Y7tz?t=842">参考视频</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/06/20/hello-world/"/>
      <url>/2021/06/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new "My New Post"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>lambda</title>
      <link href="/2021/06/15/lambda/"/>
      <url>/2021/06/15/lambda/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA8新特性之Lambda"><a href="#JAVA8新特性之Lambda" class="headerlink" title="JAVA8新特性之Lambda"></a>JAVA8新特性之<a href="https://www.jianshu.com/p/8d7f98116693">Lambda</a></h1><h2 id="一、Lambda"><a href="#一、Lambda" class="headerlink" title="一、Lambda"></a>一、Lambda</h2><h3 id="1、定义"><a href="#1、定义" class="headerlink" title="1、定义"></a>1、定义</h3><blockquote><p>lambda表达式是java8新增的主要特性之一，lambda表达式又称闭包或匿名函数，主要优点在于简化代码、增强代码可读性、并行操作集合等。</p></blockquote><p><em><strong>lambda表达式的特性：</strong></em></p><ol><li><strong>可选类型声明</strong>:  无需声明参数类型，编译器即可自动识别</li><li><strong>可选的参数圆括号</strong>: 仅有一个参数时圆括号可以省略</li><li><strong>可选的大括号</strong>：主体只包含一个语句时可省略大括号</li><li><strong>可选的返回关键字</strong>：主体只包含一个表达式返回值并省略大括号时，编译器会自动return返回值；有大括号时，需要显式指定表达式return了一个数值</li></ol><p><em><strong>特性示例：</strong></em></p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust">//1、无参数，返回值1() -&gt; 1 //2、无参数，无返回值() -&gt; System.out.print("Java8 lambda.");//3、1个参数，参数类型为数字，返回值为其值的5倍x -&gt;  5 * x //4、2个参数，参数类型均为数字，返回值为其差值(x, y) -&gt; x - y//5、2个参数，指定参数类型均为int型，返回值为其差值 (int x, int y) -&gt; x - y  //6、1个参数，指定参数类型为String ，无返回值(String str) -&gt; System.out.print(str)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、实际使用"><a href="#2、实际使用" class="headerlink" title="2、实际使用"></a>2、实际使用</h3><h4 id="1、java-Runnable接口的lambda实现"><a href="#1、java-Runnable接口的lambda实现" class="headerlink" title="1、java Runnable接口的lambda实现"></a>1、java Runnable接口的lambda实现</h4><blockquote><p>用lambda表达式代替匿名类的关键在于，匿名类实现的接口使用了java.lang.FunctionalInterface注解，且只有一个待实现的抽象接口方法，如Runnable接口：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@FunctionalInterfacepublic interface Runnable {    public abstract void run();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">#java1.8之前   new Thread(new Runnable()   {    @Override    public void run()    {         System.out.println("No use lambda.");    }   }).start();#java1.8之后   new Thread(() -&gt; System.out.println("Use lambda")).start();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>lambda<strong>与匿名类的联系和区别</strong><br> 联系：<br> 1） 都可以访问final或effectively final局部变量。<br> 2） 生成的对象都可以调用实现的接口方法。<br> 区别：<br> 1） this指针的指向不同。我们知道匿名类的this指针指向匿名类，而lambda表达式的this指针指向的是包围lambda表达式的类。<br> 2） 编译方式不同。lambda在编译器内部被翻译为私有方法，并使用了Java 7的 invokedynamic 字节码指令来动态绑定这个方法<br> 3） 实现的接口限制有区别。匿名类可以为任意接口创建实例，只要实现接口所有的抽象方法即可；而lambda表达式只能实现函数式接口（只有一个必须实现的抽象方法）。<br> 4） 接口默认方法的调用权限不同。匿名类实现的抽象方法允许调用接口中的默认方法，而lambda表达式不能调用接口中的默认方法。</p></blockquote><h4 id="2、java-List迭代的lambda实现"><a href="#2、java-List迭代的lambda实现" class="headerlink" title="2、java List迭代的lambda实现"></a>2、java List迭代的lambda实现</h4><blockquote><p>java8中，集合类的顶层接口java.lang.Iterable定义了一个forEach方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">/* @param action The action to be performed for each element * @throws NullPointerException if the specified action is null * @since 1.8 */default void forEach(Consumer&lt;? super T&gt; action) {    Objects.requireNonNull(action);    for (T t : this) {        action.accept(t);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>forEach方法可以迭代集合的所有对象，其参数为Consumer对象，Consumer类位于java.util.function包下，我们看下其定义：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@FunctionalInterface//这个注解就代表函数式接口，有唯一一个带实现的抽象方法，因此可以用Lambdapublic interface Consumer&lt;T&gt; {    void accept(T t);    default Consumer&lt;T&gt; andThen(Consumer&lt;? super T&gt; after) {        Objects.requireNonNull(after);        return (T t) -&gt; { accept(t); after.accept(t); };    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><pre class="line-numbers language-none"><code class="language-none">#java1.8之前    List&lt;Integer&gt; features = Arrays.asList(1,2);    for (Integer feature : features) {         System.out.println(feature);     }#java1.8之后    List&lt;Integer&gt; features = Arrays.asList(1,2);    features.forEach(n -&gt; System.out.println(n));#也可以——用java8的方法引用来表示（方法引用也是java8的新特性，由::操作符标示）：    List&lt;Integer&gt; features = Arrays.asList(1,2);    features.forEach(System.out::println);#注：而如果对参数有任何修改时不能使用方法引用，如：features.forEach(n -&gt; System.out.println(n+1));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="二、函数是接口"><a href="#二、函数是接口" class="headerlink" title="二、函数是接口"></a>二、函数是接口</h2><blockquote><p>函数式接口(Functional Interface)是java8新增的特性，它是一个有且仅有一个抽象方法，但是可以有多个非抽象方法的接口；</p><p>用lambda表达式代替匿名类的关键在于，匿名类实现的接口使用了java.lang.FunctionalInterface注解，且只有一个待实现的抽象接口方法”, 这里的接口便是函数式接口；</p><p> Runnable接口是在JDK1.8之前已经存在的接口，在JDK1.8中加入了@FunctionalInterface注解，表示将其定义为一个函数式接口。在JDK1.8中定义的函数式接口还有：</p></blockquote><ul><li>java.util.concurrent.Callable</li><li>java.security.PrivilegedAction</li><li>java.util.Comparator</li><li>java.io.FileFilter</li><li>java.nio.file.PathMatcher</li><li>java.lang.reflect.InvocationHandler</li><li>java.beans.PropertyChangeListener</li><li>java.awt.event.ActionListener</li><li>javax.swing.event.ChangeListener</li><li><strong>java.util.function</strong>包下的接口</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JAVA8新特性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stream</title>
      <link href="/2021/05/31/stream/"/>
      <url>/2021/05/31/stream/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA8新特性之Stream"><a href="#JAVA8新特性之Stream" class="headerlink" title="JAVA8新特性之Stream"></a>JAVA8新特性之<a href="https://www.jianshu.com/p/2b40fd0765c3">Stream</a></h1><h2 id="一、Stream"><a href="#一、Stream" class="headerlink" title="一、Stream"></a>一、<a href="https://www.cnblogs.com/wuhenzhidu/p/10740091.html">Stream</a></h2><blockquote><ul><li><p>Stream让开发者能够以一种声明的方式处理数据源（集合、数组等）</p></li><li><p>Stream专注于对数据源进行各种高效的<em>聚合操作和大批量数据操作</em></p></li><li><p>Stream API 处理的数据源看着一种Stream（流），Stream在Pipeline（管道）中传输和运算（筛选、排序、聚合）后得到最终的处理结果</p></li><li><p>Stream API的使用离不开lambda表达式，可以提高编码效率和代码可读性</p></li><li><p>Stream API提供串行和并行两种操作，并行操作能发挥多核处理优势，使用fork/join的方式进行并行操作以提高运行速度。并行操作无需编写多线程代码即可写出高效的并发程序，且可避免多线程代码出错的问题</p></li><li><p>在新版的JPA中，也已经加入了Stram</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Query("select u from User u")Stream&lt;User&gt; findAllByCustomQueryAndStream();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></blockquote><h3 id="lt-1-gt-、了解几个核心概念"><a href="#lt-1-gt-、了解几个核心概念" class="headerlink" title="<1>、了解几个核心概念"></a>&lt;1&gt;、了解几个核心概念</h3><p><strong>元素</strong> Stream是一个来自数据源的元素队列，Stream本身并不存储元素。</p><p><strong>数据源</strong>（即Stream的来源）包含集合、数组、I/O channel、generator（发生器）等。</p><p><strong>聚合操作</strong> 类似SQL中的filter、map、find、match、sorted等操作</p><p><strong>管道运算</strong> Stream在Pipeline中运算后返回Stream对象本身，这样多个操作串联成一个Pipeline，并形成fluent风格的代码。这种方式可以优化操作，如延迟执行(laziness)和短路( short-circuiting)。</p><p><strong>内部迭代</strong> 不同于java8以前对集合的遍历方式（外部迭代），Stream API采用访问者模式（Visitor）实现了内部迭代。</p><p><strong>并行运算</strong> Stream API支持串行（stream() ）或并行（parallelStream() ）的两种操作方式。</p><hr><h3 id="lt-2-gt-、核心"><a href="#lt-2-gt-、核心" class="headerlink" title="<2>、核心"></a>&lt;2&gt;、核心</h3><blockquote><ol><li>创建Stream：从一个数据源（集合、数组）中获取流</li><li>中间操作：一个操作的中间链，对数据源的数据进行操作</li><li>终止操作：一个终止操作，执行中间操作链，并产生结果（操作完需要关闭）</li></ol></blockquote><ol><li><p>创建Stream</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">#集合创建流List list = new arraryList();list.add(a);list.add(b);list.add(c);Stream&lt;list&gt; stream = list.stream();#数组创建流String[] arrary = new String(){a,b,c}Stram&lt;String&gt; stream = Stream.of(arrary);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>中间操作</p><ul><li>filter：接收Lambda，从流中排除某些操作；</li><li>limit：截断流，使其元素不超过给定对象</li><li>skip(n)：跳过元素，返回一个扔掉了前n个元素的流，若流中元素不足n个，则返回一个空流，与limit(n)互补</li><li>distinct：筛选，通过流所生成元素的hashCode()和equals()去除重复元素。</li><li>map–接收Lambda，将元素转换成其他形式或提取信息。接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素。</li><li>flatMap–接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流</li><li>sorted()–自然排序(Comparable)</li><li>sorted(Comparator com)–定制排序（Comparator）</li></ul></li><li><p>终止操作–查找与匹配</p><ul><li>allMatch–检查是否匹配所有元素</li><li>anyMatch–检查是否至少匹配一个元素</li><li>noneMatch–检查是否没有匹配所有元素</li><li>findFirst–返回第一个元素</li><li>findAny–返回当前流中的任意元素</li><li>count–返回流中元素的总个数</li><li>max–返回流中最大值</li><li>min–返回流中最小值</li></ul></li></ol><hr><h3 id="lt-3-gt-、串行流和并行流"><a href="#lt-3-gt-、串行流和并行流" class="headerlink" title="<3>、串行流和并行流"></a>&lt;3&gt;、串行流和并行流</h3><blockquote><p>stream()——串行流</p><p>parallelStream()——并行流，使用parallelStream()生成并行流后，对集合元素的遍历是无序的</p></blockquote><ol><li><p>看源码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">default Stream&lt;E&gt; stream() {    return StreamSupport.stream(spliterator(), false);}   default Stream&lt;E&gt; parallelStream() {    return StreamSupport.stream(spliterator(), true);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>看列子</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public static void main(String[] args){      List&lt;Integer&gt; numbers = Arrays.asList(-1, -2, 0, 4, 5);      long count = numbers.parallelStream().filter(i -&gt; i&gt;0).count();        System.out.println("Positive count: " + count);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><hr><hr><h2 id="二、Stream源码"><a href="#二、Stream源码" class="headerlink" title="二、Stream源码"></a>二、Stream源码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">package java.util.stream;import java.nio.charset.Charset;import java.nio.file.Files;import java.nio.file.Path;import java.util.Arrays;import java.util.Collection;import java.util.Comparator;import java.util.Iterator;import java.util.Objects;import java.util.Optional;import java.util.Spliterator;import java.util.Spliterators;import java.util.concurrent.ConcurrentHashMap;import java.util.function.BiConsumer;import java.util.function.BiFunction;import java.util.function.BinaryOperator;import java.util.function.Consumer;import java.util.function.Function;import java.util.function.IntFunction;import java.util.function.Predicate;import java.util.function.Supplier;import java.util.function.ToDoubleFunction;import java.util.function.ToIntFunction;import java.util.function.ToLongFunction;import java.util.function.UnaryOperator;public interface Stream&lt;T&gt; extends BaseStream&lt;T, Stream&lt;T&gt;&gt; {//filter()方法的参数为Predicate（函数式接口）对象,用它进行过滤    Stream&lt;T&gt; filter(Predicate&lt;? super T&gt; predicate);//map()方法的参数为Function（函数式接口）对象，map()方法将流中的所有元素用Function对象进行运算，生成新的流对象（流的元素类型可能改变）    &lt;R&gt; Stream&lt;R&gt; map(Function&lt;? super T, ? extends R&gt; mapper);    //summaryStatistics()方法进行数值统计。其实summaryStatistics()方法并不是Stream接口的方法，而是Stream API采用mapToInt()、mapToLong()、mapToDouble()三个方法分别生成IntStream 、LongStream 、DoubleStream 三个接口类型的对象，这个方法的参数分别为3个函数式接口ToIntFunction、ToLongFunction、ToDoubleFunction，使用时可以用lambda表达式计算返回对应的int、long、double类型即可。IntStream 、LongStream 、DoubleStream 三个接口类型都有一个summaryStatistics()方法，方法对应的类型分别是：IntSummaryStatistics、LongSummaryStatistics 、DoubleSummaryStatistics ，都有诸如统计数量、最大值、最小值、求和、平均值等方法（方法名和返回类型可能不同），利用这些方法我们可以方便的进行数值统计，列如：    //    public static void main(String[] args)    //    List&lt;Integer&gt; numbers = Arrays.asList(-1, -2, 0, 4, 5);    //    IntSummaryStatistics stats = numbers.stream().mapToInt((x) -&gt; x).summaryStatistics();    //    System.out.println("Max : " + stats.getMax());    //    System.out.println("Min : " + stats.getMin());    //    System.out.println("Sum : " + stats.getSum());    //    System.out.println("Average : " + stats.getAverage());    //    System.out.println("Count : " + stats.getCount());}    IntStream mapToInt(ToIntFunction&lt;? super T&gt; mapper);    LongStream mapToLong(ToLongFunction&lt;? super T&gt; mapper);    DoubleStream mapToDouble(ToDoubleFunction&lt;? super T&gt; mapper);//跟map()方法不同的是，Function函数的返回值类型是Stream&lt;? extends R&gt;类型，而不是R类型，即Function函数返回一个Stream流，这样flatMap()能够将一个二维的集合映射成一个一维的集合，比map()方法拥有更高的映射深度（此处可能有一点绕，可结合例子理解）    //有一个字符串数组:List&lt;String&gt; list = Arrays.asList("1 2", "3 4", "5 6");    //其有三个元素，每个元素有两个数组并用空格隔开，如果每个元素以空格分割成2个元素，并遍历打印这6个元素，//用flatMap()方法如下：//list.stream().flatMap(item -&gt; Arrays.stream(item.split(" "))).forEach(System.out::println);    //而用map()方法：//list.stream().map(item -&gt; Arrays.stream(item.split(" "))).forEach(n -&gt;n.forEach(System.out::println));    //可见，用map()方法，返回了一个“流中流”，需要在每个Stream元素遍历时，再加一层forEach进行遍历。    &lt;R&gt; Stream&lt;R&gt; flatMap(Function&lt;? super T, ? extends Stream&lt;? extends R&gt;&gt; mapper);    IntStream flatMapToInt(Function&lt;? super T, ? extends IntStream&gt; mapper);    LongStream flatMapToLong(Function&lt;? super T, ? extends LongStream&gt; mapper);    DoubleStream flatMapToDouble(Function&lt;? super T, ? extends DoubleStream&gt; mapper);//去重,筛选，通过流所生成元素的hashCode()和equals()去除重复元素。    Stream&lt;T&gt; distinct();    //sorted()--自然排序(Comparable)    Stream&lt;T&gt; sorted();//sorted(Comparator com)--定制排序（Comparator）,匿名类部类，列如：    //final Stream&lt;Person&gt; sorted = personList.stream().sorted((p1, p2) -&gt; {    //    if (p1.getAge().equals(p2.getAge())) {    //        return p1.getName().compareTo(p2.getName());    //    } else {    //        return p1.getAge().compareTo(p2.getAge());    //    }    //});    //sorted.forEach(System.out::println);    Stream&lt;T&gt; sorted(Comparator&lt;? super T&gt; comparator);//生成一个包含原Stream的所有元素的新Stream，并指定消费函数。peek()方法提供Consumer（消费）函数，但执行peek()方法时不会执行Consumer函数，而是等到流真正被消费时（终端操作时才进行消费）才会执行，这种操作为中间操作    Stream&lt;T&gt; peek(Consumer&lt;? super T&gt; action);//截断流，使其元素不超过给定对象    Stream&lt;T&gt; limit(long maxSize);  //跳过元素，返回一个扔掉了前n个元素的流，若流中元素不足n个，则返回一个空流，与limit(n)互补    Stream&lt;T&gt; skip(long n);//forEach()方法的参数为一个Consumer（消费函数，一个函数式接口）对象，forEach()方法用来迭代流中的每一个数据    void forEach(Consumer&lt;? super T&gt; action);    void forEachOrdered(Consumer&lt;? super T&gt; action);    Object[] toArray();    &lt;A&gt; A[] toArray(IntFunction&lt;A[]&gt; generator);// reduce操作又称为折叠操作，用于将流中的所有值合成一个。。reduce()方法参数为BinaryOperator类型的累加器（它接受两个类型相同的参数，返回值类型跟参数类型相同），返回一个Optional对象。实际上，Stream API中的mapToInt()方法返回的IntStream接口有类似的 average()、count()、sum()等方法就是做reduce操作，类似的还有mapToLong()、mapToDouble() 方法。当然，我们也可以用reduce()方法来自定义reduce操作。例如我们用reduce()方法来进行整数数组求和操作：    //    public static void main(String[] args) {    //    List&lt;Integer&gt; numbers = Arrays.asList(-1, -2, 0, -1, 4, 5, 1);    //    Integer total = numbers.stream().reduce((t, n) -&gt; t + n).get();    //    System.out.println("Total: " + total);}    T reduce(T identity, BinaryOperator&lt;T&gt; accumulator);    Optional&lt;T&gt; reduce(BinaryOperator&lt;T&gt; accumulator);    &lt;U&gt; U reduce(U identity,                 BiFunction&lt;U, ? super T, U&gt; accumulator,                 BinaryOperator&lt;U&gt; combiner);//collect()方法的参数为一个java.util.stream.Collector类型对象，可以用java.util.stream.Collectors工具类提供的静态方法来生成，Collectors类实现很多的归约操作，如Collectors.toList()、Collectors.toSet()、Collectors.joining()（joining适用于字符串流）等。看一个简单示例：    //用map()方法生成新的流，再用collect()方法返回原数组的绝对值数组。    //    public static void main(String[] args) {      //    List&lt;Integer&gt; numbers = Arrays.asList(-1, -2, 0, 4, 5);    //    List&lt;Integer&gt; abss = numbers.stream().map( n -&gt; Math.abs(n)).collect(Collectors.toList());    //    System.out.println("Abs list: " + abss);}    &lt;R&gt; R collect(Supplier&lt;R&gt; supplier,                  BiConsumer&lt;R, ? super T&gt; accumulator,                  BiConsumer&lt;R, R&gt; combiner);       &lt;R, A&gt; R collect(Collector&lt;? super T, A, R&gt; collector);  //返回流中最小值,列如年龄最小的人信息：    //Optional&lt;Person&gt; minAge = personList.stream().min((p1, p2) -&gt; p1.getAge().compareTo(p2.getAge()));    Optional&lt;T&gt; min(Comparator&lt;? super T&gt; comparator); //返回流中最大值,列如年龄最大的人信息：    //Optional&lt;Person&gt; maxAge = personList.stream().max((p1, p2) -&gt; p1.getAge().compareTo(p2.getAge()));    Optional&lt;T&gt; max(Comparator&lt;? super T&gt; comparator);//返回流中元素的总个数,列如：    //List&lt;Integer&gt; numbers = Arrays.asList(-1, -2, 0, 4, 5);      //long count = numbers.parallelStream().filter(i -&gt; i&gt;0).count();    long count();//检查是否至少匹配一个元素,列如：    boolean anyMatch(Predicate&lt;? super T&gt; predicate);    //检查是否匹配所有元素,列如是否都是成年人：    //boolean adult = personList.stream().allMatch(p -&gt; p.getAge() &gt;= 18);    boolean allMatch(Predicate&lt;? super T&gt; predicate); //检查是否没有匹配所有元素,列如：    boolean noneMatch(Predicate&lt;? super T&gt; predicate);  //返回第一个元素,列如：    Optional&lt;T&gt; findFirst();//返回当前流中的任意元素,列如：    Optional&lt;T&gt; findAny();    public static&lt;T&gt; Builder&lt;T&gt; builder() {        return new Streams.StreamBuilderImpl&lt;&gt;();    }    public static&lt;T&gt; Stream&lt;T&gt; empty() {        return StreamSupport.stream(Spliterators.&lt;T&gt;emptySpliterator(), false);    }    public static&lt;T&gt; Stream&lt;T&gt; of(T t) {        return StreamSupport.stream(new Streams.StreamBuilderImpl&lt;&gt;(t), false);    }    @SafeVarargs    @SuppressWarnings("varargs") // Creating a stream from an array is safe    public static&lt;T&gt; Stream&lt;T&gt; of(T... values) {        return Arrays.stream(values);    }    public static&lt;T&gt; Stream&lt;T&gt; iterate(final T seed, final UnaryOperator&lt;T&gt; f) {        Objects.requireNonNull(f);        final Iterator&lt;T&gt; iterator = new Iterator&lt;T&gt;() {            @SuppressWarnings("unchecked")            T t = (T) Streams.NONE;            @Override            public boolean hasNext() {                return true;            }            @Override            public T next() {                return t = (t == Streams.NONE) ? seed : f.apply(t);            }        };        return StreamSupport.stream(Spliterators.spliteratorUnknownSize(                iterator,                Spliterator.ORDERED | Spliterator.IMMUTABLE), false);    }    public static&lt;T&gt; Stream&lt;T&gt; generate(Supplier&lt;T&gt; s) {        Objects.requireNonNull(s);        return StreamSupport.stream(                new StreamSpliterators.InfiniteSupplyingSpliterator.OfRef&lt;&gt;(Long.MAX_VALUE, s), false);    }    public static &lt;T&gt; Stream&lt;T&gt; concat(Stream&lt;? extends T&gt; a, Stream&lt;? extends T&gt; b) {        Objects.requireNonNull(a);        Objects.requireNonNull(b);        @SuppressWarnings("unchecked")        Spliterator&lt;T&gt; split = new Streams.ConcatSpliterator.OfRef&lt;&gt;(                (Spliterator&lt;T&gt;) a.spliterator(), (Spliterator&lt;T&gt;) b.spliterator());        Stream&lt;T&gt; stream = StreamSupport.stream(split, a.isParallel() || b.isParallel());        return stream.onClose(Streams.composedClose(a, b));    }    public interface Builder&lt;T&gt; extends Consumer&lt;T&gt; {        @Override        void accept(T t);        default Builder&lt;T&gt; add(T t) {            accept(t);            return this;        }        Stream&lt;T&gt; build();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="三、Stream常见操作"><a href="#三、Stream常见操作" class="headerlink" title="三、Stream常见操作"></a>三、Stream常见操作</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">//常见的中间操作方法（filter、limit、skip、distinct、map、flatMap、sorted、peek）import lombok.Data;import java.util.ArrayList;import java.util.Arrays;import java.util.List;import java.util.Optional;import java.util.stream.Collectors;import java.util.stream.Stream;public class TestStreamAPI {    public static void main(String[] args) {        List&lt;Person&gt; personList = new ArrayList&lt;&gt;();        personList.add(new Person("欧阳雪",18,"中国",'F'));        personList.add(new Person("Tom",24,"美国",'M'));        personList.add(new Person("Harley",22,"英国",'F'));        personList.add(new Person("向天笑",20,"中国",'M'));        personList.add(new Person("李康",22,"中国",'M'));        personList.add(new Person("小梅",20,"中国",'F'));        personList.add(new Person("何雪",21,"中国",'F'));        personList.add(new Person("李康",22,"中国",'M'));        // 1）找到年龄大于18岁的人并输出；        personList.stream().filter((p) -&gt; p.getAge() &gt; 18).forEach(System.out::println);        System.out.println("-------------------------------------------");        // 2）找出所有中国人的数量        long chinaPersonNum = personList.stream().filter((p) -&gt; p.getCountry().equals("中国")).count();        System.out.println("中国人有：" + chinaPersonNum);        // limit        personList.stream().filter((p) -&gt; p.getSex() == 'F').limit(2).forEach(System.out::println);        System.out.println();        // skip        personList.stream().filter((p) -&gt; p.getSex() == 'F').skip(1).forEach(System.out::println);        // distinct        personList.stream().filter((p) -&gt; p.getSex() == 'M').distinct().forEach(System.out::println);        // map        personList.stream().map((p) -&gt; {            PersonCountry personName = new PersonCountry();            personName.setCountry(p.getCountry());            return personName;        }).distinct().forEach(System.out::println);        // map2        List&lt;String&gt; list = Arrays.asList("aaa","bbb","ccc","ddd","ddd");        final Stream&lt;Stream&lt;Character&gt;&gt; streamStream                = list.stream().map(TestStreamAPI::getCharacterByString);//        streamStream.forEach(System.out::println);        streamStream.forEach(sm -&gt; sm.forEach(System.out::print));        // flatMap        final Stream&lt;Character&gt; characterStream = list.stream().flatMap(TestStreamAPI::getCharacterByString);        characterStream.forEach(System.out::print);        // sort        final Stream&lt;Person&gt; sorted = personList.stream().sorted((p1, p2) -&gt; {            if (p1.getAge().equals(p2.getAge())) {                return p1.getName().compareTo(p2.getName());            } else {                return p1.getAge().compareTo(p2.getAge());            }        });        sorted.forEach(System.out::println);        // allMatch        final Stream&lt;Person&gt; stream = personList.stream();        final boolean adult = stream.allMatch(p -&gt; p.getAge() &gt;= 18);        System.out.println("是否都是成年人：" + adult);        final boolean chinaese = personList.stream().allMatch(p -&gt; p.getCountry().equals("中国"));        System.out.println("是否都是中国人：" + chinaese);        // max min        final Optional&lt;Person&gt; maxAge = personList.stream().max((p1, p2) -&gt; p1.getAge().compareTo(p2.getAge()));        System.out.println("年龄最大的人信息：" + maxAge.get());        final Optional&lt;Person&gt; minAge = personList.stream().min((p1, p2) -&gt; p1.getAge().compareTo(p2.getAge()));        System.out.println("年龄最小的人信息：" + minAge.get());        // reduce        List&lt;Integer&gt; integerList = new ArrayList&lt;&gt;(100);        for(int i = 1;i &lt;= 100;i++) {            integerList.add(i);        }        final Integer reduce = integerList.stream().reduce(0, (x, y) -&gt; x + y);        System.out.println("结果为：" + reduce);        final Optional&lt;Integer&gt; totalAge = personList.stream().map(Person::getAge).reduce(Integer::sum);        System.out.println("年龄总和：" + totalAge);        // collect        final List&lt;String&gt; collect = personList.stream().map(p -&gt; p.getCountry()).distinct().collect(Collectors.toList());        System.out.println(collect);        final Double collect1 = personList.stream().collect(Collectors.averagingInt(p -&gt; p.getAge()));        System.out.println("平均年龄为：" + collect1);        final Optional&lt;Integer&gt; maxAge2 = personList.stream().map(Person::getAge).collect(Collectors.maxBy(Integer::compareTo));        System.out.println(maxAge2.get());        try(final Stream&lt;Integer&gt; integerStream = personList.stream().map(Person::getAge)) {            final Optional&lt;Integer&gt; minAge2 = integerStream.collect(Collectors.minBy(Integer::compareTo));            System.out.println(minAge2.get());        }    }    public static Stream&lt;Character&gt; getCharacterByString(String str) {        List&lt;Character&gt; characterList = new ArrayList&lt;&gt;();        for (Character character : str.toCharArray()) {            characterList.add(character);        }        return characterList.stream();    }}@Dataclass PersonCountry {    private String country;}@Dataclass Person {    private String name;    private Integer age;    private String country;    private char sex;    public Person(String name, Integer age, String country, char sex) {        this.name = name;        this.age = age;        this.country = country;        this.sex = sex;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JAVA8新特性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>optional</title>
      <link href="/2021/05/30/optional/"/>
      <url>/2021/05/30/optional/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA8新特性之Optional"><a href="#JAVA8新特性之Optional" class="headerlink" title="JAVA8新特性之Optional"></a>JAVA8新特性之<a href="https://www.jianshu.com/p/d81a5f7c9c4e">Optional</a></h1><h2 id="一、Optional"><a href="#一、Optional" class="headerlink" title="一、Optional"></a>一、Optional</h2><blockquote><ol><li>根据jdk8官方文档，可以知道，该根据类存在于java.util下的final类，是官方提供的工具类；</li><li>Optional类是java8为了解决null值判断问题，借鉴google guava类库的Optional类而引入的一个同名Optional类，使用Optional类可以避免显示的null值判断，避免null导致的NPE（NullPointException）；</li><li>学习了解Optional创建对象和常用方法的使用；</li><li>使用Optional开发时要注意正确使用Optional的“姿势”，特别注意不要使用3.2节提到的错误示范，谨慎使用isPresent()和get()方法，尽量多使用map()、filter()、orElse()等方法来发挥Optional的作用；</li><li>不过采用这种Optional链式编程，虽然代码优雅了。但是，逻辑性没那么明显，可读性有所降低；</li></ol></blockquote><hr><h2 id="二、Optional详解"><a href="#二、Optional详解" class="headerlink" title="二、Optional详解"></a>二、Optional详解</h2><blockquote><p>// 1、创建一个包装对象值为空的Optional对象<br>Optional<string> optStr = Optional.empty();<br>// 2、创建包装对象值非空的Optional对象<br>Optional<string> optStr1 = Optional.of(“optional”);<br>// 3、创建包装对象值允许为空的Optional对象<br>Optional<string> optStr2 = Optional.ofNullable(null);</string></string></string></p><p>//4、常用方法：get、isPresent、ifPresent、filter、map、flatMap、orElse、orElseGet、orElseThrow</p></blockquote><table><thead><tr><th><strong>序号</strong></th><th><strong>方法</strong></th><th><strong>方法说明</strong></th></tr></thead><tbody><tr><td><strong>1</strong></td><td><code>private Optional()</code></td><td>无参构造，构造一个空Optional</td></tr><tr><td><strong>2</strong></td><td><code>private Optional(T value)</code></td><td>根据传入的非空value构建Optional</td></tr><tr><td><strong>3</strong></td><td><code>public static&lt;T&gt; Optional&lt;T&gt; empty()</code></td><td>返回一个空的Optional，该实例的value为空</td></tr><tr><td><strong>4</strong></td><td><code>public static &lt;T&gt; Optional&lt;T&gt; of(T value)</code></td><td>根据传入的非空value构建Optional，与Optional(T value)方法作用相同</td></tr><tr><td><strong>5</strong></td><td><code>public static &lt;T&gt; Optional&lt;T&gt; ofNullable(T value)</code></td><td>与of(T value)方法不同的是，ofNullable(T value)允许你传入一个空的value，当传入的是空值时其创建一个空Optional，当传入的value非空时，与of()作用相同</td></tr><tr><td><strong>6</strong></td><td><code>public T get()</code></td><td>返回Optional的值，如果容器为空，则抛出NoSuchElementException异常</td></tr><tr><td><strong>7</strong></td><td><code>public boolean isPresent()</code></td><td>判断当家Optional是否已设置了值</td></tr><tr><td><strong>8</strong></td><td><code>public void ifPresent(Consumer&lt;? super T&gt; consumer)</code></td><td>判断当家Optional是否已设置了值，如果有值，则调用Consumer函数式接口进行处理</td></tr><tr><td><strong>9</strong></td><td><code>public Optional&lt;T&gt; filter(Predicate&lt;? super T&gt; predicate)</code></td><td>如果设置了值，且满足Predicate的判断条件，则返回该Optional，否则返回一个空的Optional</td></tr><tr><td><strong>10</strong></td><td><code>public&lt;U&gt; Optional&lt;U&gt; map(Function&lt;? super T, ? extends U&gt; mapper)</code></td><td>如果Optional设置了value，则调用Function对值进行处理，并返回包含处理后值的Optional，否则返回空Optional</td></tr><tr><td><strong>11</strong></td><td><code>public&lt;U&gt; Optional&lt;U&gt; flatMap(Function&lt;? super T, Optional&lt;U&gt;&gt; mapper)</code></td><td>与map()方法类型，不同的是它的mapper结果已经是一个Optional，不需要再对结果进行包装</td></tr><tr><td><strong>12</strong></td><td><code>public T orElse(T other)</code></td><td>如果Optional值不为空，则返回该值，否则返回other</td></tr><tr><td><strong>13</strong></td><td><code>public T orElseGet(Supplier&lt;? extends T&gt; other)</code></td><td>如果Optional值不为空，则返回该值，否则根据other另外生成一个</td></tr><tr><td><strong>14</strong></td><td><code>public &lt;X extends Throwable&gt; T orElseThrow(Supplier&lt;? extends X&gt; exceptionSupplier)throws X</code></td><td>如果Optional值不为空，则返回该值，否则通过supplier抛出一个异常</td></tr></tbody></table><hr><h2 id="三、Optional源码"><a href="#三、Optional源码" class="headerlink" title="三、Optional源码"></a>三、Optional源码</h2><blockquote><p>Optional类源码，重写了Object类中的equals、hashcode、toString方法</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">package java.util;import java.util.function.Consumer;import java.util.function.Function;import java.util.function.Predicate;import java.util.function.Supplier;public final class Optional&lt;T&gt; {    private static final Optional&lt;?&gt; EMPTY = new Optional&lt;&gt;();    private final T value;    private Optional() {        this.value = null;    }    public static&lt;T&gt; Optional&lt;T&gt; empty() {        @SuppressWarnings("unchecked")        Optional&lt;T&gt; t = (Optional&lt;T&gt;) EMPTY;        return t;    }    private Optional(T value) {        this.value = Objects.requireNonNull(value);    }    public static &lt;T&gt; Optional&lt;T&gt; of(T value) {        return new Optional&lt;&gt;(value);    }    public static &lt;T&gt; Optional&lt;T&gt; ofNullable(T value) {        return value == null ? empty() : of(value);    }    //get()方法主要用于返回包装对象的实际值，但是如果包装对象值为null，会抛出NoSuchElementException异常    public T get() {        if (value == null) {            throw new NoSuchElementException("No value present");        }        return value;    }    //isPresent()方法用于判断包装对象的值是否非空    public boolean isPresent() {        return value != null;    }    //ifPresent()方法接受一个Consumer对象（消费函数），如果包装对象的值非空，运行Consumer对象的accept()方法    public void ifPresent(Consumer&lt;? super T&gt; consumer) {        if (value != null)            consumer.accept(value);    }    //filter()方法接受参数为Predicate对象，用于对Optional对象进行过滤，如果符合Predicate的条件，返回Optional对象本身，否则返回一个空的Optional对象    public Optional&lt;T&gt; filter(Predicate&lt;? super T&gt; predicate) {        Objects.requireNonNull(predicate);        if (!isPresent())            return this;        else            return predicate.test(value) ? this : empty();    }    //map()方法的参数为Function（函数式接口）对象，map()方法将Optional中的包装对象用Function函数进行运算，并包装成新的Optional对象（包装对象的类型可能改变）    public&lt;U&gt; Optional&lt;U&gt; map(Function&lt;? super T, ? extends U&gt; mapper) {        Objects.requireNonNull(mapper);        if (!isPresent())            return empty();        else {            return Optional.ofNullable(mapper.apply(value));        }    }    //跟map()方法不同的是，入参Function函数的返回值类型为Optional&lt;U&gt;类型，而不是U类型，这样flatMap()能将一个二维的Optional对象映射成一个一维的对象    public&lt;U&gt; Optional&lt;U&gt; flatMap(Function&lt;? super T, Optional&lt;U&gt;&gt; mapper) {        Objects.requireNonNull(mapper);        if (!isPresent())            return empty();        else {            return Objects.requireNonNull(mapper.apply(value));        }    }    //orElse()方法功能比较简单，即如果包装对象值非空，返回包装对象值，否则返回入参other的值（默认值）    public T orElse(T other) {        return value != null ? value : other;    }    //orElseGet()方法与orElse()方法类似，区别在于orElseGet()方法的入参为一个Supplier对象，用Supplier对象的get()方法的返回值作为默认值    public T orElseGet(Supplier&lt;? extends T&gt; other) {        return value != null ? value : other.get();    }    //orElseThrow()方法其实与orElseGet()方法非常相似了，入参都是Supplier对象，只不过orElseThrow()的Supplier对象必须返回一个Throwable异常，并在orElseThrow()中将异常抛出。orElseThrow()方法适用于包装对象值为空时需要抛出特定异常的场景    public &lt;X extends Throwable&gt; T orElseThrow(Supplier&lt;? extends X&gt; exceptionSupplier) throws X {        if (value != null) {            return value;        } else {            throw exceptionSupplier.get();        }    }    @Override    public boolean equals(Object obj) {        if (this == obj) {            return true;        }        if (!(obj instanceof Optional)) {            return false;        }        Optional&lt;?&gt; other = (Optional&lt;?&gt;) obj;        return Objects.equals(value, other.value);    }    @Override    public int hashCode() {        return Objects.hashCode(value);    }    @Override    public String toString() {        return value != null            ? String.format("Optional[%s]", value)            : "Optional.empty";    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="四、Optional方法常用实列"><a href="#四、Optional方法常用实列" class="headerlink" title="四、Optional方法常用实列"></a>四、Optional方法常用实列</h2><h3 id="1、Optional-T-value-empty-of-T-value-ofNullable-T-value"><a href="#1、Optional-T-value-empty-of-T-value-ofNullable-T-value" class="headerlink" title="1、Optional(T value),empty(),of(T value),ofNullable(T value)"></a>1、Optional(T value),empty(),of(T value),ofNullable(T value)</h3><blockquote><p>Optional(T value),empty(),of(T value),ofNullable(T value)<br>这四个函数之间具有相关性，因此放在一组进行记忆。<br>先说明一下，Optional(T value)，即构造函数，它是private权限的，不能由外部调用的。其余三个函数是public权限，供我们所调用。<br>那么，Optional的本质，就是内部储存了一个真实的值，在构造的时候，就直接判断其值是否为空</p></blockquote><img src="/2021/05/30/optional/image-20210530194617357.png" alt="image-20210530194617357" style="zoom:80%;"><h3 id="2、orElse-T-other-，orElseGet-Supplier-lt-extends-T-gt-other-和orElseThrow-Supplier-lt-extends-X-gt-exceptionSupplier"><a href="#2、orElse-T-other-，orElseGet-Supplier-lt-extends-T-gt-other-和orElseThrow-Supplier-lt-extends-X-gt-exceptionSupplier" class="headerlink" title="2、orElse(T other)，orElseGet(Supplier<? extends T> other)和orElseThrow(Supplier<? extends X> exceptionSupplier)"></a>2、orElse(T other)，orElseGet(Supplier&lt;? extends T&gt; other)和orElseThrow(Supplier&lt;? extends X&gt; exceptionSupplier)</h3><blockquote><p>orElse(T other)，orElseGet(Supplier&lt;? extends T&gt; other)和orElseThrow(Supplier&lt;? extends X&gt; exceptionSupplier)<br>这三个函数放一组进行记忆，都是在构造函数传入的value值为null时，进行调用的。orElse和orElseGet的用法如下所示，相当于value值为null时，给予一个默认值:</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Testpublic void test() {    User user = null;    user = Optional.ofNullable(user).orElse(createUser());    user = Optional.ofNullable(user).orElseGet(() -&gt; createUser());    }public User createUser(){    User user = new User();    user.setName("zhangsan");    return user;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这两个函数的区别：当user值不为null时，orElse函数依然会执行createUser()方法，而orElseGet函数并不会执行createUser()方法，大家可自行测试。<br>至于orElseThrow，就是value值为null时,直接抛一个异常出去，用法如下所示</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">User user = null;Optional.ofNullable(user).orElseThrow(()-&gt;new Exception("用户不存在"));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3、map-Function-lt-super-T-extends-U-gt-mapper-和flatMap-Function-lt-super-T-Optional-gt-mapper"><a href="#3、map-Function-lt-super-T-extends-U-gt-mapper-和flatMap-Function-lt-super-T-Optional-gt-mapper" class="headerlink" title="3、map(Function<? super T, ? extends U> mapper)和flatMap(Function<? super T, Optional> mapper)"></a>3、map(Function&lt;? super T, ? extends U&gt; mapper)和flatMap(Function&lt;? super T, Optional<u>&gt; mapper)</u></h3><blockquote><p>map(Function&lt;? super T, ? extends U&gt; mapper)和flatMap(Function&lt;? super T, Optional<u>&gt; mapper)<br>这两个函数放在一组记忆，这两个函数做的是转换值的操作。</u></p><p>这两个函数，在函数体上没什么区别。唯一区别的就是入参，map函数所接受的入参类型为<code>Function&lt;? super T, ? extends U&gt;</code>，而flapMap的入参类型为<code>Function&lt;? super T, Optional&lt;U&gt;&gt;</code></p></blockquote><blockquote><p>用map时，实体类User这样写：</p><p>获取name写法：String city = Optional.ofNullable(user).map(u-&gt; u.getName()).get();</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class User {    private String name;    public String getName() {        return name;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>用flatMap时，实体类User这样写：</p><p>获取name写法：String city = Optional.ofNullable(user).flatMap(u-&gt; u.getName()).get();</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class User {    private String name;    public Optional&lt;String&gt; getName() {        return Optional.ofNullable(name);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、isPresent-和ifPresent-Consumer-lt-super-T-gt-consumer"><a href="#4、isPresent-和ifPresent-Consumer-lt-super-T-gt-consumer" class="headerlink" title="4、isPresent()和ifPresent(Consumer<? super T> consumer)"></a>4、isPresent()<code>和</code>ifPresent(Consumer&lt;? super T&gt; consumer)</h3><blockquote><p>isPresent()和ifPresent(Consumer&lt;? super T&gt; consumer)<br>这两个函数放在一起记忆，isPresent即判断value值是否为空，而ifPresent就是在value值不为空时，做一些操作。</p></blockquote><blockquote><p>isPresent()千外不要下面这样写：</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">if (user != null){   // TODO: do something}写为：Optional&lt;User&gt; user = Optional.ofNullable(user);if (user.isPresent()){   user.get().setUsername("小明")}else{    throw new NullPointException();}因为这样写，代码结构依然丑陋。正确写法：Optional.ofNullable(user).ifPresent(u-&gt;{u.setUsername("小明")});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>fPresent(Consumer&lt;? super T&gt; consumer)</p></blockquote><pre class="line-numbers language-none"><code class="language-none">public static void printName(Student student)    {        Optional.ofNullable(student).ifPresent(u -&gt;  System.out.println("The student name is : " + u.getName()));    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、filter-Predicate-lt-super-T-gt-predicate"><a href="#5、filter-Predicate-lt-super-T-gt-predicate" class="headerlink" title="5、filter(Predicate<? super T> predicate)"></a>5、filter(Predicate&lt;? super T&gt; predicate)</h3><blockquote><p>filter 方法接受一个 Predicate 来对 Optional 中包含的值进行过滤，如果包含的值满足条件，那么还是返回这个 Optional；否则返回 Optional.empty。</p><p>如上下所示，如果user的name的长度是小于6的，则返回。如果是大于6的，则返回一个EMPTY对象</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">Optional&lt;User&gt; user = Optional.ofNullable(user).filter(u -&gt; u.getName().length()&lt;6);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="五、Optional扩展"><a href="#五、Optional扩展" class="headerlink" title="五、Optional扩展"></a>五、Optional扩展</h2><h3 id="1、使用Optional避免空指针"><a href="#1、使用Optional避免空指针" class="headerlink" title="1、使用Optional避免空指针"></a>1、使用Optional避免空指针</h3><blockquote><p>在我们日常开发过程中不可避免地会遇到空指针问题，在以前，出现空指针问题，我们通常需要进行调试等方式才能最终定位到具体位置，尤其是在分布式系统服务之间的调用，问题更难定位。在使用Optional后，我们可以将接受到的参数对象进行包装，比如，订单服务要调用商品服务的一个接口，并将商品信息通过参数传入，这时候，传入的商品参数可能直接传入的就是null，这时，商品方法可以使用Optional.of(T)对传入的对象进行包装，如果T为空，则会直接抛出空指针异常，我们看到异常信息就能立即知道发生空指针的原因是参数T为空；或者，当传入的参数为空时，我们可以使用Optional.orElse()或Optional.orElseGet()方法生成一个默认的实例，再进行后续的操作。</p><p>　　下面再看个具体例子：在User类中有个Address类，在Address类中有个Street类,Street类中有streetName属性，现在的需求是：根据传入的User实例，获取对应的streetName，如果User为null或Address为null或Street为null，返回“nothing found”，否则返回对应的streetName。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">Optional写法：——实体类：1 @Data2 public class User {3     private String name;4     private Integer age;5     private Optional&lt;Address&gt; address = Optional.empty();6 }1 @Data2 public class Address {3     private Optional&lt;Street&gt; street = Optional.empty();4 }1 @Data2 public class Street {3     private String streetName;4     private Integer streetNo;5 }——获取streetName1 public String getUserSteetName(User user) {2 3     Optional&lt;User&gt; userOptional = Optional.ofNullable(user);4     final String streetName = userOptional.orElse(new User()).getAddress().orElse(new Address()).getStreet().orElse(new Street()).getStreetName();5     return StringUtils.isEmpty(streetName) ? "nothing found" : streetName;6 }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、取实体类中属性为对象的属性"><a href="#2、取实体类中属性为对象的属性" class="headerlink" title="2、取实体类中属性为对象的属性"></a>2、取实体类中属性为对象的属性</h3><blockquote><p>之前写法</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">public String getCity(User user)  throws Exception{        if(user!=null){            if(user.getAddress()!=null){                Address address = user.getAddress();                if(address.getCity()!=null){                    return address.getCity();                }            }        }        throw new Excpetion("取值错误");     }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Optional写法：</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">public String getCity(User user) throws Exception{    return Optional.ofNullable(user)                   .map(u-&gt; u.getAddress())                   .map(a-&gt;a.getCity())                   .orElseThrow(()-&gt;new Exception("取指错误"));}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、获取返回存在某属性的对象，不存在创建属性返回对象"><a href="#3、获取返回存在某属性的对象，不存在创建属性返回对象" class="headerlink" title="3、获取返回存在某属性的对象，不存在创建属性返回对象"></a>3、获取返回存在某属性的对象，不存在创建属性返回对象</h3><blockquote><p>之前写法</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">public User getUser(User user) throws Exception{    if(user!=null){        String name = user.getName();        if("zhangsan".equals(name)){            return user;        }    }else{        user = new User();        user.setName("zhangsan");        return user;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Optional写法：</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">public User getUser(User user) {    return Optional.ofNullable(user)                   .filter(u-&gt;"zhangsan".equals(u.getName()))                   .orElseGet(()-&gt; {                        User user1 = new User();                        user1.setName("zhangsan");                        return user1;                   });}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、项目中实列"><a href="#4、项目中实列" class="headerlink" title="4、项目中实列"></a>4、项目中实列</h3><blockquote><p>之前写法</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">public String test0(AlarmAllParmeter alarmAllParmeter) {      String errorResult = "";      if (null != alarmAllParmeter) {          Integer alarmId = alarmAllParmeter.getAlarmEventInputId();          if (null != alarmId) {              AlarmEventInput alarmEventInput = alarmEventInputService.get(alarmId);              if (null != alarmEventInput) {                  String alarmName = alarmEventInput.getAlarmName();                  int alarmType = alarmEventInput.getAlarmType();                  return String.valueOf(alarmType) + "-" + alarmName;              } else {                  return errorResult;              }          } else {              return errorResult;          }      } else {          return errorResult;      }  }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Option的错误写法：</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">public String test1(AlarmAllParmeter alarmAllParmeter){    String errorResult = "";    Optional&lt;AlarmAllParmeter&gt; op = Optional.ofNullable(alarmAllParmeter);    if(op.isPresent()){        Integer alarmId = op.get().getAlarmEventInputId();        Optional&lt;Integer&gt; op1 = Optional.ofNullable(alarmId);        if(op1.isPresent()){            AlarmEventInput alarmEventInput = alarmEventInputService.get(op1.get());            Optional&lt;AlarmEventInput&gt; op2 = Optional.ofNullable(alarmEventInput);            if (op2.isPresent()) {                String alarmName = alarmEventInput.getAlarmName();                int alarmType = alarmEventInput.getAlarmType();                return String.valueOf(alarmType) + "-" + alarmName;            } else {                return errorResult;            }        }        else {            return errorResult;        }    }    else {        return errorResult;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Optional正确写法：</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">public String test2(AlarmAllParmeter alarmAllParmeter){    return Optional.ofNullable(alarmAllParmeter)                   .map(a -&gt; a.getAlarmEventInputId())                   .map(a -&gt; alarmEventInputService.get(a))                   .map(a -&gt; String.valueOf(a.getAlarmType())+"-"+a.getAlarmName())                   .orElse("");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JAVA8新特性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uploadAndDown</title>
      <link href="/2021/04/25/uploadanddown/"/>
      <url>/2021/04/25/uploadanddown/</url>
      
        <content type="html"><![CDATA[<h1 id="来学习一下文件上传和下载"><a href="#来学习一下文件上传和下载" class="headerlink" title="来学习一下文件上传和下载"></a><a href="https://www.bilibili.com/video/BV1764y1u7gn?from=search&amp;seid=5742711538790041984">来学习一下文件上传和下载</a></h1><hr><h2 id="一、页面开发"><a href="#一、页面开发" class="headerlink" title="一、页面开发"></a>一、页面开发</h2><img src="/2021/04/25/uploadanddown/image-20210425232236274.png" alt="image-20210425232236274" style="zoom:80%;"><img src="/2021/04/25/uploadanddown/image-20210425235904199.png" alt="image-20210425235904199" style="zoom:80%;"><img src="/2021/04/25/uploadanddown/image-20210425235935477.png" alt="image-20210425235935477" style="zoom:80%;"><hr><h2 id="二、库表设计"><a href="#二、库表设计" class="headerlink" title="二、库表设计"></a>二、库表设计</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">SET FOREIGN_KEY_CHECKS=0;-- ------------------------------ Table structure for t_files-- ----------------------------DROP TABLE IF EXISTS `t_files`;CREATE TABLE `t_files` (  `id` int(11) NOT NULL AUTO_INCREMENT,  `oldFileName` varchar(255) DEFAULT NULL,  `newFileName` varchar(255) DEFAULT NULL,  `ext` varchar(255) DEFAULT NULL,  `path` varchar(255) DEFAULT NULL,  `size` varchar(255) DEFAULT NULL,  `type` varchar(255) DEFAULT NULL,  `isImg` int(11) NOT NULL,  `downCounts` varchar(255) DEFAULT NULL,  `uploadTime` datetime DEFAULT NULL,  PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;-- ------------------------------ Records of t_files-- ------------------------------ ------------------------------ Table structure for t_user-- ----------------------------DROP TABLE IF EXISTS `t_user`;CREATE TABLE `t_user` (  `id` int(11) NOT NULL AUTO_INCREMENT,  `username` varchar(255) DEFAULT NULL,  `password` varchar(255) DEFAULT NULL,  PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;-- ------------------------------ Records of t_user-- ----------------------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="三、环境搭建"><a href="#三、环境搭建" class="headerlink" title="三、环境搭建"></a>三、环境搭建</h2><img src="/2021/04/25/uploadanddown/image-20210426225104872.png" alt="image-20210426225104872" style="zoom:80%;"><hr><h2 id="四、用户登录开发"><a href="#四、用户登录开发" class="headerlink" title="四、用户登录开发"></a>四、用户登录开发</h2><blockquote><p>这次新建了一个工程，因为 <code>Lombok</code> 用得很习惯，但以前的话，一般只用了<code>@Data</code>，<code>@AllArgsConstructor</code>，<code>@EqualsAndHashCode</code>等常规注解；那这个<code>Accessors(chain = true)</code>注解是干嘛的呢？</p><pre class="line-numbers language-http" data-language="http"><code class="language-http">https://www.cnblogs.com/grey-wolf/p/11812528.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><hr><h2 id="五、用户文件列表"><a href="#五、用户文件列表" class="headerlink" title="五、用户文件列表"></a>五、用户文件列表</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>f:${file}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${f.id}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${f.oldFileName}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${f.newFileName}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${f.ext}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${f.path}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${f.size}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${f.type}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${f.isImg}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${f.downCounts}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${#dates.format(f.uploadTime,<span class="token punctuation">'</span>yyyy-MM-dd<span class="token punctuation">'</span>)}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>//日期格式化    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>下载<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>在线打开<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="六、用户文件上传"><a href="#六、用户文件上传" class="headerlink" title="六、用户文件上传"></a>六、用户文件上传</h2><h3 id="1、文件上传"><a href="#1、文件上传" class="headerlink" title="1、文件上传"></a>1、文件上传</h3><blockquote><p>记录旧文件名、新文件名、文件后缀、文件大小、文件路径、文件类型、下载次数、下载时间、是否图片</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">/** * 上传文件并保存到数据库中 * 文件名lujiahong要和表单中的name属性一一对应 * 上传的文件存在static里面 * @param file * @return */@PostMapping("/upload")public String upload(@RequestParam("lujiahong") MultipartFile file,HttpSession session) throws IOException {    //1、获取文件原始名称    String oldFileName = file.getOriginalFilename();    //2、按旧文件名获取文件后缀（创建新文件名名获取文件后缀 ，需要引入依赖包commons-fileupload）    String extension ="."+ FilenameUtils.getExtension(oldFileName);    //3、生成新的文件名称(当前时间+UUID+后缀)——UUID里面有符号"-",替换为""    String newFileName = new SimpleDateFormat("yyyyMMddHHmmss").format(new Date() )+ UUID.randomUUID().toString().replace("-","")+extension;    //4、文件大小    Long size = file.getSize();    //5、文件类型    String type = file.getContentType();    //6、根据日期生成目录        //通过工具类ResourceUtils去获取静态文件下指定文件的真实路径    String realPath = ResourceUtils.getURL("classpath:").getPath() + "/static/files";        //生成动态日期路径    String dataFormat = new SimpleDateFormat("yyyy-MM-dd").format(new Date());    String dateDirPath = realPath + "/" + dataFormat;        //得到日期目录    File dateDir = new File(dateDirPath);    if(!dateDir.exists()) {        dateDir.mkdirs();    }    //7、处理文件上传    file.transferTo(new File(dateDir,newFileName));    //8、文件相关数据存入数据库    Files files = new Files();    files.setUserId(((User)session.getAttribute("user")).getId());    files.setOldFileName(oldFileName);    files.setNewFileName(newFileName);    files.setExt(extension);    files.setType(type);    files.setSize(size);    files.setPath("/files/"+dataFormat);    files.setDownCounts("0");    files.setUploadTime(new Date());    files.setIsImg(0);    this.iFilesService.save(files);    return "redirect:/file/showAll";}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、配置文件上传大小、以及一次性可上传文件大小"><a href="#2、配置文件上传大小、以及一次性可上传文件大小" class="headerlink" title="2、配置文件上传大小、以及一次性可上传文件大小"></a>2、配置文件上传大小、以及一次性可上传文件大小</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">spring:   servlet:    multipart:    max-file-size: 50MB #设置单个文件大小    max-request-size: 50MB #设置单次请求文件的总大小<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configurationpublic class MultipartConfig {    @Bean    public MultipartConfigElement multipartConfigElement(){        MultipartConfigFactory factory = new MultipartConfigFactory();        factory.setMaxFileSize(DataSize.parse("50MB"));//允许上传的文件最大值        factory.setMaxRequestSize(DataSize.parse("50MB"));// 设置总上传数据总大小        return factory.createMultipartConfig();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、参考"><a href="#3、参考" class="headerlink" title="3、参考"></a>3、参考</h3><ol><li><a href="https://blog.csdn.net/xx66_xx/article/details/89522540">参考一</a></li><li><a href="https://blog.csdn.net/lehek/article/details/104576416">参考二</a></li><li><a href="https://blog.csdn.net/lehek/article/details/104575496">参考三</a></li></ol><hr><h2 id="七、用户上传文件是否是图片判断"><a href="#七、用户上传文件是否是图片判断" class="headerlink" title="七、用户上传文件是否是图片判断"></a>七、用户上传文件是否是图片判断</h2><h3 id="1、后台响应前台"><a href="#1、后台响应前台" class="headerlink" title="1、后台响应前台"></a>1、后台响应前台</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class ResBack {    public static void response(String msg, HttpServletResponse response){        try {            response.setContentType("text/html; charset=UTF-8"); //转码            PrintWriter out = response.getWriter();            out.flush();            out.println("&lt;script&gt;");            out.println("alert('"+msg+"');");            out.println("history.back();");            out.println("&lt;/script&gt;");        } catch (IOException e) {            e.printStackTrace();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、后台在线播放</p><blockquote><p>servletContext.contextPath用来获取文件项目中的地址，后面是保存在项目static里面的路径的拼接</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>switch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${f.isImg ne <span class="token punctuation">'</span><span class="token punctuation">'</span>}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name"><span class="token namespace">th:</span>case</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${f.isImg eq <span class="token punctuation">'</span>图片<span class="token punctuation">'</span>}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${#servletContext.contextPath+f.path+<span class="token punctuation">'</span>/<span class="token punctuation">'</span>+f.newFileName}<span class="token punctuation">"</span></span> <span class="token style-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token style language-css"><span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 100px</span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name"><span class="token namespace">th:</span>case</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${f.isImg eq <span class="token punctuation">'</span>视频<span class="token punctuation">'</span>}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${#servletContext.contextPath+f.path+<span class="token punctuation">'</span>/<span class="token punctuation">'</span>+f.newFileName}<span class="token punctuation">"</span></span> <span class="token attr-name">controls</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>controls<span class="token punctuation">"</span></span> <span class="token style-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token style language-css"><span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 100px</span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>audio</span> <span class="token attr-name"><span class="token namespace">th:</span>case</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${f.isImg eq <span class="token punctuation">'</span>音频<span class="token punctuation">'</span>}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${#servletContext.contextPath+f.path+<span class="token punctuation">'</span>/<span class="token punctuation">'</span>+f.newFileName}<span class="token punctuation">"</span></span> <span class="token attr-name">controls</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>controls<span class="token punctuation">"</span></span> <span class="token style-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token style language-css"><span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 100px</span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>audio</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>case</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${f.isImg eq <span class="token punctuation">'</span>未知类型<span class="token punctuation">'</span>}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>未知类型<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2021/04/25/uploadanddown/image-20210429224609106.png" alt="image-20210429224609106" style="zoom:80%;"><hr><h2 id="八、用户下载文件"><a href="#八、用户下载文件" class="headerlink" title="八、用户下载文件"></a>八、用户下载文件</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">@GetMapping("/download")public void down(@RequestParam("id") int id,HttpServletResponse response) throws IOException {    //1、获取文件信息    Files files = this.iFilesService.getById(id);    //2、更新下载次数    files.setDownCounts(files.getDownCounts()+1);    this.iFilesService.updateById(files);    //2、根据文件存储路径path和文件名获取文件输出流    String downPath = ResourceUtils.getURL("classpath:").getPath() + "/static" + files.getPath();    //3、获取文件输入流    FileInputStream fileInputStream = new FileInputStream(new File(downPath,files.getNewFileName()));    //4、附件格式下载设置头部( URLEncoder.encode(files.getOldFileName(),"utf-8") 设置文件名编码风格，避免乱码)    response.setHeader("content-disposition","attachment;fileName="+ URLEncoder.encode(files.getOldFileName(),"utf-8"));    //4、获取响应输出流    ServletOutputStream outputStream = response.getOutputStream();    //5、文件拷贝    IOUtils.copy(fileInputStream,outputStream);    //6、关闭输入输出流    IOUtils.closeQuietly(fileInputStream);    IOUtils.closeQuietly(outputStream);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="九、用户删除文件"><a href="#九、用户删除文件" class="headerlink" title="九、用户删除文件"></a>九、用户删除文件</h2><h3 id="1、前台请求url的写法——thymeleaf"><a href="#1、前台请求url的写法——thymeleaf" class="headerlink" title="1、前台请求url的写法——thymeleaf"></a>1、前台请求url的写法——thymeleaf</h3><blockquote><p>@{/file/download(id=${f.id},openStyle=’inline’)}相当于file/download?id=30&amp;openStyle=inline</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/file/download(id=${f.id})}<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>下载<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/file/download(id=${f.id},openStyle=<span class="token punctuation">'</span>inline<span class="token punctuation">'</span>)}<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>在线打开<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/file/delFile(id=${f.id})}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>&lt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2、在线展示数据"><a href="#2、在线展示数据" class="headerlink" title="2、在线展示数据"></a>2、在线展示数据</h3><blockquote><p>下载还是在线打开（逻辑判断，设置不同请求头即可实现；attachment——下载；inline——在线打开）</p><p>response.setHeader(“content-disposition”,”attachment;fileName=文件名”);//下载头部设置</p><p>response.setHeader(“content-disposition”,”inline;fileName=文件名”);//预览头部设置</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">@GetMapping("/download")public void down(String openStyle,@RequestParam("id") int id,HttpServletResponse response) throws IOException {    //获取打开方式——下载还是在线打开（共用一个接口，逻辑判断，设置不同请求头即可实现；attachment——下载；inline——在线打开）    openStyle = openStyle == null? "attachment":openStyle;    //1、获取文件信息    Files files = this.iFilesService.getById(id);    //2、更新下载次数    if("attachment".equals(openStyle)){        files.setDownCounts(files.getDownCounts()+1);        this.iFilesService.updateById(files);    }    //2、根据文件存储路径path和文件名获取文件输出流    String downPath = ResourceUtils.getURL("classpath:").getPath() + "/static" + files.getPath();    //3、获取文件输入流    FileInputStream fileInputStream = new FileInputStream(new File(downPath,files.getNewFileName()));    //4、附件格式下载设置头部( URLEncoder.encode(files.getOldFileName(),"utf-8") 设置文件名编码风格，避免乱码)    response.setHeader("content-disposition",openStyle+";fileName="+ URLEncoder.encode(files.getOldFileName(),"utf-8"));    //4、获取响应输出流    ServletOutputStream outputStream = response.getOutputStream();    //5、文件拷贝    IOUtils.copy(fileInputStream,outputStream);    //6、关闭输入输出流    IOUtils.closeQuietly(fileInputStream);    IOUtils.closeQuietly(outputStream);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、删除文件"><a href="#3、删除文件" class="headerlink" title="3、删除文件"></a>3、删除文件</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">@GetMapping("/delFile")public String del(int id) throws FileNotFoundException {    //1、删除本地文件数据        //获取删除路径    Files files = this.iFilesService.getById(id);    String delPath = ResourceUtils.getURL("classpath:").getPath() + "static/" + files.getPath();    File file = new File(delPath,files.getNewFileName());    if(file.exists()){        file.delete();    }    //2、删除数据库数据    this.iFilesService.delFile(id);    return "redirect:/file/showAll";}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="十、定时更新下载次数"><a href="#十、定时更新下载次数" class="headerlink" title="十、定时更新下载次数"></a>十、定时更新下载次数</h2><blockquote><p>前端定时调度接口刷新下载次数</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>application/javascript<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/static/js/jquery-3.5.1.min.js}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> time <span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#start'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>            time <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>            $<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"[[@{/file/showAllJson}]]"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>                $<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span>file</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>                    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#"</span><span class="token operator">+</span>file<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>downCounts<span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#stop"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>            <span class="token function">clearInterval</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>start<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>开启定时更新<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stop<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>关闭定时更新<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="十一、对上面功能添加"><a href="#十一、对上面功能添加" class="headerlink" title="十一、对上面功能添加"></a>十一、对上面功能添加</h2><h3 id="作者一：愿有清风不解语i"><a href="#作者一：愿有清风不解语i" class="headerlink" title="作者一：愿有清风不解语i"></a>作者一：<a href="https://space.bilibili.com/303763560">愿有清风不解语i</a></h3><blockquote><p>我将老师的项目添加了一些小功能：</p><p>1、使用Shiro安全框架来做登录认证和拦截；</p><p>2、使用SemanticUi来稍微美化了一下界面；</p><p>3、在登录界面添加了JS代码，对表单预验证；</p><p>4、修复了在没有选择上传文件的情况下，能够上传文件的一个小bug；</p><p>5、对密码使用了MD5加密</p><pre class="line-numbers language-http" data-language="http"><code class="language-http">https://github.com/HaiTang-8/File-Upload/tree/master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h3 id="作者二：灵器冰"><a href="#作者二：灵器冰" class="headerlink" title="作者二：灵器冰"></a>作者二：<a href="https://space.bilibili.com/255949374?spm_id_from=333.788.b_636f6d6d656e74.32">灵器冰</a></h3><blockquote><p>在老师的基础上，</p><p>1.增加了多用户登录注册，</p><p>2.整合layui框架美化界面和响应事件刷新表格，</p><p>3.使用shiro安全框架对页面访问进行控制。</p><p>4.为数据表格增加了分页功能。</p><pre class="line-numbers language-http" data-language="http"><code class="language-http">https://github.com/sdifv/fileStorage<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>layui</title>
      <link href="/2021/04/20/layui/"/>
      <url>/2021/04/20/layui/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot-Layui"><a href="#SpringBoot-Layui" class="headerlink" title="SpringBoot+Layui"></a><a href="https://www.bilibili.com/video/BV1ki4y147oK?from=search&amp;seid=10135957337998334218">SpringBoot+Layui</a></h1><hr><h2 id="一、Layui数据表格组件"><a href="#一、Layui数据表格组件" class="headerlink" title="一、Layui数据表格组件"></a>一、Layui数据表格组件</h2><blockquote><p>步骤：</p><ol><li><p>进入layui官网下载layui<a href="https://www.layui.com/">组件</a></p><img src="/2021/04/20/layui/image-20210420215752137.png" alt="image-20210420215752137" style="zoom:80%;"></li><li><p>你想要用哪个组件，直接到官网上去拷贝</p><img src="/2021/04/20/layui/image-20210420220108589.png" alt="image-20210420220108589" style="zoom:80%;"></li><li><p>然后引入你本地下载好的layui（js和css）</p><img src="/2021/04/20/layui/image-20210420220253179.png" alt="image-20210420220253179" style="zoom:80%;"><img src="/2021/04/20/layui/image-20210420220414104.png" alt="image-20210420220414104" style="zoom:80%;"></li><li><p>table组件里面的各参数说明</p><img src="/2021/04/20/layui/image-20210420225330818.png" alt="image-20210420225330818" style="zoom:80%;"><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>lujiahong<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui/css/layui.css<span class="token punctuation">"</span></span>  <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>all<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 注意：如果你直接复制所有代码到本地，上述css路径需要改成你本地的 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">        <span class="token comment">/* .layui-table-cell{            text-align: center;            height: 200px;            white-space: normal;        }        .layui-table img{            max-width: 300px;        } */</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-hide<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span> <span class="token attr-name">lay-filter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>images\1570365161-shmEFlWfHU.jpg<span class="token punctuation">"</span></span>  <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/html<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myImg<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 图片 <span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"/{{d.image}}"</span><span class="token operator">/</span><span class="token operator">&gt;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/html<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>switchTpl<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 这里的 checked 的状态只是演示 <span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> name<span class="token operator">=</span><span class="token string">"sex"</span> value<span class="token operator">=</span><span class="token string">"{{d.id}}"</span> lay<span class="token operator">-</span>skin<span class="token operator">=</span><span class="token string">"switch"</span> lay<span class="token operator">-</span>text<span class="token operator">=</span><span class="token string">"女|男"</span> lay<span class="token operator">-</span>filter<span class="token operator">=</span><span class="token string">"sexDemo"</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> d<span class="token punctuation">.</span>id <span class="token operator">==</span> <span class="token number">10003</span> <span class="token operator">?</span> <span class="token string">'checked'</span> <span class="token operator">:</span> <span class="token string">''</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/html<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkboxTpl<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 这里的 checked 的状态只是演示 <span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> name<span class="token operator">=</span><span class="token string">"lock"</span> value<span class="token operator">=</span><span class="token string">"{{d.id}}"</span> title<span class="token operator">=</span><span class="token string">"锁定"</span> lay<span class="token operator">-</span>filter<span class="token operator">=</span><span class="token string">"lockDemo"</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> d<span class="token punctuation">.</span>id <span class="token operator">==</span> <span class="token number">10006</span> <span class="token operator">?</span> <span class="token string">'checked'</span> <span class="token operator">:</span> <span class="token string">''</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/html<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>toolbarDemo<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"layui-btn-container"</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>button <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"layui-btn layui-btn-sm"</span> lay<span class="token operator">-</span>event<span class="token operator">=</span><span class="token string">"getCheckData"</span><span class="token operator">&gt;</span>获取选中行数据<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>button <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"layui-btn layui-btn-sm"</span> lay<span class="token operator">-</span>event<span class="token operator">=</span><span class="token string">"getCheckLength"</span><span class="token operator">&gt;</span>获取选中数目<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>button <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"layui-btn layui-btn-sm"</span> lay<span class="token operator">-</span>event<span class="token operator">=</span><span class="token string">"isAll"</span><span class="token operator">&gt;</span>验证是否全选<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/html<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>barDemo<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token operator">&lt;</span>a <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"layui-btn layui-btn-xs"</span> lay<span class="token operator">-</span>event<span class="token operator">=</span><span class="token string">"edit"</span><span class="token operator">&gt;</span>编辑<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>a <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"layui-btn layui-btn-danger layui-btn-xs"</span> lay<span class="token operator">-</span>event<span class="token operator">=</span><span class="token string">"del"</span><span class="token operator">&gt;</span>删除<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”javascript”</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“text/javascript”</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>common.js</span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui/layui.js<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 注意：如果你直接复制所有代码到本地，上述 JS 路径需要改成你本地的 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">//layui.use('talbe',()=&gt;{})采用layui框架中的table组件</span>    layui<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'table'</span><span class="token punctuation">,</span><span class="token string">'jquery'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> table <span class="token operator">=</span> layui<span class="token punctuation">.</span>table<span class="token punctuation">;</span>                <span class="token comment">//温馨提示：默认由前端自动合计当前行数据。从 layui 2.5.6 开始： 若接口直接返回了合计行数据，则优先读取接口合计行数据。</span>        <span class="token comment">//详见：https://www.layui.com/doc/modules/table.html#totalRow</span>        table<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            elem<span class="token operator">:</span> <span class="token string">'#test'</span><span class="token comment">//elem表示绑定table标签里面的id</span>            <span class="token punctuation">,</span>url<span class="token operator">:</span><span class="token string">'http://localhost:8080/item/findAll'</span><span class="token comment">//接口地址（数据-json格式）</span>            <span class="token punctuation">,</span>toolbar<span class="token operator">:</span> <span class="token string">'#toolbarDemo'</span><span class="token comment">//绑定工具栏中的id</span>            <span class="token punctuation">,</span>title<span class="token operator">:</span> <span class="token string">'商品数据表'</span><span class="token comment">//layui导出excel时的表名</span>            <span class="token punctuation">,</span>totalRow<span class="token operator">:</span> <span class="token boolean">true</span><span class="token comment">//是否显示合计数</span>            <span class="token punctuation">,</span>cols<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>                <span class="token punctuation">{</span>type<span class="token operator">:</span> <span class="token string">'checkbox'</span><span class="token punctuation">,</span> fixed<span class="token operator">:</span> <span class="token string">'left'</span><span class="token punctuation">}</span><span class="token comment">//checkbox显示类型复选框，left在table最左侧显示</span>                <span class="token punctuation">,</span><span class="token punctuation">{</span>field<span class="token operator">:</span><span class="token string">'id'</span><span class="token punctuation">,</span> title<span class="token operator">:</span><span class="token string">'ID'</span><span class="token punctuation">,</span> width<span class="token operator">:</span><span class="token number">80</span><span class="token punctuation">,</span> fixed<span class="token operator">:</span> <span class="token string">'left'</span><span class="token punctuation">,</span> unresize<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> sort<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> totalRowText<span class="token operator">:</span> <span class="token string">'合计'</span><span class="token punctuation">}</span><span class="token comment">//定义列，field是json数据里面对应的字段，title是定义table列名显示的字段，fixed是定义该列显示的位置，sort是定义table开启排序，totalRowText是定义统计整列数据之和的名称</span>                <span class="token punctuation">,</span><span class="token punctuation">{</span>field<span class="token operator">:</span><span class="token string">'title'</span><span class="token punctuation">,</span> title<span class="token operator">:</span><span class="token string">'商品标题'</span><span class="token punctuation">,</span> width<span class="token operator">:</span><span class="token number">120</span><span class="token punctuation">,</span> edit<span class="token operator">:</span> <span class="token string">'text'</span><span class="token punctuation">}</span><span class="token comment">//width是定义该列的列宽，edit是定义编辑事件-双击该单元数据进行编辑，同样可以在工具栏中绑定事件</span>                <span class="token punctuation">,</span><span class="token punctuation">{</span>field<span class="token operator">:</span><span class="token string">'sellPoint'</span><span class="token punctuation">,</span> title<span class="token operator">:</span><span class="token string">'商品卖点'</span><span class="token punctuation">,</span> width<span class="token operator">:</span><span class="token number">120</span><span class="token punctuation">,</span> edit<span class="token operator">:</span> <span class="token string">'text'</span><span class="token punctuation">}</span>                <span class="token punctuation">,</span><span class="token punctuation">{</span>field<span class="token operator">:</span><span class="token string">'price'</span><span class="token punctuation">,</span> title<span class="token operator">:</span><span class="token string">'商品价格'</span><span class="token punctuation">,</span> width<span class="token operator">:</span><span class="token number">120</span><span class="token punctuation">,</span> sort<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> totalRow<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token comment">//totalRow表示定义该列是否做合计统计</span>                <span class="token punctuation">,</span><span class="token punctuation">{</span>field<span class="token operator">:</span><span class="token string">'num'</span><span class="token punctuation">,</span> title<span class="token operator">:</span><span class="token string">'库存数量'</span><span class="token punctuation">,</span> width<span class="token operator">:</span><span class="token number">120</span><span class="token punctuation">,</span> edit<span class="token operator">:</span> <span class="token string">'text'</span><span class="token punctuation">,</span> sort<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span>                <span class="token punctuation">,</span><span class="token punctuation">{</span>field<span class="token operator">:</span><span class="token string">'barcode'</span><span class="token punctuation">,</span> title<span class="token operator">:</span><span class="token string">'商品条形码'</span><span class="token punctuation">,</span> width<span class="token operator">:</span><span class="token number">120</span><span class="token punctuation">,</span> sort<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> totalRow<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span>                <span class="token punctuation">,</span><span class="token punctuation">{</span>field<span class="token operator">:</span><span class="token string">'image'</span><span class="token punctuation">,</span> title<span class="token operator">:</span><span class="token string">'商品图片'</span><span class="token punctuation">,</span> width<span class="token operator">:</span><span class="token number">120</span><span class="token punctuation">,</span> <span class="token function-variable function">templet</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> <span class="token string">"&lt;div&gt;&lt;img src="</span><span class="token operator">+</span>data<span class="token punctuation">.</span>image<span class="token operator">+</span><span class="token string">" /&gt;&lt;/div&gt;"</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">}</span>                <span class="token punctuation">,</span><span class="token punctuation">{</span>field<span class="token operator">:</span><span class="token string">'detail'</span><span class="token punctuation">,</span> title<span class="token operator">:</span><span class="token string">'商品详情'</span><span class="token punctuation">,</span> width<span class="token operator">:</span><span class="token number">120</span><span class="token punctuation">}</span>                <span class="token punctuation">,</span><span class="token punctuation">{</span>field<span class="token operator">:</span><span class="token string">'status'</span><span class="token punctuation">,</span> title<span class="token operator">:</span><span class="token string">'商品状态'</span><span class="token punctuation">,</span> width<span class="token operator">:</span><span class="token number">120</span><span class="token punctuation">}</span>                <span class="token punctuation">,</span><span class="token punctuation">{</span>field<span class="token operator">:</span><span class="token string">'created'</span><span class="token punctuation">,</span> title<span class="token operator">:</span><span class="token string">'创建时间'</span><span class="token punctuation">,</span> width<span class="token operator">:</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token function-variable function">templet</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>created<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">-</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span>  <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd &amp; hh:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">}</span>                <span class="token punctuation">,</span><span class="token punctuation">{</span>field<span class="token operator">:</span><span class="token string">'updated'</span><span class="token punctuation">,</span> title<span class="token operator">:</span><span class="token string">'更新时间'</span><span class="token punctuation">,</span> width<span class="token operator">:</span><span class="token number">120</span><span class="token punctuation">}</span>                <span class="token punctuation">,</span><span class="token punctuation">{</span>field<span class="token operator">:</span><span class="token string">'sex'</span><span class="token punctuation">,</span> title<span class="token operator">:</span><span class="token string">'性别'</span><span class="token punctuation">,</span> width<span class="token operator">:</span><span class="token number">85</span><span class="token punctuation">,</span> templet<span class="token operator">:</span> <span class="token string">'#switchTpl'</span><span class="token punctuation">,</span> unresize<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span>                <span class="token punctuation">,</span><span class="token punctuation">{</span>field<span class="token operator">:</span><span class="token string">'lock'</span><span class="token punctuation">,</span> title<span class="token operator">:</span><span class="token string">'是否锁定'</span><span class="token punctuation">,</span> width<span class="token operator">:</span><span class="token number">110</span><span class="token punctuation">,</span> templet<span class="token operator">:</span> <span class="token string">'#checkboxTpl'</span><span class="token punctuation">,</span> unresize<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span>                <span class="token punctuation">,</span><span class="token punctuation">{</span>fixed<span class="token operator">:</span> <span class="token string">'right'</span><span class="token punctuation">,</span> title<span class="token operator">:</span><span class="token string">'操作'</span><span class="token punctuation">,</span> toolbar<span class="token operator">:</span> <span class="token string">'#barDemo'</span><span class="token punctuation">,</span> width<span class="token operator">:</span><span class="token number">150</span><span class="token punctuation">}</span><span class="token comment">//toolbar表示该列绑定工具条点击事件按钮，对该数据行的操作</span>            <span class="token punctuation">]</span><span class="token punctuation">]</span>            <span class="token punctuation">,</span>page<span class="token operator">:</span> <span class="token boolean">true</span>            <span class="token punctuation">,</span>response<span class="token operator">:</span><span class="token punctuation">{</span>      statusName<span class="token operator">:</span><span class="token string">'code'</span><span class="token punctuation">,</span> <span class="token comment">//规定返回的状态码字段为code</span>  statusCode<span class="token operator">:</span><span class="token number">200</span> <span class="token comment">//规定成功的状态码味200</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token function-variable function">parseData</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"code"</span> <span class="token operator">:</span> res<span class="token punctuation">.</span>code<span class="token punctuation">,</span> <span class="token comment">//解析接口状态</span><span class="token string">"msg"</span> <span class="token operator">:</span> res<span class="token punctuation">.</span>msg<span class="token punctuation">,</span> <span class="token comment">//解析提示文本</span>    <span class="token string">"data"</span> <span class="token operator">:</span> res<span class="token punctuation">.</span>data<span class="token punctuation">,</span> <span class="token comment">//解析数据列表</span>                    <span class="token string">"count"</span><span class="token operator">:</span> res<span class="token punctuation">.</span>count <span class="token comment">//解析总条数</span>  <span class="token punctuation">}</span>   <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//工具栏事件</span>        <span class="token comment">//toolbar表示工具条，test是table标签里面的lay-filter对应的值</span>        <span class="token comment">//obj.config.id即为table标签中的属性id所对应的值：test</span>        <span class="token comment">//table.checkStatus(obj.config.id)有两个值：data和isAll data即为复选框选中的数据、isAll（true、false）表示是否全部选中复选框</span>        table<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'toolbar(test)'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">var</span> checkStatus <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">checkStatus</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>config<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token string">'getCheckData'</span><span class="token operator">:</span>                    <span class="token keyword">var</span> data <span class="token operator">=</span> checkStatus<span class="token punctuation">.</span>data<span class="token punctuation">;</span>                    layer<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'getCheckLength'</span><span class="token operator">:</span>                    <span class="token keyword">var</span> data <span class="token operator">=</span> checkStatus<span class="token punctuation">.</span>data<span class="token punctuation">;</span>                    layer<span class="token punctuation">.</span><span class="token function">msg</span><span class="token punctuation">(</span><span class="token string">'选中了：'</span><span class="token operator">+</span> data<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token string">' 个'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'isAll'</span><span class="token operator">:</span>                    layer<span class="token punctuation">.</span><span class="token function">msg</span><span class="token punctuation">(</span>checkStatus<span class="token punctuation">.</span>isAll <span class="token operator">?</span> <span class="token string">'全选'</span><span class="token operator">:</span> <span class="token string">'未全选'</span><span class="token punctuation">)</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//监听工具条</span>          <span class="token comment">//tool表示工具条，test是table标签里面的lay-filter对应的值</span>          <span class="token comment">//obj表示我们点击事件从table中获取的数据</span>          <span class="token comment">//layui是layui自带的一个弹框，index即我们选择行的下标</span>          <span class="token comment">//JSON.stringify(data)是把我们从table中获取的键值对数据转换为json数据格式</span>        table<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'tool(test)'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">var</span> data <span class="token operator">=</span> obj<span class="token punctuation">.</span>data<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>event <span class="token operator">===</span> <span class="token string">'del'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            layer<span class="token punctuation">.</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">'真的删除行么'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                obj<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                layer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>event <span class="token operator">===</span> <span class="token string">'edit'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            layer<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'编辑行：&lt;br&gt;'</span><span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Date</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">format</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">fmt</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>                 <span class="token string">"M+"</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>                 <span class="token comment">//月份 </span>                <span class="token string">"d+"</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token comment">//日 </span>                <span class="token string">"h+"</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                   <span class="token comment">//小时 </span>                <span class="token string">"m+"</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 <span class="token comment">//分 </span>                <span class="token string">"s+"</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 <span class="token comment">//秒 </span>                <span class="token string">"q+"</span> <span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//季度 </span>                <span class="token string">"S"</span>  <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMilliseconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token comment">//毫秒 </span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>             <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(y+)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>fmt<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    fmt<span class="token operator">=</span>fmt<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>RegExp<span class="token punctuation">.</span>$<span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">-</span> RegExp<span class="token punctuation">.</span>$<span class="token number">1.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token keyword">in</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">"("</span><span class="token operator">+</span> k <span class="token operator">+</span><span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>fmt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    fmt <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>RegExp<span class="token punctuation">.</span>$<span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>RegExp<span class="token punctuation">.</span>$<span class="token number">1.</span>length<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>o<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"00"</span><span class="token operator">+</span> o<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token operator">+</span> o<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> fmt<span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></blockquote><hr><h2 id="二、Spring-Boot后台数据接口"><a href="#二、Spring-Boot后台数据接口" class="headerlink" title="二、Spring Boot后台数据接口"></a>二、Spring Boot后台数据接口</h2><ul><li>扩展一</li></ul><blockquote><p>view-source 是一种协议，查看源码</p><p>在当前网页地址前输入：view-source: 就可以查看当前网页的源码</p><p>例如：view-source:<a href="https://www.baidu.com/">https://www.baidu.com/</a></p><p>JS用法 : window.location=“view-source:” + window.location<br>————————————————</p></blockquote><ul><li>扩展二</li></ul><blockquote><p>谷歌浏览器插件</p><pre class="line-numbers language-http" data-language="http"><code class="language-http">https://www.cnblogs.com/JulianHuang/p/12419604.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><ul><li>扩展三</li></ul><blockquote><p>谷歌浏览器安装json-view插件</p><p>分类专栏： 实用开发软件/插件 文章标签： json-view</p><p>今天，给大家推荐一款十分好用的Chrome浏览器的插件，叫做json-view<br>1.介绍：这是一款浏览器解析json的插件，可以更加优雅的展现json格式的数据<br>2.使用效果<br>使用前：</p><p>使用后：</p><p>优雅了很多有没有，安装的方式呢，也极其简单。</p><p>3.安装方式<br>首先呢，下载插件<br>链接：<a href="https://pan.baidu.com/s/1TNI2LsPgzPba_v4_1I9C3Q">https://pan.baidu.com/s/1TNI2LsPgzPba_v4_1I9C3Q</a><br>提取码：hoxr</p><p>找个地方解压完，这是笔者解压后进入文件夹的文件目录</p><p>**开始安装！打开谷歌浏览器，点击右上角的 … 点击设置，点击 拓展程序 **</p><p>找到谷歌浏览器的拓展程序，记得开启开发者模式，点击 “加载已解压的拓展程序”</p><p>！！记得要点击进去，进到目录里面</p><p>这样就安装成功了，是不是很简单的！<br>原文链接：<a href="https://blog.csdn.net/BrotherJinJin/article/details/101126690">https://blog.csdn.net/BrotherJinJin/article/details/101126690</a></p></blockquote><hr><h2 id="三、单体应用和前后端分离下的数据对接"><a href="#三、单体应用和前后端分离下的数据对接" class="headerlink" title="三、单体应用和前后端分离下的数据对接"></a>三、单体应用和前后端分离下的数据对接</h2><ol><li><p><strong>关于跨域cors配置和mybatis-plus配置</strong></p><blockquote><p>1、cors</p><pre class="line-numbers language-jade" data-language="jade"><code class="language-jade">@Configurationpublic class CrosConfig implements WebMvcConfigurer {    @Override    public void addCorsMappings(CorsRegistry registry) {        registry.addMapping("/**")                .allowCredentials(true)                .allowedOriginPatterns("*")                .allowedHeaders("*")                .allowedMethods("GET","POST","UPDATE","PUT","PATCH")                .maxAge(3600L);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、mybatis-plus</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configurationpublic class MyBatisPlusConfig {    @Bean    public MybatisPlusInterceptor mybatisPlusInterceptor() {        MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor();        interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL));        return interceptor;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.4.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote></li><li><p><strong>关于templet的使用</strong></p></li></ol><blockquote><ol><li><p>img</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">{field:'image', title:'商品图片', width:120, templet: function (data) {                        return "<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>+data.image+<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>";                    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>data</p><p>java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@JsonFormat(timezone = "GMT+8", pattern = "yyyy-MM-dd HH:mm:ss")private Date updated;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>cols</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">{field:'created', title:'创建时间', width:120,templet: function (data) {                        return new Date(Date.parse(data.created.replace(/-/g,  "/"))).format("yyyy-MM-dd &amp; hh:mm:ss");                    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>js</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token class-name">Date</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">format</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">fmt</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>         <span class="token string">"M+"</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>                 <span class="token comment">//月份 </span>        <span class="token string">"d+"</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token comment">//日 </span>        <span class="token string">"h+"</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                   <span class="token comment">//小时 </span>        <span class="token string">"m+"</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 <span class="token comment">//分 </span>        <span class="token string">"s+"</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 <span class="token comment">//秒 </span>        <span class="token string">"q+"</span> <span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//季度 </span>        <span class="token string">"S"</span>  <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMilliseconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token comment">//毫秒 </span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(y+)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>fmt<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            fmt<span class="token operator">=</span>fmt<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>RegExp<span class="token punctuation">.</span>$<span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">-</span> RegExp<span class="token punctuation">.</span>$<span class="token number">1.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token keyword">in</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">"("</span><span class="token operator">+</span> k <span class="token operator">+</span><span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>fmt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            fmt <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>RegExp<span class="token punctuation">.</span>$<span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>RegExp<span class="token punctuation">.</span>$<span class="token number">1.</span>length<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>o<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"00"</span><span class="token operator">+</span> o<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token operator">+</span> o<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> fmt<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>把页面整合到springboot里面的配置</p><img src="/2021/04/20/layui/image-20210424000607231.png" alt="image-20210424000607231" style="zoom:80%;"><img src="/2021/04/20/layui/image-20210424001804542.png" alt="image-20210424001804542" style="zoom:80%;"></li></ol></blockquote><hr><h2 id="四、ECharts数据可视化"><a href="#四、ECharts数据可视化" class="headerlink" title="四、ECharts数据可视化"></a>四、ECharts数据可视化</h2><ol><li><p>echarts下载和教程</p><blockquote><ul><li><p>echarts<a href="https://blog.csdn.net/qq_41767945/article/details/107932911">下载</a></p><pre class="line-numbers language-http" data-language="http"><code class="language-http">https://echarts.apache.org/zh/download.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>echarts<a href="https://echarts.apache.org/zh/tutorial.html#5%20%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8B%20ECharts">教程</a></p><pre class="line-numbers language-http" data-language="http"><code class="language-http">https://echarts.apache.org/zh/tutorial.html#5%20%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8B%20ECharts<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></blockquote></li><li><p>echarts使用说明</p><blockquote><ol><li><p>建立一个html，引入echarts.min.js,直接官网上复制即可</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>ECharts<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 引入 echarts.js --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>echarts.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 为ECharts准备一个具备大小（宽高）的Dom --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span> <span class="token style-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token style language-css"><span class="token property">width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>400px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">        <span class="token comment">// 基于准备好的dom，初始化echarts实例</span>        <span class="token keyword">var</span> myChart <span class="token operator">=</span> echarts<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'main'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 指定图表的配置项和数据</span>        <span class="token keyword">var</span> option <span class="token operator">=</span> <span class="token punctuation">{</span>            title<span class="token operator">:</span> <span class="token punctuation">{</span>                text<span class="token operator">:</span> <span class="token string">'ECharts 入门示例'</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            tooltip<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            legend<span class="token operator">:</span> <span class="token punctuation">{</span>                data<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'销量'</span><span class="token punctuation">]</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            xAxis<span class="token operator">:</span> <span class="token punctuation">{</span>                data<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"衬衫"</span><span class="token punctuation">,</span><span class="token string">"羊毛衫"</span><span class="token punctuation">,</span><span class="token string">"雪纺衫"</span><span class="token punctuation">,</span><span class="token string">"裤子"</span><span class="token punctuation">,</span><span class="token string">"高跟鞋"</span><span class="token punctuation">,</span><span class="token string">"袜子"</span><span class="token punctuation">]</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            yAxis<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            series<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>                name<span class="token operator">:</span> <span class="token string">'销量'</span><span class="token punctuation">,</span>                type<span class="token operator">:</span> <span class="token string">'bar'</span><span class="token punctuation">,</span>                data<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span>            <span class="token punctuation">}</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment">// 使用刚指定的配置项和数据显示图表。</span>        myChart<span class="token punctuation">.</span><span class="token function">setOption</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>上面的是一个统计图的样表，如果要做一个饼图或者其它图形，直接到示列里面点击想要的图信，复制里面代码即可，图形的不同主要就是区别在option的不同，观察即可明白</p></li></ol></blockquote></li></ol><hr><h2 id="五、Layui搭建后台管理系统"><a href="#五、Layui搭建后台管理系统" class="headerlink" title="五、Layui搭建后台管理系统"></a>五、Layui搭建后台管理系统</h2><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mycat之读写分离与分库分表</title>
      <link href="/2021/03/23/mycat-zhi-du-xie-fen-chi-yu-fen-ku-fen-biao/"/>
      <url>/2021/03/23/mycat-zhi-du-xie-fen-chi-yu-fen-ku-fen-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="MyCat会玩吗？"><a href="#MyCat会玩吗？" class="headerlink" title="MyCat会玩吗？"></a><a href="https://www.bilibili.com/video/BV1gK4y1b7iU?p=6">MyCat会玩吗？</a></h1><hr><h2 id="一、MyCat背景"><a href="#一、MyCat背景" class="headerlink" title="一、MyCat背景"></a>一、MyCat背景</h2><blockquote><p><a href="http://www.mycat.org.cn/">官网</a></p></blockquote><h3 id="1、了解一下Mycat的由来："><a href="#1、了解一下Mycat的由来：" class="headerlink" title="1、了解一下Mycat的由来："></a>1、了解一下Mycat的由来：</h3><ol><li>MyCat前身是阿里巴巴的<a href="https://www.w3cschool.cn/cuhkj/cuhkj-d32o265o.html">Cobar</a>，然而Cobar在开源一段时间后就没用维护了，阿里巴巴放弃了该项目，再加上Cobar在使用的过程中发现存在一些问题；</li><li>2013年国内一批开源软件爱好者对Cobar这个项目进行了改进，并命名为MyCat，这就是MyCat的诞生；</li><li>MyCat是完全免费公开的，不属于任何商业公司；</li><li>MyCat于2014年首次在上海的《中华架构师》大会上对外宣传，随后越来越多的项目采用了Mycat；</li><li>截止2015年11月，超过300个项目采用Mycat，涵盖银行、电信、电子商务、物流、移动应用、O2O的众多领域和公司；</li></ol><h3 id="2、MyCat介绍"><a href="#2、MyCat介绍" class="headerlink" title="2、MyCat介绍"></a>2、MyCat介绍</h3><ol><li>MyCat是一个开源数据库中间件，是一个实现了Mysql协议的数据库中间件服务器；</li><li>可以把MyCat看着一个数据库代理，用MySQL客户端工具和命令访问MyCat，而MyCat再使用MySQL原生（Native）协议与多个MySQL服务器通信；</li><li>MyCat也可以用JDBC协议与大多主流数据库服务器通信（SQL server，Oracle，DB2，PostgreSQL）和NoSQL（MongoDB）通信，未来还会支持更多类型的存储；</li><li>一般MyCat主要用于代理MySQL数据库，虽然它也支持去访问其它类型的数据库；</li><li>MyCat的默认端口是8066，一般可以使用常见的对象映射框架，比如MyBatis操作MyCat；</li></ol><hr><h2 id="二、MyCat主要能做什么"><a href="#二、MyCat主要能做什么" class="headerlink" title="二、MyCat主要能做什么"></a>二、MyCat主要能做什么</h2><h3 id="1、读写分离"><a href="#1、读写分离" class="headerlink" title="1、读写分离"></a>1、读写分离</h3><ol><li><p>MyCat可以自动实现<em>写数据时操作主数据库，读数据时操作从数据库</em>，这样能有效地减轻数据库压力，也能减轻IO压力；</p></li><li><p>MyCat实现读写分离，当主出现故障后，会自动切换到另一个主上，从而提供高可用的数据库服务，前提数据库要部署多主多从的模式；</p><img src="/2021/03/23/mycat-zhi-du-xie-fen-chi-yu-fen-ku-fen-biao/image-20210323213507488.png" alt="image-20210323213507488" style="zoom:80%;"></li><li><p>未用MyCat之间需要我们的java程序手动去确定是读是写，然后去对应上主库和从库，这个过程中如果出现了我是读数据，而操作到了主库，这样就会降低主库的效率；如果出现了我是写数据，而操作到了从库，会引起主从关系脱离，从而导致主从库数据不一致问题；</p></li><li><p>使用MyCat后，MyCat会分析sql语句，判断是读还是写操作，然后对应到主从库上，不会造成主从数据不一致问题；</p></li><li><p>读写分离前提就是主从复制，要始终保证主库和从库的数据的一致性；</p></li></ol><h3 id="2、水平拆分"><a href="#2、水平拆分" class="headerlink" title="2、水平拆分"></a>2、水平拆分</h3><ol><li>根据表中数据的逻辑关系，将同一个表中的数据按照某种条件拆分到多台数据库服务器上；</li><li>当一个表的数据达到几百万的时候，占用的磁盘高，且读性能大大降低，因此考虑水平拆分；</li><li>假设原来的一张表里有1000w数据，现在我们进行水平拆分到五个表中，这五个表在不同的服务器上，对应不同的URL，那么每个表里面的数据此时就只有200w条，读性能能明显提高，且在不同服务器上，对磁盘的占用也降低了；</li><li>但问题又出现了，为了保证五个服务器上的数据库高可用，那么是不是应该在每一个服务器上搞一个两主两从的数据库。因此直接从五张表变成了20张表；</li><li>由于表的数量增加，光靠java程序读和写是很有肯能造成数据不一致的。现在就把这20张表交给MyCat来管理，我们只需要向MyCat里面发送sql语句，其它的操作交给MyCat就可以了（比如说存取数据hash算法路由到对应的表，其中一个主库挂了，自动切换到另一个主库上）</li></ol><h3 id="3、垂直拆分"><a href="#3、垂直拆分" class="headerlink" title="3、垂直拆分"></a>3、垂直拆分</h3><ol><li>按照不同的表拆分到不同的数据库服务器之上；       </li><li>假如某个商城数据库里面有100张表，对应有用户模块、订单模块、商品模块、物流模块、支付模块，每个模块对应20张表，如果我们把这100张表都放在商品数据库这一个库里面，且商品数据库又在一个服务器上，存在的问题：<ul><li>磁盘压力增加；</li><li>由于数据库连接池的最大连接数有上限，高并发场景下，有1000个人访问订单模块对应的表，只有1个人访问用户模块对应的表，那么此时就会形成IO竞争，会导致访问用户模块的线程等待，直到连接池里面有空闲的连接时，才会响应，因此用户体验变差；</li></ul></li><li>综合第二点出现的情况，就需要采用垂直拆分。现在我们把用户模块、订单模块、商品模块、物流模块、支付模块分别放在5个不同的服务器上对应的数据库中，那么每个服务器上对应的数据库里面就只有20个表了，大大减小了磁盘的压力；</li><li>如果垂直拆分的这5个服务器中，有的表数据量很大，那么就要考虑水平拆分，这样一来对应的就是5x20，也就是100个服务器了，对应了100个数据源，这么多数据源都对应了不同的URL，如果就像之前开发那样去连接数据源，就需要写一百个。为了解决这个问题，MyCat就出现了，它是一个很好的数据库中间件，帮助我们拦截这些数据源，MyCat会根据我们要操作的数据库表来分析我们需要的表在那个库中，是读是写，然后进行连接；</li><li><em>通常我们使用垂直拆分以后都是需要程序员分组独立开发，对应到不同的模块，因此基本上不会跨模板访问数据库表；开发一个模块的程序员不会知道另一个模块的账号和密码，其它模块的程序员也不会允许我们这么做，因此实际工作中出现跨模块访问都是使用对方提供的接口来进行访问的</em></li></ol><img src="/2021/03/23/mycat-zhi-du-xie-fen-chi-yu-fen-ku-fen-biao/MyCat之读写分离与分库分表.png" alt="MyCat之读写分离与分库分表" style="zoom:80%;"><hr><h2 id="三、安装MyCat"><a href="#三、安装MyCat" class="headerlink" title="三、安装MyCat"></a>三、安装MyCat</h2><h3 id="1、在Linux上搭建MyCat"><a href="#1、在Linux上搭建MyCat" class="headerlink" title="1、在Linux上搭建MyCat"></a>1、在Linux上搭建MyCat</h3><blockquote><p>1、下载后缀名为 .tar.gz 的压缩包，上传到Linux服务器上</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">1）进入/tmp目录下cd /tmp2）wget下载lrzsz安装包wget http://www.ohse.de/uwe/releases/lrzsz-0.12.20.tar.gz注：输入wget，如果提示未找到命令，则需要yum install wget进行安装wget命令<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、执行解压命令到：usr/local 位置</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">tar -zxvf Mycat-server-1.6.7.4-release-20200105164103-linux.tar.gz -C /usr/local/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3、解压后进入 usr/local 会多出来个MyCat文件</p><img src="/2021/03/23/mycat-zhi-du-xie-fen-chi-yu-fen-ku-fen-biao/image-20210324211225584.png" alt="image-20210324211225584" style="zoom:80%;"><p>4、了解以下各文件的作用：</p><ul><li><p>bin：可执行文件的命令目录，bin下面的MyCat文件是启动命令，后面跟start为启动，跟stop为关闭</p><img src="/2021/03/23/mycat-zhi-du-xie-fen-chi-yu-fen-ku-fen-biao/image-20210324211502078.png" alt="image-20210324211502078" style="zoom:80%;"></li><li><p>conf：配置文件目录，重点关注里面的schema.xml和server.xml,需要用到，把这两个文件次下载到window系统上。命令：sz schema.xml 和 sz server.xml,前提要安装sz下载命令，<a href="https://blog.51cto.com/rescue/1975119">参考文档</a>;</p><p>rz:上传命令，sz:下载命令，<a href="https://blog.csdn.net/ruben95001/article/details/55804142">rz和sz软链接的创建参考文档</a></p><p>rule.xml:是一些拆分规则</p><img src="/2021/03/23/mycat-zhi-du-xie-fen-chi-yu-fen-ku-fen-biao/image-20210324211922141.png" alt="image-20210324211922141" style="zoom:80%;"></li><li><p>logs：存放一些日志信息，MyCat不会报错，一切报错查看logs里面的日志文件</p></li></ul><p>5、了解一些MyCat的常用操作命令：</p><ul><li><p>启动命令：切换到MyCat的bin（cd /usr/local/mycat/bin）目录下执行：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">./mycat start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>关闭命令：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">./mycat stop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>MyCat命令行：</p><ol><li><p>MyCat默认端口是：8066</p></li><li><p>登录MyCat命令行，使用mysql的命令行工具来操作(需要切换到mysql的bin目录下执行该命令)：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">./mysql -umycat -p -P8066 -h127.0.01<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol></li></ul></blockquote><hr><h3 id="2、MyCat配置文件解读"><a href="#2、MyCat配置文件解读" class="headerlink" title="2、MyCat配置文件解读"></a>2、MyCat配置文件解读</h3><blockquote><p>server.xml 和 schema.xml</p><p><a href="https://blog.csdn.net/cold___play/article/details/107489340">参考文章</a></p><pre class="line-numbers language-http" data-language="http"><code class="language-http">https://blog.csdn.net/cold___play/article/details/107489340<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>推荐一个xml编辑器：foxe_CHS.exe <a href="https://pc.qq.com/detail/2/detail_10202.html">下载地址</a></p><pre class="line-numbers language-http" data-language="http"><code class="language-http">https://pc.qq.com/detail/2/detail_10202.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h4 id="1、server-xml-该文件属于MyCat的服务配置"><a href="#1、server-xml-该文件属于MyCat的服务配置" class="headerlink" title="1、server.xml:该文件属于MyCat的服务配置"></a>1、server.xml:<em>该文件属于MyCat的服务配置</em></h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token comment">&lt;!-- - - Licensed under the Apache License, Version 2.0 (the "License"); - you may not use this file except in compliance with the License. - You may obtain a copy of the License at - - http://www.apache.org/licenses/LICENSE-2.0 - - Unless required by applicable law or agreed to in writing, software - distributed under the License is distributed on an "AS IS" BASIS, - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. - See the License for the specific language governing permissions and - limitations under the License. --&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mycat:server</span> <span class="token name">SYSTEM</span> <span class="token string">"server.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mycat:</span>server</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>mycat</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://io.mycat/<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>system</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nonePasswordLogin<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 0为需要密码登陆、1为不需要密码登陆 ,默认为0，设置为1则需要指定默认账户--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ignoreUnknownCommand<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 0遇上没有实现的报文(Unknown command:),就会报错、1为忽略该报文，返回ok报文。在某些mysql客户端存在客户端已经登录的时候还会继续发送登录报文,mycat会报错,该设置可以绕过这个错误--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>useHandshakeV10<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>removeGraveAccent<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>useSqlStat<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- 1为开启实时统计、0为关闭 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>useGlobleTableCheck<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- 1为开启全加班一致性检测、0为关闭 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlExecuteTimeout<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>300<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- SQL 执行超时 单位:秒--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sequnceHandlerType<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!--关注点1：这个是主键生成策略，表明MyCat的主键单调递增（0-本地文件，1-数据库，2-时间戳）--&gt;</span><span class="token comment">&lt;!--&lt;property name="sequnceHandlerPattern"&gt;(?:(\s*next\s+value\s+for\s*MYCATSEQ_(\w+))(,|\)|\s)*)+&lt;/property&gt;INSERT INTO `travelrecord` (`id`,user_id) VALUES ('next value for MYCATSEQ_GLOBAL',"xxx");--&gt;</span><span class="token comment">&lt;!--必须带有MYCATSEQ_或者 mycatseq_进入序列匹配流程 注意MYCATSEQ_有空格的情况--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sequnceHandlerPattern<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>(?:(\s*next\s+value\s+for\s*MYCATSEQ_(\w+))(,|\)|\s)*)+<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>subqueryRelationshipCheck<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 子查询中存在关联查询的情况下,检查关联字段中是否有分片字段 .默认 false --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sequenceHanlderClass<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>io.mycat.route.sequence.handler.HttpIncrSequenceHandler<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>      <span class="token comment">&lt;!--  &lt;property name="useCompression"&gt;1&lt;/property&gt;--&gt;</span> <span class="token comment">&lt;!--1为开启mysql压缩协议--&gt;</span>        <span class="token comment">&lt;!--  &lt;property name="fakeMySQLVersion"&gt;5.6.20&lt;/property&gt;--&gt;</span> <span class="token comment">&lt;!--设置模拟的MySQL版本号--&gt;</span><span class="token comment">&lt;!-- &lt;property name="processorBufferChunk"&gt;40960&lt;/property&gt; --&gt;</span><span class="token comment">&lt;!-- &lt;property name="processors"&gt;1&lt;/property&gt; &lt;property name="processorExecutor"&gt;32&lt;/property&gt;  --&gt;</span>        <span class="token comment">&lt;!--默认为type 0: DirectByteBufferPool | type 1 ByteBufferArena | type 2 NettyBufferPool --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>processorBufferPoolType<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--默认是65535 64K 用于sql解析时最大文本长度 --&gt;</span><span class="token comment">&lt;!--&lt;property name="maxStringLiteralLength"&gt;65535&lt;/property&gt;--&gt;</span><span class="token comment">&lt;!--&lt;property name="sequnceHandlerType"&gt;0&lt;/property&gt;--&gt;</span><span class="token comment">&lt;!--&lt;property name="backSocketNoDelay"&gt;1&lt;/property&gt;--&gt;</span><span class="token comment">&lt;!--&lt;property name="frontSocketNoDelay"&gt;1&lt;/property&gt;--&gt;</span><span class="token comment">&lt;!--&lt;property name="processorExecutor"&gt;16&lt;/property&gt;--&gt;</span><span class="token comment">&lt;!--&lt;property name="serverPort"&gt;8066&lt;/property&gt; &lt;property name="managerPort"&gt;9066&lt;/property&gt; &lt;property name="idleTimeout"&gt;300000&lt;/property&gt; &lt;property name="bindIp"&gt;0.0.0.0&lt;/property&gt;&lt;property name="dataNodeIdleCheckPeriod"&gt;300000&lt;/property&gt; 5 * 60 * 1000L; //连接空闲检查&lt;property name="frontWriteQueueSize"&gt;4096&lt;/property&gt; &lt;property name="processors"&gt;32&lt;/property&gt; --&gt;</span><span class="token comment">&lt;!--分布式事务开关，0为不过滤分布式事务，1为过滤分布式事务（如果分布式事务内只涉及全局表，则不过滤），2为不过滤分布式事务,但是记录分布式事务日志--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleDistributedTransactions<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--off heap for merge/order/group/limit      1开启   0关闭--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>useOffHeapForMerge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--单位为m--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>memoryPageSize<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>64k<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--单位为k--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>spillsFileBufferSize<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>1k<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>useStreamOutput<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--单位为m--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>systemReserveMemorySize<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>384m<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--是否采用zookeeper协调切换  --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>useZKSwitch<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- XA Recovery Log日志路径 --&gt;</span><span class="token comment">&lt;!--&lt;property name="XARecoveryLogBaseDir"&gt;./&lt;/property&gt;--&gt;</span><span class="token comment">&lt;!-- XA Recovery Log日志名称 --&gt;</span><span class="token comment">&lt;!--&lt;property name="XARecoveryLogBaseName"&gt;tmlog&lt;/property&gt;--&gt;</span><span class="token comment">&lt;!--如果为 true的话 严格遵守隔离级别,不会在仅仅只有select语句的时候在事务中切换连接--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>strictTxIsolation<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>useZKSwitch<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--如果为0的话,涉及多个DataNode的catlet任务不会跨线程执行--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parallExecute<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>system</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 全局SQL防火墙设置 --&gt;</span><span class="token comment">&lt;!--白名单可以使用通配符%或着*--&gt;</span><span class="token comment">&lt;!--例如&lt;host host="127.0.0.*" user="root"/&gt;--&gt;</span><span class="token comment">&lt;!--例如&lt;host host="127.0.*" user="root"/&gt;--&gt;</span><span class="token comment">&lt;!--例如&lt;host host="127.*" user="root"/&gt;--&gt;</span><span class="token comment">&lt;!--例如&lt;host host="1*7.*" user="root"/&gt;--&gt;</span><span class="token comment">&lt;!--这些配置情况下对于127.0.0.1都能以root账户登录--&gt;</span><span class="token comment">&lt;!--&lt;firewall&gt;   &lt;whitehost&gt;      &lt;host host="1*7.0.0.*" user="root"/&gt;   &lt;/whitehost&gt;       &lt;blacklist check="false"&gt;       &lt;/blacklist&gt;&lt;/firewall&gt;--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mycat<span class="token punctuation">"</span></span> <span class="token attr-name">defaultAccount</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--默认name的值是root，为了和mysql区分这里改为mycat--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>123456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>schemas<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>mycatdb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--逻辑库，不是真实存在的，一个虚拟的库，属于MyCat模拟出来的；默认是TESTDNB，这里改为mycatdb，好区分--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>defaultSchema<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>mycatdb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--默认数据库，默认是TESTDNB，这里改为mycatdb，好区分--&gt;</span><span class="token comment">&lt;!--No MyCAT Database selected 错误前会尝试使用该schema作为schema，不设置则为null,报错 --&gt;</span><span class="token comment">&lt;!-- 表级 DML 权限设置 --&gt;</span><span class="token comment">&lt;!-- &lt;privileges check="false"&gt;&lt;schema name="TESTDB" dml="0110" &gt; 四个数字对应到对这个数据库的增删改查操作，0表示没有权限，1表示有权限&lt;table name="tb01" dml="0000"&gt;&lt;/table&gt; 0000表示对TESTDB这个数据库的表tb01没有增删改查权限操作&lt;table name="tb02" dml="1111"&gt;&lt;/table&gt; 1111表示对TESTDB这个数据库的表tb01有增删改查权限操作&lt;/schema&gt;&lt;/privileges&gt; --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>schemas<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>mycatdb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>readOnly<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--表明user登录的话，只能读数据不能写数据--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>defaultSchema<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>mycatdb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mycat:</span>server</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、schema-xml-属于MyCat配置文件"><a href="#2、schema-xml-属于MyCat配置文件" class="headerlink" title="2、schema.xml:属于MyCat配置文件"></a>2、schema.xml:<em>属于MyCat配置文件</em></h4><p>主要由三部分主城：</p><ol><li><schema></schema></li><li><datanode></datanode></li><li><datahost></datahost></li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mycat:schema</span> <span class="token name">SYSTEM</span> <span class="token string">"schema.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mycat:</span>schema</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>mycat</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://io.mycat/<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--name要和server.xml里面配置的逻辑库名相同，checkSQLschema检查sql语法的标准，通常为false，sqlMaxLimit表示每个sql语句最多返回100条数据--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>schema</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mycatdb<span class="token punctuation">"</span></span> <span class="token attr-name">checkSQLschema</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">sqlMaxLimit</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">randomDataNode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dn1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- auto sharding by id (long) --&gt;</span><span class="token comment">&lt;!--splitTableNames 启用&lt;table name 属性使用逗号分割配置多个表,即多个表使用这个配置；不需要水平拆分是不用配置这个的--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>travelrecord,address<span class="token punctuation">"</span></span> <span class="token attr-name">dataNode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dn1,dn2,dn3<span class="token punctuation">"</span></span> <span class="token attr-name">rule</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>auto-sharding-long<span class="token punctuation">"</span></span> <span class="token attr-name">splitTableNames</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token comment">&lt;!-- &lt;table name="oc_call" primaryKey="ID" dataNode="dn1$0-743" rule="latest-month-calldate"/&gt; --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>schema</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- &lt;dataNode name="dn1$0-743" dataHost="localhost1" database="db$0-743"/&gt; --&gt;</span><span class="token comment">&lt;!--dataNode表示数据节点，配置物理库（MySQL真实创建数据库）的名称；name对应到标签&lt;schema&gt;里面定义好的，名字可以随便起，但一定要对应‘dataHost名字可以随便起，但要和标签&lt;dataHost&gt;里面的相对应；database表示物理库名称--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dn1<span class="token punctuation">"</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>localhost1<span class="token punctuation">"</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>db1<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dn2<span class="token punctuation">"</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>localhost1<span class="token punctuation">"</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>db2<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dn3<span class="token punctuation">"</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>localhost1<span class="token punctuation">"</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>db3<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token comment">&lt;!--&lt;dataNode name="dn4" dataHost="sequoiadb1" database="SAMPLE" /&gt; &lt;dataNode name="jdbc_dn1" dataHost="jdbchost" database="db1" /&gt;&lt;dataNodename="jdbc_dn2" dataHost="jdbchost" database="db2" /&gt;&lt;dataNode name="jdbc_dn3" dataHost="jdbchost" database="db3" /&gt; --&gt;</span><span class="token comment">&lt;!--name表示主机位置，用来配置读写分离（当数据库节点有了主从复制时）;maxCon和minCon表示数据库连接池的最大和最小连接数量；balance表示负载均衡策略；dbType指定mycat需要连接数据库的类型；dbDriver表示数据库的驱动类型（native表示原生驱动，注：只有mysql用native，其它数据库采用jdbc）；switchType表示配置故障切换类型（1-select user() ，2-show slave status ，3 -show status like 'wsrep%'），它会配合标签&lt;hearbeat&gt;，即心跳机制；slaveThreshold表示主节点配置从节点的数量，最多配置100个；&lt;heartbeat&gt;表明心跳语句，定器判断服务器是否好用，是否有故障，如果宕机了，就不在向该服务器发请求了，需要配合switchType来使用，不同switchType有不同的心跳语句；&lt;writeHost&gt;表示配置读写页，写数据就配置主服务器（数据库），读数据就配置从服务器（数据库）;&lt;readHost&gt;配置写节点，配置好后，我们读数据，mycat就会找到读节点，通过账号和密码进行连接，然后把sql语句转发给读节点--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataHost</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>localhost1<span class="token punctuation">"</span></span> <span class="token attr-name">maxCon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1000<span class="token punctuation">"</span></span> <span class="token attr-name">minCon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">balance</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span>  <span class="token attr-name">writeType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">dbType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mysql<span class="token punctuation">"</span></span> <span class="token attr-name">dbDriver</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>native<span class="token punctuation">"</span></span> <span class="token attr-name">switchType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>  <span class="token attr-name">slaveThreshold</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>heartbeat</span><span class="token punctuation">&gt;</span></span>select user()<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>heartbeat</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- can have multi write hosts 可以配置多个主库 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>writeHost</span> <span class="token attr-name">host</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hostM1<span class="token punctuation">"</span></span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>localhost:3306<span class="token punctuation">"</span></span> <span class="token attr-name">user</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span>   <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--can have multi read hosts 每个主库可以配置多个从库--&gt;</span>&lt;readHost host="hosts1" url="192.168.1.103:3306" user="root" password="xxx"/ &gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>writeHost</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- &lt;writeHost host="hostM2" url="localhost:3316" user="root" password="123456"/&gt; --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataHost</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 下面是配置oracle的样式&lt;dataHost name="sequoiadb1" maxCon="1000" minCon="1" balance="0" dbType="sequoiadb" dbDriver="jdbc"&gt;&lt;heartbeat&gt; &lt;/heartbeat&gt; &lt;writeHost host="hostM1" url="sequoiadb://1426587161.dbaas.sequoialab.net:11920/SAMPLE" user="jifeng" password="jifeng"&gt;&lt;/writeHost&gt; &lt;/dataHost&gt;  &lt;dataHost name="oracle1" maxCon="1000" minCon="1" balance="0" writeType="0" dbType="oracle" dbDriver="jdbc"&gt; &lt;heartbeat&gt;select 1 from dual&lt;/heartbeat&gt;&lt;connectionInitSql&gt;alter session set nls_date_format='yyyy-mm-dd hh24:mi:ss'&lt;/connectionInitSql&gt;&lt;writeHost host="hostM1" url="jdbc:oracle:thin:@127.0.0.1:1521:nange" user="base" password="123456" &gt; &lt;/writeHost&gt; &lt;/dataHost&gt;&lt;dataHost name="jdbchost" maxCon="1000" minCon="1" balance="0" writeType="0" dbType="mongodb" dbDriver="jdbc"&gt;&lt;heartbeat&gt;select user()&lt;/heartbeat&gt;&lt;writeHost host="hostM" url="mongodb://192.168.0.99/test" user="admin" password="123456" &gt;&lt;/writeHost&gt; &lt;/dataHost&gt;&lt;dataHost name="sparksql" maxCon="1000" minCon="1" balance="0" dbType="spark" dbDriver="jdbc"&gt;&lt;heartbeat&gt; &lt;/heartbeat&gt; &lt;writeHost host="hostM1" url="jdbc:hive2://feng01:10000" user="jifeng" password="jifeng"&gt;&lt;/writeHost&gt; &lt;/dataHost&gt; --&gt;</span><span class="token comment">&lt;!-- &lt;dataHost name="jdbchost" maxCon="1000" minCon="10" balance="0" dbType="mysql"dbDriver="jdbc"&gt; &lt;heartbeat&gt;select user()&lt;/heartbeat&gt; &lt;writeHost host="hostM1"url="jdbc:mysql://localhost:3306" user="root" password="123456"&gt; &lt;/writeHost&gt;&lt;/dataHost&gt; --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mycat:</span>schema</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="四、读写分离"><a href="#四、读写分离" class="headerlink" title="四、读写分离"></a>四、读写分离</h2><h3 id="1、读写分离配置"><a href="#1、读写分离配置" class="headerlink" title="1、读写分离配置"></a>1、读写分离配置</h3><blockquote><p>操作步骤：</p></blockquote><ol><li>配置好schema.xml和server.xml文件</li><li>覆盖掉config下的文件</li><li>进入bin目录，输入：./mycat start 启动mycat</li><li>ps -ef | grep mycat 命令查看mycat运行情况</li></ol><blockquote><p>关于server.xml配置</p></blockquote><ol><li><p>配置逻辑表的名字和秘密</p></li><li><p>可以配置多个</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mycat:server</span> <span class="token name">SYSTEM</span> <span class="token string">"server.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mycat:</span>server</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>mycat</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://io.mycat/<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>system</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nonePasswordLogin<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ignoreUnknownCommand<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>useHandshakeV10<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>removeGraveAccent<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>useSqlStat<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>useGlobleTableCheck<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlExecuteTimeout<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>300<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sequnceHandlerType<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sequnceHandlerPattern<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>(?:(\s*next\s+value\s+for\s*MYCATSEQ_(\w+))(,|\)|\s)*)+<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>subqueryRelationshipCheck<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sequenceHanlderClass<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>io.mycat.route.sequence.handler.HttpIncrSequenceHandler<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>processorBufferPoolType<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleDistributedTransactions<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>useOffHeapForMerge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>memoryPageSize<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>64k<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>spillsFileBufferSize<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>1k<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>useStreamOutput<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>systemReserveMemorySize<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>384m<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>useZKSwitch<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>strictTxIsolation<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>useZKSwitch<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parallExecute<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>system</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mycat<span class="token punctuation">"</span></span> <span class="token attr-name">defaultAccount</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>123456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>schemas<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>mycatdb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>defaultSchema<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>mycatdb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>schemas<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>mycatdb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>readOnly<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>defaultSchema<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>mycatdb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mycat:</span>server</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><blockquote><p>schema.xml配置</p></blockquote><ol><li>读写分离，配置两主两从，高可用</li><li>预先安装四个mysql，指定不同端口，这里用的docker</li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mycat:schema</span> <span class="token name">SYSTEM</span> <span class="token string">"schema.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mycat:</span>schema</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>mycat</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://io.mycat/<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>schema</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mycatdb<span class="token punctuation">"</span></span> <span class="token attr-name">checkSQLschema</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">sqlMaxLimit</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">dataNode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dn1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>schema</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dn1<span class="token punctuation">"</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>localhost1<span class="token punctuation">"</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>workdb<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataHost</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>localhost1<span class="token punctuation">"</span></span> <span class="token attr-name">maxCon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1000<span class="token punctuation">"</span></span> <span class="token attr-name">minCon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">balance</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>  <span class="token attr-name">writeType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">dbType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mysql<span class="token punctuation">"</span></span> <span class="token attr-name">dbDriver</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>native<span class="token punctuation">"</span></span> <span class="token attr-name">switchType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>  <span class="token attr-name">slaveThreshold</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>heartbeat</span><span class="token punctuation">&gt;</span></span>select user()<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>heartbeat</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>writeHost</span> <span class="token attr-name">host</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hostM1<span class="token punctuation">"</span></span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>localhost:3307<span class="token punctuation">"</span></span> <span class="token attr-name">user</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span> <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>&lt;readHost host="hostS1" url="localhost:3308" user="root" password="root"/ &gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>writeHost</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>writeHost</span> <span class="token attr-name">host</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hostM2<span class="token punctuation">"</span></span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>localhost:3309<span class="token punctuation">"</span></span> <span class="token attr-name">user</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span> <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>&lt;readHost host="hostS2" url="localhost:3310" user="root" password="root"/ &gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>writeHost</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataHost</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mycat:</span>schema</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、读写分离测试"><a href="#2、读写分离测试" class="headerlink" title="2、读写分离测试"></a>2、读写分离测试</h3><hr><h2 id="五、java代码连接MyCat"><a href="#五、java代码连接MyCat" class="headerlink" title="五、java代码连接MyCat"></a>五、java代码连接MyCat</h2><hr><h2 id="六、水平拆分"><a href="#六、水平拆分" class="headerlink" title="六、水平拆分"></a>六、水平拆分</h2><h3 id="1、水平拆分"><a href="#1、水平拆分" class="headerlink" title="1、水平拆分"></a>1、水平拆分</h3><h3 id="2、水平拆分测试"><a href="#2、水平拆分测试" class="headerlink" title="2、水平拆分测试"></a>2、水平拆分测试</h3><hr><h2 id="七、垂直拆分"><a href="#七、垂直拆分" class="headerlink" title="七、垂直拆分"></a>七、垂直拆分</h2><hr><h2 id="八、MyCat主键生成策略"><a href="#八、MyCat主键生成策略" class="headerlink" title="八、MyCat主键生成策略"></a>八、MyCat主键生成策略</h2><hr><h2 id="九、MyCat总结"><a href="#九、MyCat总结" class="headerlink" title="九、MyCat总结"></a>九、MyCat总结</h2><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>es进阶</title>
      <link href="/2021/03/21/es-jin-jie/"/>
      <url>/2021/03/21/es-jin-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="es进阶"><a href="#es进阶" class="headerlink" title="es进阶"></a>es<a href="https://www.bilibili.com/video/BV1ET4y137Km?from=search&amp;seid=3360397158838638747">进阶</a></h1><hr><h2 id="一、结构化搜索"><a href="#一、结构化搜索" class="headerlink" title="一、结构化搜索"></a>一、结构化搜索</h2><h3 id="1、term-filter搜索数据"><a href="#1、term-filter搜索数据" class="headerlink" title="1、term filter搜索数据"></a>1、term filter搜索数据</h3><blockquote><p>es版本5.2以后，type=text，默认会有两个field，一个是field本身，比如articleID，是支持分词的；还有一个就是field.keyword，它默认是不支持分词的，会最多保留256个字符</p></blockquote><img src="/2021/03/21/es-jin-jie/image-20210321183552898.png" alt="image-20210321183552898" style="zoom:80%;"><p>term filter注意点：</p><ol><li><p>对搜索文本不分词，直接拿去倒排索引中匹配，你输入的是什么，就去匹配什么；</p></li><li><p>因此在搜索type=text的字段时，使用feild本身是搜索不到内容的，因为已经对field本身这种字段进行了分词；而应该采用field.keyword这种字段进行搜索，它不会进行分词，因此能搜索到相应结果；</p></li><li><p>所以term filter，对text过滤，可以考虑使用内置的field.keyword来进行匹配，但默认只保留256个字符。所以尽可能自己去手动建立索引，指定not_analyzed，但在新版本的es中，可以不指定not_analyzed了，将type=word即可。</p><img src="/2021/03/21/es-jin-jie/image-20210321185555877.png" alt="image-20210321185555877" style="zoom:80%;"></li><li><img src="/2021/03/21/es-jin-jie/image-20210321190356430.png" alt="image-20210321190356430" style="zoom:80%;"></li></ol><hr><h3 id="2、-filter执行原理"><a href="#2、-filter执行原理" class="headerlink" title="2、_filter执行原理"></a>2、_filter执行原理</h3><blockquote><p>_filter执行原理深度剖析（bitset机制与caching机制）</p></blockquote><p>bitset机制：</p><ol><li><p>一个二进制数组；</p></li><li><p>使用找到的doc list，构建一个bitset二进制数组，数组的每个元素都是0或1，用来表示一个doc对一个filter条件是否匹配，如果匹配就是1，不匹配就是0；</p><img src="/2021/03/21/es-jin-jie/image-20210321192052047.png" alt="image-20210321192052047" style="zoom:80%;"></li><li><p>bitset机制好处是尽可能用简单的数据结构去实现复杂的功能，可以节省内存的空间，来提升性能；</p></li><li><p>对于过滤条件比较多的_search，每个条件都对应一个bitset。在查找满足所有条件的doc时，会遍历每个过滤条件对应的bitset，但会先遍历比较稀疏的bitset，就可以先过滤尽可能多的数据，提升性能</p></li></ol><p>caching机制：</p><ol><li>缓存过滤条件达到一定次数的bitset；</li><li>在最近的256个query中，超过了一定次数的过滤条件，缓存其bitset在内存中，这样下次如果再有这个条件过来的时候，就不用重新扫描倒排索引，反复生成bitset了，可以大幅度提升性能；</li><li>如果doc有新增或修改，那么cached bitset会自动更新，当有相同的filter条件时，会直接使用这个过滤条件对应的cached bitset；</li></ol><p>filter和query的对比：</p><ol><li>filter大部分情况下，在query之前执行，先尽可能过滤掉尽可能多的数据；</li><li>query会计算doc对搜索条件的relevance score，还会根据这个socre去排序，性能低；</li><li>filter只是简单过滤出想要的数据，不会计算relevance score，也不会排序，性能高，过滤大部分数据；</li></ol><hr><h3 id="3、bool组合多个filter条件"><a href="#3、bool组合多个filter条件" class="headerlink" title="3、bool组合多个filter条件"></a>3、bool组合多个filter条件</h3><blockquote><p>​    bool下面可以跟：must，must_not，should等过滤条件，分别表示：必须匹配、必须不匹配、应该匹配；可以对应到sql中的==、！=、or；或者说对应：满足所有条件的过滤、不满足所有条件的过滤、满足条件中的1个的过滤。</p><img src="/2021/03/21/es-jin-jie/image-20210321195052919.png" alt="image-20210321195052919" style="zoom:80%;"><p>bool还可以嵌套：</p><img src="/2021/03/21/es-jin-jie/image-20210321195929906.png" alt="image-20210321195929906" style="zoom:80%;"></blockquote><hr><h3 id="4、terms使用"><a href="#4、terms使用" class="headerlink" title="4、terms使用"></a>4、terms使用</h3><blockquote><p>使用terms搜索多个值，以及多值搜索结果优化</p><img src="/2021/03/21/es-jin-jie/image-20210321200235736.png" alt="image-20210321200235736" style="zoom:80%;"></blockquote><img src="/2021/03/21/es-jin-jie/image-20210321201016810.png" alt="image-20210321201016810" style="zoom:80%;"><blockquote><p>上面的搜索包含java的对应的文档记录，现在优化只包含java的文档记录，添加一个字段tag_cnt记录tag包含的条数，则优化后的请求是这样的</p></blockquote><img src="/2021/03/21/es-jin-jie/image-20210321201606661.png" alt="image-20210321201606661" style="zoom:80%;"><hr><h3 id="5、range-filter范围过滤"><a href="#5、range-filter范围过滤" class="headerlink" title="5、range filter范围过滤"></a>5、range filter范围过滤</h3><blockquote><p>range类似于sql中的算数运算符或者between</p></blockquote><blockquote><p>数值</p></blockquote><img src="/2021/03/21/es-jin-jie/image-20210321202218130.png" alt="image-20210321202218130" style="zoom:80%;"><blockquote><p>日期</p></blockquote><img src="/2021/03/21/es-jin-jie/image-20210321202401711.png" alt="image-20210321202401711" style="zoom:80%;"><hr><hr><h2 id="二、深度探秘搜索技术"><a href="#二、深度探秘搜索技术" class="headerlink" title="二、深度探秘搜索技术"></a>二、深度探秘搜索技术</h2><h3 id="1、手动控制全文检索精确度"><a href="#1、手动控制全文检索精确度" class="headerlink" title="1、手动控制全文检索精确度"></a>1、手动控制全文检索精确度</h3><blockquote><p>全文检索match query。</p><p>如果检索的字段是not_analyzed类型（type=keyword），那么match query也相于term query</p></blockquote><img src="/2021/03/21/es-jin-jie/image-20210321204138409.png" alt="image-20210321204138409" style="zoom:80%;"><blockquote><p>通过and关键字实现搜索结果精确控制</p></blockquote><img src="/2021/03/21/es-jin-jie/image-20210321204348328.png" alt="image-20210321204348328" style="zoom:80%;"><blockquote><p>通过minimum_should_match指定文档记录中必须匹配多少个关键字才能结果返回</p></blockquote><img src="/2021/03/21/es-jin-jie/image-20210321204858425.png" alt="image-20210321204858425" style="zoom:80%;"><img src="/2021/03/21/es-jin-jie/image-20210321205358266.png" alt="image-20210321205358266" style="zoom:80%;"><img src="/2021/03/21/es-jin-jie/image-20210321205924243.png" alt="image-20210321205924243" style="zoom:80%;"><hr><h3 id="2、term-bool底层原理"><a href="#2、term-bool底层原理" class="headerlink" title="2、term+bool底层原理"></a>2、term+bool底层原理</h3><blockquote><p>term+bool实现multiword搜索底层原理解析</p></blockquote><img src="/2021/03/21/es-jin-jie/image-20210321210711312.png" alt="image-20210321210711312" style="zoom:80%;"><img src="/2021/03/21/es-jin-jie/image-20210321211002821.png" alt="image-20210321211002821" style="zoom:80%;"><img src="/2021/03/21/es-jin-jie/image-20210321211203252.png" alt="image-20210321211203252" style="zoom:80%;"><hr><h3 id="3、基于boost的细粒度搜索条件权重控制"><a href="#3、基于boost的细粒度搜索条件权重控制" class="headerlink" title="3、基于boost的细粒度搜索条件权重控制"></a>3、基于boost的细粒度搜索条件权重控制</h3><p>boost的作用：</p><ol><li>加大某个搜索条件的权重</li><li>权重越大的搜索条件所对应的relevance score就越高，就会优先返回作为结果</li></ol><img src="/2021/03/21/es-jin-jie/image-20210321212359495.png" alt="image-20210321212359495" style="zoom:80%;"><hr><h3 id="4、多shard场景下relevance-score不准确问题"><a href="#4、多shard场景下relevance-score不准确问题" class="headerlink" title="4、多shard场景下relevance score不准确问题"></a>4、多shard场景下relevance score不准确问题</h3><blockquote><p>当一个索引有多个分片的时候，搜索结果可能会不准确</p></blockquote><img src="/2021/03/21/es-jin-jie/image-20210321213229040.png" alt="image-20210321213229040" style="zoom:80%;"><blockquote><p>如何解决</p></blockquote><img src="/2021/03/21/es-jin-jie/image-20210321213650477.png" alt="image-20210321213650477" style="zoom:80%;"><hr><h3 id="5、基于dis-max实现best-fields策略进行多字段搜索"><a href="#5、基于dis-max实现best-fields策略进行多字段搜索" class="headerlink" title="5、基于dis_max实现best fields策略进行多字段搜索"></a>5、基于dis_max实现best fields策略进行多字段搜索</h3><blockquote><p>批量加入字段通过_bulk</p></blockquote><img src="/2021/03/21/es-jin-jie/image-20210321214408001.png" alt="image-20210321214408001" style="zoom:80%;"><blockquote><p>多字段搜索</p></blockquote><img src="/2021/03/21/es-jin-jie/image-20210321214725030.png" alt="image-20210321214725030" style="zoom:80%;"><blockquote><p>best fields策略</p></blockquote><p><em>dis_max只会考虑把多条匹配语句中分数最高的拿来做比较</em></p><img src="/2021/03/21/es-jin-jie/image-20210321215532426.png" alt="image-20210321215532426" style="zoom:80%;"><hr><h3 id="6、基于tie-breaker参数优化dis-max搜索效果"><a href="#6、基于tie-breaker参数优化dis-max搜索效果" class="headerlink" title="6、基于tie_breaker参数优化dis_max搜索效果"></a>6、基于tie_breaker参数优化dis_max搜索效果</h3><img src="/2021/03/21/es-jin-jie/image-20210321221220758.png" alt="image-20210321221220758" style="zoom:80%;"><blockquote><p>案例分析</p></blockquote><img src="/2021/03/21/es-jin-jie/image-20210321220336814.png" alt="image-20210321220336814" style="zoom:80%;"><blockquote><p>tie_breaker解决上方案例中dis_max的缺点(tie_breaker取值在0~1)</p></blockquote><p><em>使用tie_breaker将其它query分数也考虑进去</em></p><img src="/2021/03/21/es-jin-jie/image-20210321220854830.png" alt="image-20210321220854830" style="zoom:80%;"><hr><h3 id="7、基于multi-match语法实现dis-max和tie-braker"><a href="#7、基于multi-match语法实现dis-max和tie-braker" class="headerlink" title="7、基于multi_match语法实现dis_max和tie_braker"></a>7、基于multi_match语法实现dis_max和tie_braker</h3><img src="/2021/03/21/es-jin-jie/image-20210321221649598.png" alt="image-20210321221649598" style="zoom:80%;"><blockquote><p>上面的查询请求写法直接通过multi_match（dis_max直接通过type指定为best_fields）</p></blockquote><img src="/2021/03/21/es-jin-jie/image-20210321222048147.png" alt="image-20210321222048147" style="zoom:80%;"><hr><h3 id="8、基于multi-match-most-fields策略进行multi-field搜索"><a href="#8、基于multi-match-most-fields策略进行multi-field搜索" class="headerlink" title="8、基于multi_match+most fields策略进行multi_field搜索"></a>8、基于multi_match+most fields策略进行multi_field搜索</h3><p><em>best-fields对比most fields</em> ：</p><ul><li>前者主要是说某一个field匹配尽可能多的关键字的doc优先返回回来</li><li>后者主要是说尽可能返回更多field匹配到某个关键字的doc优先返回回来</li></ul><img src="/2021/03/21/es-jin-jie/image-20210321224923262.png" alt="image-20210321224923262" style="zoom:80%;"><blockquote><p>指定分词器</p></blockquote><img src="/2021/03/21/es-jin-jie/image-20210321225309774.png" alt="image-20210321225309774" style="zoom:80%;"><blockquote><p>multi_match进行搜索（type指定为most_fields即可）</p></blockquote><img src="/2021/03/21/es-jin-jie/image-20210321225934153.png" alt="image-20210321225934153" style="zoom:80%;"><blockquote><p><em>best-fields对比most fields</em> </p></blockquote><img src="/2021/03/21/es-jin-jie/image-20210321230338509.png" alt="image-20210321230338509" style="zoom:80%;"><hr><h3 id="9、使用most-fields策略进行cross-fields-搜索弊端解析"><a href="#9、使用most-fields策略进行cross-fields-搜索弊端解析" class="headerlink" title="9、使用most_fields策略进行cross-fields 搜索弊端解析"></a>9、使用most_fields策略进行cross-fields 搜索弊端解析</h3><blockquote><p>关于cross-fields</p></blockquote><img src="/2021/03/21/es-jin-jie/image-20210321231159135.png" alt="image-20210321231159135" style="zoom:80%;"><blockquote><p>定义文档</p></blockquote><img src="/2021/03/21/es-jin-jie/image-20210321231549960.png" alt="image-20210321231549960" style="zoom:80%;"><blockquote><p>执行搜索</p></blockquote><img src="/2021/03/21/es-jin-jie/image-20210321231756065.png" alt="image-20210321231756065" style="zoom:80%;"><p>结果分析：</p><ol><li>按道理doc5应该排第一，包含了 Peter Smith,但结果doc2排到了第一；</li><li><img src="/2021/03/21/es-jin-jie/image-20210321232704237.png" alt="image-20210321232704237" style="zoom:80%;"></li></ol><blockquote><p>弊端分析</p></blockquote><img src="/2021/03/21/es-jin-jie/image-20210321233018161.png" alt="image-20210321233018161" style="zoom:80%;"><hr><h3 id="10、使用copy-to定制组合field解决cross-fields搜索弊端"><a href="#10、使用copy-to定制组合field解决cross-fields搜索弊端" class="headerlink" title="10、使用copy_to定制组合field解决cross-fields搜索弊端"></a>10、使用copy_to定制组合field解决cross-fields搜索弊端</h3><blockquote><p>copy_to原理</p></blockquote><img src="/2021/03/21/es-jin-jie/image-20210321234056057.png" alt="image-20210321234056057" style="zoom:80%;"><blockquote><p>copy_to语法（将多个字段值拷贝到一个字段中，并建立倒排索引）</p></blockquote><img src="/2021/03/21/es-jin-jie/image-20210321234525202.png" alt="image-20210321234525202" style="zoom:80%;"><blockquote><p>添加doc</p></blockquote><img src="/2021/03/21/es-jin-jie/image-20210321234625343.png" alt="image-20210321234625343" style="zoom:80%;"><blockquote><p>执行查询请求</p></blockquote><img src="/2021/03/21/es-jin-jie/image-20210321234655555.png" alt="image-20210321234655555" style="zoom:80%;"><blockquote><p>结果分析</p></blockquote><img src="/2021/03/21/es-jin-jie/image-20210321235348433.png" alt="image-20210321235348433" style="zoom:80%;"><hr><h3 id="11、使用原生cross-fields技术解决搜索弊端"><a href="#11、使用原生cross-fields技术解决搜索弊端" class="headerlink" title="11、使用原生cross-fields技术解决搜索弊端"></a>11、使用原生cross-fields技术解决搜索弊端</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql索引</title>
      <link href="/2021/03/16/mysql-suo-yin/"/>
      <url>/2021/03/16/mysql-suo-yin/</url>
      
        <content type="html"><![CDATA[<h1 id="你真会玩索引？"><a href="#你真会玩索引？" class="headerlink" title="你真会玩索引？"></a>你真会玩索引？</h1><hr><h2 id="一、mysql索引的创建"><a href="#一、mysql索引的创建" class="headerlink" title="一、mysql索引的创建"></a>一、mysql<a href="https://huke88.com/course/44177.html?pageType=1&amp;key=%E7%B4%A2%E5%BC%95&amp;identify=1615905331">索引的创建</a></h2><h3 id="1、什么是索引？"><a href="#1、什么是索引？" class="headerlink" title="1、什么是索引？"></a>1、什么是索引？</h3><ul><li><p>索引类似图书中的目录,可以利用索引快速查找到表的记录;</p></li><li><p>索引需要额外的磁盘空间来存放,每次更新数据时系统都会拿出额外的时间来更新索引;</p></li><li><p>索引应该建立在重复率较低的列上,最好是唯一列;</p></li><li><p>索引应该建立在内容比较少的列上,最好是数字列;</p><hr><p>综合上注意:</p><ol><li>索引应该建在经常作为查询条件的列上,可以提高查询效率;</li><li>不要在频繁修改的列上创建索引;</li><li>索引不要建立得特别多;</li></ol></li></ul><hr><h3 id="2、索引的创建"><a href="#2、索引的创建" class="headerlink" title="2、索引的创建"></a>2、索引的创建</h3><h4 id="1、索引的创建语法"><a href="#1、索引的创建语法" class="headerlink" title="1、索引的创建语法"></a>1、索引的创建语法</h4><blockquote><p>方法一：create [unique] index 索引名 on 表名（列名1，列名2，…列名n）</p><p>方法二：alter table 表名 add [unique] index 索引名（列名1，列名2，…列名n）</p></blockquote><p>需注意：</p><ul><li>unique是可选的，添加以后表示当前列是唯一索引；</li><li>可以同时为多个列建立索引，称为复合索引，但是建立好复合索引以后，只有这些列同时出现在where后面索引才会起作用，不推荐使用复合索引；</li><li>索引名字除在删除索引时有用以外其它时候没有作用，但不能重复；</li></ul><h4 id="2、实操"><a href="#2、实操" class="headerlink" title="2、实操"></a>2、实操</h4><blockquote><p>这里用的是Navicat工具</p></blockquote><p>步骤：</p><ul><li><p>随意点击一个表，右键点击设计表，点击导航栏上的索引，跳出如下界面</p><img src="/2021/03/16/mysql-suo-yin/image-20210316232148304.png" alt="image-20210316232148304" style="zoom:80%;"></li><li><p>起个索引名，栏位即选择创建索引的字段，索引类型选择默认的Normal，索引方法选择BTREE</p><img src="/2021/03/16/mysql-suo-yin/image-20210316232421750.png" alt="image-20210316232421750" style="zoom:80%;"></li></ul><h4 id="3、删除索引语法"><a href="#3、删除索引语法" class="headerlink" title="3、删除索引语法"></a>3、删除索引语法</h4><blockquote><p>方法一：DROP INDEX 索引名 on 表名</p><p>方法二：ALTER TABLE 表名 DROP INDEX 索引名</p><p>方法三：用工具</p><img src="/2021/03/16/mysql-suo-yin/image-20210316233054373.png" alt="image-20210316233054373" style="zoom:80%;"></blockquote><hr><h3 id="3、索引的使用"><a href="#3、索引的使用" class="headerlink" title="3、索引的使用"></a>3、索引的使用</h3><blockquote><p>通过在sql语句前添加EXPLAIN（SQL的执行计划）来查看所建立索引的执行情况，通过type来明了是否使用了索引。</p></blockquote><p>type取值（<em>除all和index外都用到了索引</em>）：</p><ul><li><p>all——没有使用到索引，表示全文检索，即扫描全表后返回结果查询；</p></li><li><p>index——没有使用到索引，表示索引全文检索，即扫描所有索引后返回结果查询；</p></li><li><p>ref——使用到索引，表示精准获取某个数据，它会直接到索引中去获取数据；</p><img src="/2021/03/16/mysql-suo-yin/image-20210316235952498.png" alt="image-20210316235952498" style="zoom:80%;"></li><li><p>range——使用到索引，表示某个范围类使用索引（即where后面使用了运算符，且查询列是索引列，则type就会为range），只扫描了部分索引</p><img src="/2021/03/16/mysql-suo-yin/image-20210316235825737.png" alt="image-20210316235825737" style="zoom:80%;"></li></ul><p>综上注意：</p><ol><li>主键、唯一约束、外键默认都是带有索引的 ，因此它们查询速度快。</li></ol><hr><h2 id="二、分析索引"><a href="#二、分析索引" class="headerlink" title="二、分析索引"></a>二、<a href="https://www.bilibili.com/video/BV1aE41117sk?from=search&amp;seid=16573871798096746639">分析索引</a></h2><h3 id="1、索引的本质"><a href="#1、索引的本质" class="headerlink" title="1、索引的本质"></a>1、索引的本质</h3><ul><li>索引是帮助mysql高效获取数据的*排好序的<a href="http://c.biancheng.net/view/3328.html">数据结构*</a></li><li>索引的数据结构：<ul><li>二叉树</li><li>红黑树</li><li>Hash表</li><li>B-Tree</li></ul></li></ul><blockquote><p>我们知道mysql索引支持Hash和B+Tree两种数据结构，但为什么平时开发中都选择B-Tree呢？</p><p>1、Hash结构就是通过给定的主键索引，通过hash算法计算出具体某一位置，然后获取到数据，效率相当的快，的确Hash结构很适合于不是范围查找的sql语句，但一旦是范围查找，hash这种结构就懵逼了；</p><p>2、首先要明白B+Tree在树深度确定的时候，就分为叶子节点和非叶子节点，叶子节点存储索引和数据，非叶子节点存储索引，从左到右索引的大小关系都是递增的，因此在叶子节点间，从左到右就有一个指针指向下一个叶子节点（相当于下一个节点的存储地址），因此在范围查找的时候，直接通过这个指针我们就可以把我们想要的数据返回回去，范围查找远远高于Hash这种结构。注意：这里指的是B+Tree，B-Tree叶子节点之间没有指针指向下一个节点，下面会阐述它们两者的区别；</p></blockquote><hr><h3 id="2、红黑树"><a href="#2、红黑树" class="headerlink" title="2、红黑树"></a>2、红黑树</h3><blockquote><p><a href="http://39.100.208.184/">推介一个好用的数据结构可视化网站</a></p></blockquote><img src="/2021/03/16/mysql-suo-yin/image-20210317220735880.png" alt="image-20210317220735880" style="zoom:80%;"><blockquote><p>二叉树结构</p></blockquote><img src="/2021/03/16/mysql-suo-yin/image-20210317222232931.png" alt="image-20210317222232931" style="zoom:80%;"><blockquote><p>红黑树结构（平衡二叉树）</p></blockquote><img src="/2021/03/16/mysql-suo-yin/image-20210317222717734.png" alt="image-20210317222717734" style="zoom:80%;"><hr><h3 id="3、B-tree结构"><a href="#3、B-tree结构" class="headerlink" title="3、B+tree结构"></a>3、B+tree结构</h3><p><em>为什么要有B+tree?</em></p><ul><li>如果像二叉树黑红黑树那样，一直向里面插数据，那么树结构的高度会越来越高，假如要查询一个数据为1000的数据，同样会查询很多次，才能找到其在磁盘上的位置；</li><li>为了解决二叉树和红黑树，这种在纵向无线扩展的缺点，就有了B+tree；</li><li>B+tree恰好相反，它是在横向扩展，保证了纵向了高度不变后，要求横向上的节点（索引）从左到右递增排列，且所有索引不重复</li></ul><blockquote><p>知道B+tree前，先来了解一下B-tree的结构</p></blockquote><p>B-tree的结构特点：</p><ol><li><p>叶节点具有相同的深度，叶节点的指针为空；    </p></li><li><p>所有的索引元素不重复；</p></li><li><p>节点中的数据索引从左到右递增排列；</p><img src="/2021/03/16/mysql-suo-yin/image-20210317224052476.png" alt="image-20210317224052476" style="zoom:80%;"></li></ol><blockquote><p>B+tree的结构</p></blockquote><p>B+tree的结构特点：</p><ol><li><p>非叶子节点不存储数据，只存储索引，因此可以放更多的索引</p></li><li><p>叶子节点包含所有索引字段；</p></li><li><p>叶子节点用指针连接，提高区间访问性能；</p><img src="/2021/03/16/mysql-suo-yin/image-20210317224521088.png" alt="image-20210317224521088" style="zoom:80%;"></li></ol><hr><h3 id="4、索引如何支撑千万级别的快速查询"><a href="#4、索引如何支撑千万级别的快速查询" class="headerlink" title="4、索引如何支撑千万级别的快速查询"></a>4、索引如何支撑千万级别的快速查询</h3><img src="/2021/03/16/mysql-suo-yin/image-20210317230708499.png" alt="image-20210317230708499" style="zoom:80%;"><hr><h3 id="5、myisam存储引擎索引"><a href="#5、myisam存储引擎索引" class="headerlink" title="5、myisam存储引擎索引"></a>5、myisam存储引擎索引</h3><p>myisam索引是非聚集索引：</p><ul><li><p>myisam的索引文件和数据文件是分离的？</p><ol><li><p>首先明白存储引擎是来形容表的，而不是数据库；</p><img src="/2021/03/16/mysql-suo-yin/image-20210317232424469.png" alt="image-20210317232424469" style="zoom:80%;"></li><li><p>表里面的数据存储是在磁盘上面的；</p></li><li><p>myisam存储在磁盘上对应三个文件（”xxx.frm”,”xxx.MYD”,”xxx.MYI”）</p><ol><li>以.frm后缀结尾的文件表示： 表结构定义的一些数据</li><li>以.MYD后缀结尾的文件表示： 存储的是myisam的数据</li><li>以.MYI后缀结尾的文件表示： 存储的是myisam的索引数据，比如主键</li></ol></li></ol></li><li><p>一张图搞清myisam索引结构；</p><img src="/2021/03/16/mysql-suo-yin/image-20210317233936965.png" alt="image-20210317233936965" style="zoom:80%;"><p>图片分析：</p><ol><li>主键自带索引，因此无需创建索引在.MDI文件里面就有主键这些数据；</li><li>通常我们选择字段建立索引的时候选择的数据结构也是B+tree；</li><li>来个案列分析：假如Col1位主键列，现在要查询Col1=49这条记录的书籍，分析一下执行过程？<ol><li>首先判断Col1这个字段是否创建索引，发现Col1是主键是索引，那么按照索引的方式来查询这条数据；</li><li>非叶子节点比较索引的大小，从而在叶子节点找到对应数据在磁盘的存储位置；</li><li>然后通这个位置到.MYD这个数据文件里面去找到要查询的记录；</li></ol></li></ol></li></ul><hr><h3 id="6、innodb存储引擎索引"><a href="#6、innodb存储引擎索引" class="headerlink" title="6、innodb存储引擎索引"></a>6、innodb存储引擎索引</h3><img src="/2021/03/16/mysql-suo-yin/image-20210322202902520.png" alt="image-20210322202902520" style="zoom:80%;"><p>innodb索引是聚集索引：</p><ul><li><p>表数据文件本身就是按B+tree组织的一个结构文件；</p><img src="/2021/03/16/mysql-suo-yin/image-20210322203755079.png" alt="image-20210322203755079" style="zoom:80%;"><ol><li>innodb存储在磁盘上对应二个文件（”xxx.frm”,”xxx.ibd”）</li><li>“xxx.frm”表示定义表结构的数据,”xxx.ibd”表示索引数据和存储的数据，相比myisam而言，”xxx.ibd”就是”xxx.MYD”,”xxx.MYI”的整合</li></ol></li><li><p>聚集索引-叶子节点包含了完整的数据记录；</p><blockquote><p>#什么是聚集索引？</p><p>首先明白innodb的主键索引就是聚集索引；由上面可晓而知，索引和数据一起存储就是聚集索引；innodb通过索引查询的时候，只需要过滤”xxx.ibd”文件，就能获取我们想要的数据</p><p>#什么是非聚集索引？</p><p>首先明白myisam的主键索引就是非聚集索引；由上面可晓而知，索引和数据分开存储就是非聚集索引；myisam在通过索引查询的时候，除了要过滤”xxx.MYI”文件，还要过滤”xxx.MYD”，才能获得我们想要的数据</p></blockquote></li><li><p>为什么innodb表必须有主键，并且使用整型的自增主键；</p><blockquote><p>1、通过主键来维持聚集索引这种结构，即使你设计表结构时候没有建立主键，innodb也会默认给你搞一个自增的整型的主键来维持聚集索引这种结构，所以不可能没有主键；</p><p>2、为什么主键选择整型的自增主键而不选用UUID这样的字符串作为主键，由上面我们知道，在通过索引去查询数据的时候，索引之间会相互比较，来获取索引的具体位置，如果选用UUID这样的字符串作为主键在查询的时候，比较的效率会特别慢（先转换成ASCII码才会去比较）。因此从效率上考虑，整型自增的主键效率更高；</p><p>3、UUID字符串是一个长字符串，所占用的磁盘空间远远大于整型。因此从磁盘空间上考虑，在数据量达到几百万时候，整型自增主键更加，相比UUID占用磁盘少； </p><p>4、为啥又要是<em>自增</em>的整型？首先明在B+Tree这种数据结构中从左到右索引递增，用递增的整型的好处就是，我们添加数据的时候就会在最右面添加索引数据；而如果是UUID这种随机的字符串通过计算得到的ASCLL码，再去添加数据，这个索引就不会遵循，在最右面添加索引数据，很可能在叶子节点中的某一个位置进行添加，就会导致叶子节点分裂和做树平衡，产生性能上的开销。因此在添加数据的时候，采用整型自增作为主键能够降低性能开销，在大批量插入数据时候，增快插入速率；</p></blockquote></li><li><p>为什么非主键索引结构叶子节点存储的是主键值（一直性和节省存储空间）</p></li></ul><hr><h3 id="7、mysql索引优化"><a href="#7、mysql索引优化" class="headerlink" title="7、mysql索引优化"></a>7、mysql索引优化</h3><blockquote><p>#搞清联合索引？</p><p>实际上开发的时候采用的都是联合索引比较多，联合索引就是把几个字段放在一起来作为索引，增大查询效率；</p></blockquote><img src="/2021/03/16/mysql-suo-yin/image-20210322214902264.png" alt="image-20210322214902264" style="zoom:80%;"><blockquote><p>案列分析</p><p>1、创建一个表，指定三个字段，构成联合索引</p><img src="/2021/03/16/mysql-suo-yin/image-20210322215320124.png" alt="image-20210322215320124" style="zoom:80%;"><p>2、权值匹配</p><img src="/2021/03/16/mysql-suo-yin/image-20210322215444142.png" alt="image-20210322215444142" style="zoom:80%;"><p>3、最左前缀法则</p><img src="/2021/03/16/mysql-suo-yin/image-20210322215924354.png" alt="image-20210322215924354" style="zoom:80%;"><p>4、不在索引列上做任何操作（计算、函数、（自动or手动）类型转换），会导致索引失效而转向全表扫描</p><img src="/2021/03/16/mysql-suo-yin/image-20210322220620352.png" alt="image-20210322220620352" style="zoom:80%;"><p>5、不能使用索引中范围右边的列</p><img src="/2021/03/16/mysql-suo-yin/image-20210322220829716.png" alt="image-20210322220829716" style="zoom:80%;"><p>6、尽量使用覆盖索引</p><img src="/2021/03/16/mysql-suo-yin/image-20210322221010558.png" alt="image-20210322221010558" style="zoom:80%;"><p>7、不使用！=、&lt;&gt;</p><img src="/2021/03/16/mysql-suo-yin/image-20210322221113827.png" alt="image-20210322221113827" style="zoom:80%;"><p>8、不使用 is null、is not null</p><img src="/2021/03/16/mysql-suo-yin/image-20210322221220792.png" alt="image-20210322221220792" style="zoom:80%;"><p>9、通配符%不应放在开头</p><img src="/2021/03/16/mysql-suo-yin/image-20210322221437586.png" alt="image-20210322221437586" style="zoom:80%;"></blockquote><h3 id=""><a href="#" class="headerlink" title=""></a></h3><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue二次学习</title>
      <link href="/2021/03/15/vue-er-ci-xue-xi/"/>
      <url>/2021/03/15/vue-er-ci-xue-xi/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="Vue二次学习"><a href="#Vue二次学习" class="headerlink" title="Vue二次学习"></a>Vue<a href="https://www.kuangstudy.com/course/play/1321003295779323905">二次学习</a></h1><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ELK</title>
      <link href="/2021/03/09/elk/"/>
      <url>/2021/03/09/elk/</url>
      
        <content type="html"><![CDATA[<h1 id="Elasticsearch、Logstash-和-Kibana"><a href="#Elasticsearch、Logstash-和-Kibana" class="headerlink" title="Elasticsearch、Logstash 和 Kibana"></a>Elasticsearch、Logstash 和 Kibana</h1><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>es</title>
      <link href="/2021/03/09/es/"/>
      <url>/2021/03/09/es/</url>
      
        <content type="html"><![CDATA[<h1 id="你了解ElasticSearch吗"><a href="#你了解ElasticSearch吗" class="headerlink" title="你了解ElasticSearch吗"></a><a href="https://www.bilibili.com/video/BV17a4y1x7zq?from=search&amp;seid=12179769116458678171">你了解ElasticSearch吗</a></h1><hr><img src="/2021/03/09/es/image-20210309210729685.png" alt="image-20210309210729685" style="zoom:200%;"><hr><h2 id="1、ElasticSearch是什么"><a href="#1、ElasticSearch是什么" class="headerlink" title="1、ElasticSearch是什么"></a>1、ElasticSearch是什么</h2><blockquote><p><a href="https://www.cnblogs.com/kevingrace/p/10671063.html">优选博客</a></p></blockquote><img src="/2021/03/09/es/image-20210309211135007.png" alt="image-20210309211135007" style="zoom:80%;"><img src="/2021/03/09/es/image-20210309211431826.png" alt="image-20210309211431826" style="zoom:80%;"><hr><h2 id="2、es和solr区别"><a href="#2、es和solr区别" class="headerlink" title="2、es和solr区别"></a>2、es和solr区别</h2><img src="/2021/03/09/es/image-20210309211629547.png" alt="image-20210309211629547" style="zoom:80%;"><img src="/2021/03/09/es/image-20210309211808814.png" alt="image-20210309211808814" style="zoom:80%;"><img src="/2021/03/09/es/image-20210309211836020.png" alt="image-20210309211836020" style="zoom:80%;"><img src="/2021/03/09/es/image-20210309212145024.png" alt="image-20210309212145024" style="zoom:80%;"><blockquote><p>#es和solr比较总结：</p><p>1、当单纯的对已有数据进行搜索的时候，Solr更快；</p><p>2、当实时建立索引时，Solr会产生io阻塞，查询性能较差，es具有更明显的优势</p><p>3、随着数据量的增加，Solr的搜索效率会变得更低，而es却没有明显的变化</p></blockquote><hr><h2 id="3、es安装及head插件安装"><a href="#3、es安装及head插件安装" class="headerlink" title="3、es安装及head插件安装"></a>3、es安装及head<a href="https://www.elastic.co/cn/">插件安装</a></h2><p><a href="https://www.elastic.co/cn/downloads/elasticsearch"><em>es下载</em></a></p><blockquote><p>解压后</p></blockquote><img src="/2021/03/09/es/image-20210309213505441.png" alt="image-20210309213505441" style="zoom:80%;"><blockquote><p>文件说明</p></blockquote><img src="/2021/03/09/es/image-20210309213548947.png" alt="image-20210309213548947" style="zoom:80%;"><blockquote><p>启动es，访问：172.22.144.1:9200</p></blockquote><img src="/2021/03/09/es/image-20210309213751652.png" alt="image-20210309213751652" style="zoom:80%;"><blockquote><p>查看</p></blockquote><img src="/2021/03/09/es/image-20210309214028386.png" alt="image-20210309214028386" style="zoom:80%;"><blockquote><p>安装可视化界面 head插件，基于vue（上面查看步骤返回json）</p><p>步骤：1、解压</p><p>​           2、进入elasticsearch-head-master文件夹cmd</p><p>​           3、输入：cnpm install 命令，安装插件</p><p>​           4、输入：npm run start 命令，启动head</p><p>​           5、访问IP：localhost:9100</p></blockquote><p>head<a href="https://github.com/mobz/elasticsearch-head/">插件下载</a></p><img src="/2021/03/09/es/image-20210309215549799.png" alt="image-20210309215549799" style="zoom:80%;"><img src="/2021/03/09/es/image-20210309215835136.png" alt="image-20210309215835136" style="zoom:80%;"><blockquote><p>来解决跨域问题</p></blockquote><img src="/2021/03/09/es/image-20210309220047001.png" alt="image-20210309220047001" style="zoom:80%;"><img src="/2021/03/09/es/image-20210309220338414.png" alt="image-20210309220338414" style="zoom:80%;"><blockquote><p>重启es，访问：localhost:9100</p></blockquote><img src="/2021/03/09/es/image-20210309220742697.png" alt="image-20210309220742697" style="zoom:80%;"><p><em><strong>我们只把head作文es的数据展示工具，虽然能够通过此界面建立索引和查询，但不全，后面采用Kibana</strong></em></p><hr><h2 id="4、Kibana的安装"><a href="#4、Kibana的安装" class="headerlink" title="4、Kibana的安装"></a>4、Kibana的安装</h2><blockquote><p>了解ELK</p></blockquote><img src="/2021/03/09/es/image-20210309221713731.png" alt="image-20210309221713731" style="zoom:80%;"><blockquote><p>安装Kibana</p><p>下载的Kibana版本和es版本要一致；</p><p>下载慢的小伙伴们可以到 华为云的镜像去下载<br>速度很快，自己找对应版本就可以<br>ElasticSearch: <a href="https://mirrors.huaweicloud.com/elasticsearch/?C=N&amp;O=D">https://mirrors.huaweicloud.com/elasticsearch/?C=N&amp;O=D</a><br>logstash: <a href="https://mirrors.huaweicloud.com/logstash/?C=N&amp;O=D">https://mirrors.huaweicloud.com/logstash/?C=N&amp;O=D</a><br>kibana: <a href="https://mirrors.huaweicloud.com/kibana/?C=N&amp;O=D">https://mirrors.huaweicloud.com/kibana/?C=N&amp;O=D</a></p><p>步骤：1、解压</p><p>​           2、进入kibana-7.8.0-windows-x86_64文件夹下bin目录，启动 kibana.bat</p><p>​           3、访问IP：localhost:5601</p></blockquote><p>Kibana<a href="https://www.elastic.co/cn/downloads/kibana">下载</a></p><img src="/2021/03/09/es/image-20210309221846595.png" alt="image-20210309221846595" style="zoom:80%;"><img src="/2021/03/09/es/image-20210309235744268.png" alt="image-20210309235744268" style="zoom:80%;"><img src="/2021/03/09/es/image-20210310000002709.png" alt="image-20210310000002709" style="zoom:80%;"><blockquote><p>通过Kibana内置工具做测试</p></blockquote><img src="/2021/03/09/es/image-20210310000459682.png" alt="image-20210310000459682" style="zoom:50%;"><img src="/2021/03/09/es/image-20210310000710102.png" alt="image-20210310000710102" style="zoom:80%;"><blockquote><p>汉化Kibana</p><p>打开config下的文件kibana.yml，在后面加上  <em>i18n.locale: “zh-cn”</em>  ，重启Kibana，访问：localhost:5601</p></blockquote><img src="/2021/03/09/es/image-20210310001919867.png" alt="image-20210310001919867" style="zoom:80%;"><hr><h2 id="5、es核心概念理解"><a href="#5、es核心概念理解" class="headerlink" title="5、es核心概念理解"></a>5、es核心概念理解</h2><img src="/2021/03/09/es/image-20210310203606326.png" alt="image-20210310203606326" style="zoom:80%;"><blockquote><p>indices 索引 （对应数据库）</p><p>es是支持集群模式的，集群模式下每一个节点都代表一个es进程（我们自己下载启动的es就是一个节点），可放于不同的服务器上，每个节点都可以进行分片（默认是每个节点创建5个分片），每个分片上存储的就是索引，而索引就是文档（type-&gt;documents-&gt;fileds）的集合，也就是一段json。而分片对应主分片和复制分片，它两数据都是一样的，但存储在不同的节点下面，保证了万一一个节点挂掉，也不会影响数据的丢失。</p><p>什么是倒排索引？</p><p>在数据库里面我们是根据编号去获取数据的，比如说：现在有编号1、2、3，对应的数据有a、ab、abc。我们要查询含a的数据就要连续查询3此；而倒排索引是：a、b、c对应编号是123、23、3，查询a的时候直接就对应到了123</p></blockquote><img src="/2021/03/09/es/image-20210310205350660.png" alt="image-20210310205350660" style="zoom:80%;"><img src="/2021/03/09/es/image-20210310211634391.png" alt="image-20210310211634391" style="zoom:80%;"><blockquote><p>type 类型 （相当于数据库里面的表，在定义表的时候，我们首先要定义表有那些字段，是什么数据类型）</p></blockquote><img src="/2021/03/09/es/image-20210310204443758.png" alt="image-20210310204443758" style="zoom:80%;"><blockquote><p>documents 文档 （就是一条条的数据，对应数据库里面的行）</p></blockquote><img src="/2021/03/09/es/image-20210310204144425.png" alt="image-20210310204144425" style="zoom:80%;"><blockquote><p>ElasticSearch索引和Lucene索引对比  【一个es索引包含多个Lucene索引（片）】</p></blockquote><img src="/2021/03/09/es/image-20210310211901380.png" alt="image-20210310211901380" style="zoom:80%;"><hr><h2 id="6、分词器详解"><a href="#6、分词器详解" class="headerlink" title="6、分词器详解"></a>6、分词器详解</h2><h3 id="1、IK分词器"><a href="#1、IK分词器" class="headerlink" title="1、IK分词器"></a>1、IK分词器</h3><blockquote><p>什么是IK分词器?</p><p>就是把我们进行收索的内容进行拆分，这里用到的是ik分词器插件，ik提供 ik_smart 和 ik_max_word 两种分词算法，前者粗分，后者精分</p></blockquote><img src="/2021/03/09/es/image-20210310212831808.png" alt="image-20210310212831808" style="zoom:80%;"><blockquote><p>步骤：1、IK<a href="https://github.com/medcl/elasticsearch-analysis-ik/releases">分词器插件下载</a>，版本要对应</p><p>​           2、下载好后解压到elasticsearch-7.8.0的plugins文件夹下面</p><img src="/2021/03/09/es/image-20210310214434536.png" style="zoom:80%;"><p>​           3、重启es，观察ik插件是否加载</p><img src="/2021/03/09/es/image-20210310214805319.png" style="zoom:80%;"><p>​           4、利用bin目录下的elasticsearch-plugin.bat检查ik插件插件是否加载</p><img src="/2021/03/09/es/image-20210310215257516.png" alt="image-20210310215257516" style="zoom:80%;"><p>​           5、使用Kibana进行测试（RestFul风格）</p><p><em>基于ik插件的ik_smart分词算法</em>     _analyze表面分词器查询</p><img src="/2021/03/09/es/image-20210310221126361.png" alt="image-20210310221126361" style="zoom:80%;"><p><em>基于ik插件的ik_max_word分词算法</em></p><img src="/2021/03/09/es/image-20210310221424481.png" alt="image-20210310221424481" style="zoom:80%;"><p>​           6、当我们输入一些不连贯的词的时候，ik分词器会给我们划分成一个一个的，这个时候想避免可以在ik的confic文件中配置自己的 .dic文件。配置后重启es和Kibana</p><img src="/2021/03/09/es/image-20210310222610913.png" alt="image-20210310222610913" style="zoom:80%;"><img src="/2021/03/09/es/image-20210310223021469.png" alt="image-20210310223021469" style="zoom:80%;"><p><em>未配置前，分词：我夹额了大</em></p><img src="/2021/03/09/es/image-20210310222159694.png" alt="image-20210310222159694" style="zoom:80%;"><p><em>配置后，分词：我夹额了大</em></p><img src="/2021/03/09/es/image-20210310223154907.png" alt="image-20210310223154907" style="zoom:80%;"></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">//在java里面通过分词器获取分词    public List&lt;String&gt; getAnalyze(String text)            throws Exception    {        List&lt;String&gt; list = new ArrayList&lt;String&gt;();        text = text.length() &gt; 100 ? text.substring(0, 100) : text;        Request request = new Request("GET", "_analyze");        JSONObject entity = new JSONObject();        entity.put("analyzer", "ik_max_word");        entity.put("text", text);        request.setJsonEntity(entity.toJSONString());        Response response = this.client.getLowLevelClient().performRequest(request);        JSONObject tokens = JSONObject.parseObject(EntityUtils.toString(response.getEntity()));        JSONArray arrays = tokens.getJSONArray("tokens");        for (int i = 0; i &lt; arrays.size(); i++)        {            JSONObject obj = JSON.parseObject(arrays.getString(i));            list.add(obj.getString("token"));        }        return list;    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、自定义分词插件"><a href="#2、自定义分词插件" class="headerlink" title="2、自定义分词插件"></a>2、自定义分词插件</h3><blockquote><p>克隆下面</p><pre class="line-numbers language-http" data-language="http"><code class="language-http">https://gitee.com/LJH130168/analyzer.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h3 id="3、指定分词器"><a href="#3、指定分词器" class="headerlink" title="3、指定分词器"></a>3、指定分词器</h3><blockquote><p>settings是修改分片和副本数的。</p><p>mappings是修改字段和类型的，指定分词器</p><p><a href="http://www.javashuo.com/article/p-vmztdane-sa.html">好文章</a></p></blockquote><ol><li><p>elasticsearch设置默认分词器和字段指定分词器</p><blockquote><p>index的值只有三种（no，not_analyzed，analyzed）<br>no：不添加到索引<br>not_analyzed：添加到索引不分词<br>analyzed ： 添加到索引并分词</p><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/2.4/mapping-index.html">https://www.elastic.co/guide/en/elasticsearch/reference/2.4/mapping-index.html</a></p></blockquote><pre class="line-numbers language-json" data-language="json"><code class="language-json">#example onePUT news{  "settings": {    "index.analysis.analyzer.default.type": "ik_max_word"    }  },  "mappings": {    "_doc": {      "properties": {        "tags": {          "type":     "text",          "analyzer": "whitespace"        }      }    }  }}#example two{    "settings":{　　　　#settings是修改分片和副本数的           "number_of_shards":3,　　　　#分片为3           "number_of_replicas":0　　　　#副本数为0        },    "mappings":{　　　　#mappings是修改字段和类型的          "tvcount":{               "dynamic":"strict",                   "_all":{"enabled":false},                   "properties":{                   "tvname":{"type":"string","index":"analyzed","analyzer":"ik_max_word","search_analyzer": "ik_max_word"},　　　　　　　　　　　　　　　　　　如，string类型，analyzed索引，ik_max_word分词器                   "director":{"type":"string","index":"analyzed","analyzer":"ik_max_word","search_analyzer": "ik_max_word"},           "actor":{"type":"string","index":"analyzed","analyzer":"ik_max_word","search_analyzer": "ik_max_word"},             "allnumber":{"type":"string","index":"not_analyzed"},           "tvtype":{"type":"string","index":"analyzed","analyzer":"ik_max_word","search_analyzer": "ik_max_word"},           "description":{"type":"string","index":"analyzed","analyzer":"ik_max_word","search_analyzer": "ik_max_word"},           "pic":{"type":"string","index":"not_analyzed"}                   }          }        } }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>java创建mapping和setting</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.wenbronk.elasticsearch.usage.index;import com.wenbronk.elasticsearch.usage.highLevel.RestHighLevelClientParent;import org.elasticsearch.ElasticsearchException;import org.elasticsearch.action.ActionListener;import org.elasticsearch.action.admin.indices.create.CreateIndexRequest;import org.elasticsearch.action.admin.indices.create.CreateIndexResponse;import org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest;import org.elasticsearch.action.admin.indices.delete.DeleteIndexResponse;import org.elasticsearch.action.support.ActiveShardCount;import org.elasticsearch.action.support.IndicesOptions;import org.elasticsearch.common.settings.Settings;import org.elasticsearch.common.unit.TimeValue;import org.elasticsearch.common.xcontent.XContentBuilder;import org.elasticsearch.common.xcontent.XContentFactory;import org.elasticsearch.common.xcontent.XContentType;import org.elasticsearch.rest.RestStatus;import org.junit.jupiter.api.Test;import java.io.IOException;public class Index_1_Create extends RestHighLevelClientParent {    /**     * index 使用java客户端不好创建， 可以在kibana中进行创建     * 注意mapping一旦创建， 不可更改     */    @Test    public void createIndices() throws IOException {        CreateIndexRequest request = new CreateIndexRequest("twitter");        // add partition        request.source("{\n" +                "    \"settings\" : {\n" +                "        \"number_of_shards\" : 3,\n" +                "        \"number_of_replicas\" : 2\n" +                "    },\n" +                "    \"mappings\" : {\n" +                "        \"tweet\" : {\n" +                "            \"properties\" : {\n" +                "                \"message\" : { \"type\" : \"text\" }\n" +                "            }\n" +                "        }\n" +                "    },\n" +                "    \"aliases\" : {\n" +                "        \"twitter_alias\" : {}\n" +                "    }\n" +                "}", XContentType.JSON);        // 配置可选参数        request.timeout(TimeValue.timeValueMinutes(2));//        request.timeout("2m");        request.masterNodeTimeout(TimeValue.timeValueMinutes(1));//        request.masterNodeTimeout("1m");//        request.waitForActiveShards(2);        request.waitForActiveShards(ActiveShardCount.DEFAULT);        // 使用异步的方式创建        client.indices().createAsync(request, new ActionListener&lt;CreateIndexResponse&gt;() {            @Override            public void onResponse(CreateIndexResponse createIndexResponse) {                boolean acknowledged = createIndexResponse.isAcknowledged();                boolean shardsAcknowledged = createIndexResponse.isShardsAcknowledged();            }            @Override            public void onFailure(Exception e) {                System.out.println(e.getCause());            }        });    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>java动态指定mapping（映射）<a href="http://www.manongjc.com/detail/8-uyclzefvvvvlrlx.html">并指定分词器</a></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public void testAddIndex() throws IOException {      // 操作索引的对象      IndicesClient indices = client.indices();      // 创建索引的请求      CreateIndexRequest request = new CreateIndexRequest("ysx_course");      request.settings(Settings.builder().put("number_of_shards", "1").put("number_of_replicas", "0"));      // 创建映射      request.mapping("doc", "{\n" +              "                \"properties\": {\n" +              "                    \"description\": {\n" +              "                        \"type\": \"text\",\n" +              "                        \"analyzer\": \"ik_max_word\",\n" +              "                        \"search_analyzer\": \"ik_smart\"\n" +              "                    },\n" +              "                    \"name\": {\n" +              "                        \"type\": \"text\",\n" +              "                        \"analyzer\": \"ik_max_word\",\n" +              "                        \"search_analyzer\": \"ik_smart\"\n" +              "                    },\n" +              "\"pic\":{                    \n" +              "\"type\":\"text\",                        \n" +              "\"index\":false                        \n" +              "},                    \n" +              "                    \"price\": {\n" +              "                        \"type\": \"float\"\n" +              "                    },\n" +              "                    \"studymodel\": {\n" +              "                        \"type\": \"keyword\"\n" +              "                    },\n" +              "                    \"timestamp\": {\n" +              "                        \"type\": \"date\",\n" +              "                        \"format\": \"yyyy-MM‐dd HH:mm:ss||yyyy‐MM‐dd||epoch_millis\"\n" +              "                    }\n" +              "                }\n" +              "            }", XContentType.JSON);            // 执行创建操作      CreateIndexResponse response = indices.create(request);      // 得到响应      boolean b = response.isAcknowledged();      System.out.println(b);  }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Elasticsearch 理解mapping中的store属性</p><blockquote><p>默认情况下（store为no），对字段值进行索引以使其可搜索，但不存储它们 (store)。 这意味着可以查询该字段，但是无法检索原始字段值。在这里我们必须理解的一点是: 如果一个字段的mapping中含有store属性为true，那么有一个单独的存储空间为这个字段做存储，而且这个存储是独立于<code>_source</code>的存储的。它具有更快的查询。存储该字段会占用磁盘空间。如果需要从文档中提取（即在脚本中和聚合），它会帮助减少计算。在聚合时，具有store属性的字段会比不具有这个属性的字段快。 此选项的可能值为false和true。</p><p><a href="https://www.cnblogs.com/sanduzxcvbnm/p/12157453.html">好文章</a></p></blockquote></li></ol><hr><h2 id="7、Restful风格操作"><a href="#7、Restful风格操作" class="headerlink" title="7、Restful风格操作"></a>7、Restful风格操作</h2><img src="/2021/03/09/es/image-20210310223622886.png" alt="image-20210310223622886" style="zoom:80%;"><blockquote><p>基础测试：</p><p>1、创建索引</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">PUT /索引名/类型名/文档ID{请求体}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/2021/03/09/es/image-20210310224719369.png" alt="image-20210310224719369" style="zoom:80%;"><p>2、在es-head插件里直接查看创建好的索引</p><img src="/2021/03/09/es/image-20210310225047768.png" alt="image-20210310225047768" style="zoom:80%;"><p>3、看一下es定义fileds的数据类型 ==<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/keyword.html">官方文档</a>==</p><img src="/2021/03/09/es/image-20210310225411420.png" alt="image-20210310225411420" style="zoom:80%;"><p>4、上面没指定字段类型，下面来指定一下</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">PUT /qwe{  "mappings": {    "properties": {      "name":{        "type": "text"      },      "age":{        "type": "long"      },      "birthday":{        "type": "date"      }    }  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2021/03/09/es/image-20210310230535964.png" alt="image-20210310230535964" style="zoom:80%;"><img src="/2021/03/09/es/image-20210310230732553.png" alt="image-20210310230732553" style="zoom:80%;"><p>5、通过get请求获取创建的规则信息</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">GET /qwe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2021/03/09/es/image-20210310231153993.png" alt="image-20210310231153993" style="zoom:80%;"><p>6、通过 _doc 类型名，可以默认让es给我们指定相关字段的数据类型，如下：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">PUT /lujiahong/_doc/001{  "name":"陈奕迅",  "age":45,  "birthday":"1975-09-09"}GET /lujiahong/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2021/03/09/es/image-20210310232503562.png" alt="image-20210310232503562" style="zoom:80%;"><p>7、扩展命令</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">#获取当前es的健康状态GET _cat/health#获取当前es的相关信息GET _cat/indices?v#在Kibana里面dev_tool里面输入GET _cat/ 会跳出很多命令，ge<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2021/03/09/es/image-20210310233220681.png" alt="image-20210310233220681" style="zoom:80%;"><img src="/2021/03/09/es/image-20210310233314007.png" alt="image-20210310233314007" style="zoom:80%;"><p>8、修改索引</p><p><em>方法一</em>：还是用put提交方式，改变值，运行后会发现版本号变了，以及状态变为了update</p><img src="/2021/03/09/es/image-20210310234308449.png" alt="image-20210310234308449" style="zoom:80%;"><p><em>方法二</em>：采用post提交方式，文档id后面加上 _update</p><img src="/2021/03/09/es/image-20210310234840950.png" alt="image-20210310234840950" style="zoom:80%;"><img src="/2021/03/09/es/image-20210310235051388.png" alt="image-20210310235051388" style="zoom:80%;"><p>9、删除索引</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">#删除索引DELETE /索引名#删除索引下的文档DELETE /索引名/类型名/文档id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img src="/2021/03/09/es/image-20210310235717348.png" alt="image-20210310235717348" style="zoom:80%;"><img src="/2021/03/09/es/image-20210310235837907.png" alt="image-20210310235837907" style="zoom:80%;"><img src="/2021/03/09/es/image-20210311000018403.png" alt="image-20210311000018403" style="zoom:80%;"><img src="/2021/03/09/es/image-20210311000221338.png" alt="image-20210311000221338" style="zoom:80%;"><img src="/2021/03/09/es/image-20210311000355583.png" alt="image-20210311000355583" style="zoom:80%;"></blockquote><hr><h2 id="8、关于文档的基本操作"><a href="#8、关于文档的基本操作" class="headerlink" title="8、关于文档的基本操作"></a>8、关于文档的基本操作</h2><blockquote><p>基本操作：</p><p><strong>1、添加索引</strong>（在一个索引里面添加多个文档）<em>PUT /索引名/类型名/文档id</em>  类型名可以不写，默认 <em>_doc</em></p><pre class="line-numbers language-json" data-language="json"><code class="language-json">PUT /test/user/id01{  "name":"小王",  "age":23,  "birthday":"1998-09-09",  "tags":["吃饭","睡觉","打游戏"]}PUT /test/user/id02{  "name":"小美",  "age":22,  "birthday":"1999-10-03",  "tags":["化妆","睡觉","美容"]}PUT /test/user/id03{  "name":"小刚",  "age":25,  "birthday":"1997-06-06",  "tags":["健身","跑步","踢足球"]}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2021/03/09/es/image-20210311220425249.png" alt="image-20210311220425249" style="zoom:80%;"><img src="/2021/03/09/es/image-20210311220602973.png" alt="image-20210311220602973" style="zoom:80%;"><p><strong>2、查询索引</strong> </p><p>方式一： <em>GET /索引名</em>   为当前查询索引下的数据类型、创建时间等基本信息</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">GET /test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2021/03/09/es/image-20210311221541577.png" alt="image-20210311221541577" style="zoom:80%;"><p>方式二： <em>GET /索引名/类型名/文档id</em>  为当前查询索引下的指定的文档id所对应的数据数据</p><pre class="line-numbers language-none"><code class="language-none">GET /test/user/id01<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2021/03/09/es/image-20210311221659889.png" alt="image-20210311221659889" style="zoom:80%;"><p>方式三： <em>GET /索引名/类型名/_search?q=查询条件</em>  （_search代表搜索，q即为query代表查询）</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">#查询到指定查询条件的文档GET /test/user/_search?q=name:大王<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/2021/03/09/es/image-20210311224506647.png" alt="image-20210311224506647" style="zoom:80%;"><p><strong>3、更新索引</strong>  </p><p>方式一： <em>PUT /索引名/类型名/文档id{指定修改的类容,未指定的内容就会变为空}</em></p><pre class="line-numbers language-json" data-language="json"><code class="language-json">PUT /test/user/id01{  "name":"大王"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img src="/2021/03/09/es/image-20210311222719276.png" alt="image-20210311222719276" style="zoom:80%;"><img src="/2021/03/09/es/image-20210311223042097.png" alt="image-20210311223042097" style="zoom:80%;"><p>方式二： <em>POST /索引名/类型名/文档id/_update{指定修改的类容，而未指定的内容不会变为空}</em></p><pre class="line-numbers language-json" data-language="json"><code class="language-json">POST /test/user/id01/_update{  "doc":{    "name":"大王"  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2021/03/09/es/image-20210311223441471.png" alt="image-20210311223441471" style="zoom:80%;"></blockquote><hr><h2 id="9、es的复杂查询"><a href="#9、es的复杂查询" class="headerlink" title="9、es的复杂查询"></a>9、es的复杂查询</h2><p>es本来就是用来做全文检索的因此要求的功能肯定比sql语言五花八门，常见的es查询有：</p><p><em><strong>排序、分页、高亮、模糊、精准</strong></em></p><blockquote><p>现在索引 test 多加几条文档，方便复杂查询</p><img src="/2021/03/09/es/image-20210311230041094.png" alt="image-20210311230041094" style="zoom:80%;"><p><strong>方式一：<em>做查询匹配</em>（模糊）</strong>   最匹配（match）的最前面，根据分值确定</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">#查询语句GET /test/user/_search   #要查询的索引{                        #要查询的参数体json"query":{       #要查询的内容 "match": {           #匹配   "name":"王1"#字段。如果字段是数组，可以用空格隔开，来实现匹配查询 }}}#查询结果#! Deprecation: [types removal] Specifying types in search requests is deprecated.{"took" : 1,"timed_out" : false,"_shards" : { "total" : 1, "successful" : 1, "skipped" : 0, "failed" : 0},"hits" : {                     #hits在java里面对应一个map对象，也叫Hits "total" : {                  #获取的总量   "value" : 3,    #查询到的3条数据   "relation" : "eq"#关系是匹配相等的 }, "max_score" : 1.7466556, #查询到的文档都有一个分值，最大分值放在最前面，也就是权重 "hits" : [   {     "_index" : "test",     "_type" : "user",     "_id" : "id04",     "_score" : 1.7466556,     "_source" : {       "name" : "小王1",       "age" : 23,       "birthday" : "1998-09-09",       "tags" : [         "吃饭",         "睡觉",         "打游戏"       ]}},   {     "_index" : "test",     "_type" : "user",     "_id" : "id01",     "_score" : 0.57843524,     "_source" : {       "name" : "大王",       "age" : 23,       "birthday" : "1998-09-09",       "tags" : [         "吃饭",         "睡觉",         "打游戏"       ]}},   {     "_index" : "test",     "_type" : "user",     "_id" : "id05",     "_score" : 0.4889865,     "_source" : {       "name" : "小王2",       "age" : 23,       "birthday" : "1998-09-09",       "tags" : [         "吃饭",         "睡觉",         "打游戏"       ]}}]}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>方式二：查询我需要的字段</strong>    _source</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">GET /test/user/_search{"query":{ "match": {   "name":"王1" }},"_source":["name","age"]  #查询结果中的key也是_sourch,里面的value就是json字段，因此查询的时候我}                           #们指定我们要查询的字段name和age，那么结果中也就只有name和age的值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2021/03/09/es/image-20210311232403510.png" alt="image-20210311232403510" style="zoom:80%;"><p><strong>方式三：做排序</strong>    sort  order</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">GET /test/user/_search{"query":{ "match": {   "name":"王1" }},"_source":"age","sort":[              #排序 {   "age":{           #按年龄排序     "order":"asc"   #asc做升序排序。desc做降序排序   }}]}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>方式四：分页查询</strong>   from size</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">GET /test/user/_search{"query":{ "match": {   "name":"王1" }},"_source":"age","sort":[ {   "age":{     "order":"asc"   }}],"from":0,      #相当于sql语句中limit中的第一个参数"size":2       #相当于sql语句中limit中的第二个参数}#form 和 size 在java中给定就是对应到 new 对象().form<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>**方式五：布尔值查询 ** must  must_not  should 实现多条件查询</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">GET /test/user/_search{"query":{ "bool": {   "must": [             #must相当于sql语句中的and，要求name和age都要匹配的文档     {                   #must_not相当于sql语句中的!=，不满足满足name和age 的文档       "match": {        #should相当于sql语句中的or，满足name和age其中一个即可的文档         "name": "大王"       }     },     {       "match": {         "age": "23"       }}]}}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>**方式五：过滤器 **  filter</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">GET /test/user/_search{"query":{ "bool": {   "must": [     {       "match": {         "name": "王"       }}],   "filter": [         #过滤     {       "range": {      #范围         "age": {      #指定年龄字段           "gte": 10,  #大于等于10岁  gt-&gt;大于           "lte": 20   #小于等于20岁  lt-&gt;小于         }}}]}}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>**方式六：精确查询 **   term</p><img src="/2021/03/09/es/image-20210312001840213.png" alt="image-20210312001840213" style="zoom:80%;"><pre class="line-numbers language-json" data-language="json"><code class="language-json">#如果通过mapping定义了字段的数据类型，定义为text数据类型的字段支持分词查询，定义为keyword数据类型的字段不支持分词查询GET /test/user/_search  {                        "query":{        "term": {      #term对于keyword数据类型的字段，不会分词（为王和刚），直接查询（王刚）匹配的文档   "name":"王刚" }}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>方式七：多个值匹配精确查询</strong>   </p><pre class="line-numbers language-json" data-language="json"><code class="language-json">POST /test/_search{  "query": {    "bool": {      "should": [        {          "term": {            "age": 22          }        },         {          "term": {#精确匹配多个值的查询            "age": 23          }}] }}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <img src="/2021/03/09/es/image-20210314171941377.png" alt="image-20210314171941377" style="zoom:80%;"><p><strong>高亮查询！</strong></p><pre class="line-numbers language-json" data-language="json"><code class="language-json">GET /test/user/_search{  "query":{    "match": {      "name": "王"    }  },  "highlight":{    #highlight开启高亮模式，对于java中的一个对象    "pre_tags": "&lt;p class='key' style='color:red'&gt;", #自定义高亮模式标签    "post_tags": "&lt;p/&gt;", #指定自定义的标签    "fields": {  #指定高亮模式的字段，所查询的字段数据默认会被em标签诠释而高亮，否则以自定义标签诠释      "name": {}    }}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2021/03/09/es/image-20210314172807498.png" alt="image-20210314172807498" style="zoom:80%;"></blockquote><hr><h2 id="10、SpringBoot集成es"><a href="#10、SpringBoot集成es" class="headerlink" title="10、SpringBoot集成es"></a>10、SpringBoot集成es</h2><p>es客户端（Restful风格）<a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/master/java-rest-high.html">官方文档</a></p><pre class="line-numbers language-http" data-language="http"><code class="language-http">https://www.elastic.co/guide/en/elasticsearch/client/java-rest/master/java-rest-high.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>按官方文档进行以下步骤：</p><p>步骤一：找maven<a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/master/java-rest-high-getting-started-maven.html">依赖</a></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.elasticsearch.client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>elasticsearch-rest-high-level-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>8.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>步骤二：<a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/master/java-rest-high-getting-started-initialization.html">找对象</a></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">RestHighLevelClient client = new RestHighLevelClient(        RestClient.builder(                new HttpHost("localhost", 9200, "http"),                new HttpHost("localhost", 9201, "http"))); //集群的话构建多个client.close();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2021/03/09/es/image-20210314175319480.png" alt="image-20210314175319480" style="zoom:80%;"><p>步骤三：分析类中的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">//es配置文件@Configurationpublic class ElasticSearchConfig {    @Bean    public RestHighLevelClient restHighLevelClient(){        RestHighLevelClient client = new RestHighLevelClient(                RestClient.builder(                        new HttpHost("localhost", 9200, "http")));         return client;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2021/03/09/es/image-20210314182003189.png" alt="image-20210314182003189" style="zoom:80%;"><img src="/2021/03/09/es/image-20210314184738125.png" alt="image-20210314184738125" style="zoom:80%;"></blockquote><hr><h2 id="11、关于索引API的操作"><a href="#11、关于索引API的操作" class="headerlink" title="11、关于索引API的操作"></a>11、关于索引API的操作</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">@SpringBootTestclass EsApiApplicationTests {@Autowired@Qualifier("restHighLevelClient")RestHighLevelClient client;//1、测试索引的创建 形如devtool中的：PUT /lujiahong@Testvoid testCreateIndex() throws IOException {//1、创建索引请求 CreateIndexRequest对象CreateIndexRequest request = new CreateIndexRequest("lujiahong");//2、客户端执行请求 IndicesClient执行请求获得响应CreateIndexResponseIndicesClient indicesClient = client.indices();    CreateIndexResponse response = indicesClient.create(request, RequestOptions.DEFAULT);System.out.println(response.isAcknowledged());}//2、测试获取索引，只能判断该索引存不存在 形如devtool中的：GET /lujiahong@Testvoid testExistIndex() throws IOException {//1、获取索引请求 GetIndexRequest对象GetIndexRequest request = new GetIndexRequest("lujiahong");//2、判断该索引是否存在boolean exists = client.indices().exists(request,RequestOptions.DEFAULT);System.out.println(exists);}//3、测试删除索引 形如devtool中的：DELETE /lujiahong@Testvoid testDeleteIndex() throws IOException {//1、删除索引请求 DeleteIndexRequestDeleteIndexRequest request = new DeleteIndexRequest("lujiahong");//2、客户端执行请求 IndicesClient执行请求获得响应CAcknowledgedResponseAcknowledgedResponse response = client.indices().delete(request,RequestOptions.DEFAULT);System.out.println(response.isAcknowledged());}//4、测试添加文档 形如devtool中的：PUT /lujiahong/_doc/文档id@Testvoid testAddDoc() throws IOException {//1、创建User对象User user = new User("小王",22);//2、创建请求IndexRequest request = new IndexRequest("lujiahong");//3、设置文档idrequest.id("001");//4、超时设置request.timeout(TimeValue.timeValueSeconds(1));//5、将数据放入请求json格式request.source(JSON.toJSONString(user), XContentType.JSON);//6、客户端发送请求,获取响应结果IndexResponse response = client.index(request,RequestOptions.DEFAULT);//7、对应命令返回的状态System.out.println(response.status());//8、对应命令返回的数据System.out.println(response.toString());}//5、测试获取文档 形如devtool中的：GET /lujiahong/_doc/001@Testvoid testExistDoc() throws IOException {//1、获取文档请求 GetRequest对象GetRequest request = new GetRequest("lujiahong","001");//2、此设置不获取返回的_source的上下文request.fetchSourceContext(new FetchSourceContext(false));//3、判断该文档是否存在boolean exists = client.exists(request,RequestOptions.DEFAULT);//4、获取文档信息GetResponse response = client.get(request,RequestOptions.DEFAULT);System.out.println(exists);System.out.println(response);System.out.println(response.getSourceAsString());}//5、测试修改文档 形如devtool中的：UPDATE /lujiahong/_doc/001@Testvoid testUpdateDoc() throws IOException {//1、获取要修改文档请求 UpdateRequest对象UpdateRequest request = new UpdateRequest("lujiahong","001");//2、超时设置request.timeout("1s");//3、更新对象User user = new User("大王",33);//4、更新数据放入请求，XContentType.JSON告诉它我传入的是一个json数据request.doc(JSON.toJSONString(user),XContentType.JSON);//5、获取响应UpdateResponse response = client.update(request,RequestOptions.DEFAULT);System.out.println(response.status());}//6、测试删除文档 形如devtool中的：DELETE /lujiahong/_doc/001@Testvoid testDeleteDoc() throws IOException {//1、获取求 DeleteRequest对象DeleteRequest request = new DeleteRequest("lujiahong","001");//2、超时设置，超过1s就不执行删除操作了request.timeout("1s");//3、获取响应DeleteResponse response = client.delete(request,RequestOptions.DEFAULT);System.out.println(response.status());}//7、批量添加文档@Testvoid testBulkRequest() throws IOException {//1、获取求 BulkRequest对象BulkRequest request = new BulkRequest("lujiahong");//2、超时设置，超过10s就不执行删除操作了request.timeout("10s");//3、集合数据List&lt;User&gt; list = new ArrayList&lt;&gt;();for(int i=0; i&lt;10; i++){list.add(new User("大鳄"+i,20+i));}//4、添加数据        //这里的es中的_id,为方便后期的修改和删除指定文档，若es的索引里面存的是数据库里面的数据，建议把_id设置为所添加数据的数据库主键idfor(int i=0; i&lt;list.size(); i++){request.add(new IndexRequest("lujiahong").id(String.valueOf(i+1))//id可以不指定，会随机生成id.source(JSON.toJSONString(list.get(i)), XContentType.JSON));}//3、获取响应BulkResponse response = client.bulk(request,RequestOptions.DEFAULT);System.out.println(response.hasFailures());}//8、批量查看文档@Testvoid testSearchRequest() throws IOException {//1、获取求 SearchRequest对象SearchRequest request = new SearchRequest("lujiahong");//2、构建搜索条件SearchSourceBuilder builder = new SearchSourceBuilder();//精确匹配，通过工具类QueryBuilders来实现，详细查看文档https://blog.csdn.net/qq_28114159/article/details/106359213TermQueryBuilder termQueryBuilder = QueryBuilders.termQuery("name","大");builder.query(termQueryBuilder);//分页builder.from(0).size(5);builder.timeout(new TimeValue(60, TimeUnit.SECONDS));//3、把查询条件放入requestrequest.source(builder);//4、获取响应SearchResponse response = client.search(request,RequestOptions.DEFAULT);SearchHits value = response.getHits();System.out.println(JSON.toJSONString(value));for(SearchHit documentFields:value.getHits()){System.out.println(documentFields.getSourceAsMap());}}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1、测试创建索引"><a href="#1、测试创建索引" class="headerlink" title="1、测试创建索引"></a>1、测试创建索引</h3><img src="/2021/03/09/es/image-20210314190235804.png" alt="image-20210314190235804" style="zoom:80%;"><img src="/2021/03/09/es/image-20210314190412982.png" alt="image-20210314190412982" style="zoom:80%;"><h3 id="2、测试获取索引"><a href="#2、测试获取索引" class="headerlink" title="2、测试获取索引"></a>2、测试获取索引</h3><img src="/2021/03/09/es/image-20210314191234196.png" alt="image-20210314191234196" style="zoom:80%;"><h3 id="3、测试删除索引"><a href="#3、测试删除索引" class="headerlink" title="3、测试删除索引"></a>3、测试删除索引</h3><img src="/2021/03/09/es/image-20210314191928980.png" alt="image-20210314191928980" style="zoom:80%;"><img src="/2021/03/09/es/image-20210314192039887.png" alt="image-20210314192039887" style="zoom:80%;"><hr><h2 id="12、关于文档API的操作"><a href="#12、关于文档API的操作" class="headerlink" title="12、关于文档API的操作"></a>12、关于文档API的操作</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">//引入User实体类@Data@AllArgsConstructor@NoArgsConstructorpublic class User {    private String name;    private int age;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--es存入的是json格式数据，引入阿里巴巴fastjson--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.75<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1、测试创建文档"><a href="#1、测试创建文档" class="headerlink" title="1、测试创建文档 "></a>1、测试创建文档 <img src="/2021/03/09/es/image-20210314195351985.png" alt="image-20210314195351985" style="zoom:80%;"></h3><img src="/2021/03/09/es/image-20210314195541466.png" alt="image-20210314195541466" style="zoom:80%;"><h3 id="2、测试查看文档"><a href="#2、测试查看文档" class="headerlink" title="2、测试查看文档"></a>2、测试查看文档</h3><img src="/2021/03/09/es/image-20210314202058769.png" alt="image-20210314202058769" style="zoom:80%;"><h3 id="3、测试修改文档"><a href="#3、测试修改文档" class="headerlink" title="3、测试修改文档"></a>3、测试修改文档</h3><img src="/2021/03/09/es/image-20210314203108835.png" alt="image-20210314203108835" style="zoom:80%;"><h3 id="4、测试删除文档"><a href="#4、测试删除文档" class="headerlink" title="4、测试删除文档"></a>4、测试删除文档</h3><img src="/2021/03/09/es/image-20210314203531089.png" alt="image-20210314203531089" style="zoom:80%;"><h3 id="5、测试批量添加文档"><a href="#5、测试批量添加文档" class="headerlink" title="5、测试批量添加文档"></a>5、测试批量添加文档</h3><img src="/2021/03/09/es/image-20210314211009928.png" alt="image-20210314211009928" style="zoom:80%;"><h3 id="6、测试批量查看文档"><a href="#6、测试批量查看文档" class="headerlink" title="6、测试批量查看文档"></a>6、测试批量查看文档</h3><p>/精确匹配，通过工具类QueryBuilders来实现，<a href="https://blog.csdn.net/qq_28114159/article/details/106359213">详细查看文档</a></p><pre class="line-numbers language-HTTP" data-language="HTTP"><code class="language-HTTP">https://blog.csdn.net/qq_28114159/article/details/106359213<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2021/03/09/es/image-20210314214229930.png" alt="image-20210314214229930" style="zoom:80%;"><hr><h2 id="13、实战"><a href="#13、实战" class="headerlink" title="13、实战"></a>13、实战</h2><h3 id="1、项目搭建"><a href="#1、项目搭建" class="headerlink" title="1、项目搭建"></a>1、项目搭建</h3><h3 id="2、爬虫"><a href="#2、爬虫" class="headerlink" title="2、爬虫"></a>2、爬虫</h3><blockquote><p>爬虫——爬取数据（获取请求返回的页面信息，筛选出我们想要的数据就可以了），java中通过jsoup包，导入下方依赖即可</p></blockquote><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--解析网页用jsoup，解析视频用tika--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.jsoup<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jsoup<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.10.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">/** * 把爬取的数据封装成一个对象 */@Data@AllArgsConstructor@NoArgsConstructorpublic class Content {    private String title;    private String img;    private String price;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">/** * 网页解析工具类 */@Componentpublic class HtmlParseUtil {    public static &lt;element&gt; void main(String[] args) throws Exception {        //搜索关于java的网页       HtmlParseUtil.parseJdHtml("java").forEach(System.out::println);    }    public static List&lt;Content&gt; parseJdHtml(String keywords) throws Exception {        //获得请求：        //1、请求地址        String requestURL = "https://search.jd.com/Search?keyword="+keywords;        //2、解析网页(Jsoup返回的Document就是浏览器中的Document对象，满足js里面的所有用法)        Document document =  Jsoup.parse(new URL(requestURL),30000);        //3、获取当前浏览器里面数据（id名从浏览器开发者工具获取，下同）        Element element = document.getElementById("J_goodsList");        //4、获取所有的li元素        Elements elements = element.getElementsByTag("li");        //5、获取元素中的内容        List&lt;Content&gt; list = new ArrayList&lt;&gt;();        for(Element el:elements){            //关于图片特别多的网站，所有的图片都是延迟加载的！source-data-lazy-img            String img = el.getElementsByTag("img").eq(0).attr("data-lazy-img");            String price = el.getElementsByClass("p-price").eq(0).text();            String title = el.getElementsByClass("p-name").eq(0).text();            list.add(new Content(title,img,price));        }        return list;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2021/03/09/es/image-20210315010642946.png" alt="image-20210315010642946" style="zoom:80%;"><h3 id="3、业务编写"><a href="#3、业务编写" class="headerlink" title="3、业务编写"></a>3、业务编写</h3><blockquote><p>ContentService</p><p>//解析文档批量放入es索引</p><p>Boolean parseContent(String keywords)    </p><p>//从es索引中读取文档</p><p>List&lt;Map&lt;String,Object&gt;&gt; searchPage(String keyWords,Integer pageNo,Integer pageSize) </p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">/** * 业务编写 */@Servicepublic class ContentService {    @Autowired    @Qualifier("restHighLevelClient")    RestHighLevelClient client;    //1、解析数据放入es索引中    public Boolean parseContent(String keywords) throws Exception {        //创建索引        CreateIndexRequest indexRequest = new CreateIndexRequest("jd_list");        CreateIndexResponse indexResponse = client.indices().create(indexRequest, RequestOptions.DEFAULT);        System.out.println("==================="+indexResponse.isAcknowledged());        //爬取keywords数据        List&lt;Content&gt; list = HtmlParseUtil.parseJdHtml(keywords);        //查询数据放入es中        BulkRequest bulkRequest = new BulkRequest();        bulkRequest.timeout("2m");        //向es索引jd_list中添加文档         for (int i = 0; i &lt; list.size() ; i++) {             bulkRequest.add(new IndexRequest("jd_list").id(String.valueOf(i+1)).source(JSON.toJSONString(list.get(i)), XContentType.JSON));        }        BulkResponse bulkResponses = client.bulk(bulkRequest,RequestOptions.DEFAULT);         return !bulkResponses.hasFailures();    }    //2、获取所解析数据实现搜索功能    public List&lt;Map&lt;String,Object&gt;&gt; searchPage(String keyWords,Integer pageNo,Integer pageSize) throws IOException {        //条件搜索        SearchRequest searchRequest = new SearchRequest("jd_list");        SearchSourceBuilder builder = new SearchSourceBuilder();        //精准匹配        TermQueryBuilder termQueryBuilder  = QueryBuilders.termQuery("title",keyWords);        builder.query(termQueryBuilder);        builder.from(pageNo==null?1:pageNo).size(pageSize==null?5:pageSize);        builder.timeout(new TimeValue(60, TimeUnit.SECONDS));        //执行搜索        searchRequest.source(builder);        SearchResponse searchResponse = client.search(searchRequest,RequestOptions.DEFAULT);        //解析结果        List&lt;Map&lt;String,Object&gt;&gt; list = new ArrayList&lt;&gt;();        for (SearchHit documentFields : searchResponse.getHits().getHits()) {            list.add(documentFields.getSourceAsMap());        }        return list;    }         //3、获取所解析数据实现搜索功能——高亮搜索字段    public List&lt;Map&lt;String,Object&gt;&gt; searchPageHighlighter(String keyWords,Integer pageNo,Integer pageSize) throws IOException {        //条件搜索        SearchRequest searchRequest = new SearchRequest("jd_list");        SearchSourceBuilder builder = new SearchSourceBuilder();        //精准匹配        TermQueryBuilder termQueryBuilder  = QueryBuilders.termQuery("title",keyWords);        builder.query(termQueryBuilder);        builder.from(pageNo==null?1:pageNo).size(pageSize==null?5:pageSize);        builder.timeout(new TimeValue(60, TimeUnit.SECONDS));        //高亮        HighlightBuilder highlighterBuilder = new HighlightBuilder();        highlighterBuilder.field("title");        highlighterBuilder.requireFieldMatch(false);//多个高亮关闭，只显示一个        highlighterBuilder.preTags("&lt;span style='color:red'&gt;");//自定义标签前缀        highlighterBuilder.postTags("&lt;/span&gt;");//自定义标签后缀        builder.highlighter(highlighterBuilder);        //执行搜索        searchRequest.source(builder);        SearchResponse searchResponse = client.search(searchRequest,RequestOptions.DEFAULT);        //解析结果        List&lt;Map&lt;String,Object&gt;&gt; list = new ArrayList&lt;&gt;();        for (SearchHit documentFields : searchResponse.getHits().getHits()) {            //获取高亮的字段并解析            Map&lt;String, HighlightField&gt; highlightFields = documentFields.getHighlightFields();            HighlightField title = highlightFields.get("title");            Map&lt;String,Object&gt; sourceAsMap = documentFields.getSourceAsMap();//原来字段            if(null!=title){//遍历的文档里面，如果字段为title的值包含高亮搜索的关键字，则将该关键字替换为高亮的字段                Text[] fragments = title.fragments();                String newTitle="";                for (Text fragment : fragments) {                    newTitle+=fragment;                }                sourceAsMap.put("title",newTitle);//高亮字段替换原来字段            }            list.add(sourceAsMap);        }        return list;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>ContentController</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RestControllerpublic class ContentController {    @Autowired    private ContentService service;    //解析关键字keywords的网页数据（文档），批量放入es索引jd_list,(爬取数据到es中)    @GetMapping("/parse/{keywords}")    public Boolean parse(@PathVariable String keywords) throws Exception {        return service.parseContent(keywords);    }    //按title中含有关键字keywords的文档从es索引jd_list分页查询    @GetMapping("/search/{keywords}/{pageNo}/{pageSize}")    public List&lt;Map&lt;String, Object&gt;&gt; parse(@PathVariable String keywords,                                           @PathVariable Integer pageNo,                                           @PathVariable Integer pageSize) throws Exception {        return service.searchPage(keywords,pageNo,pageSize);    }         //实现高亮    @GetMapping("/searchHighlighter/{keywords}/{pageNo}/{pageSize}")    public List&lt;Map&lt;String, Object&gt;&gt; parseHighlighter(@PathVariable String keywords,                                           @PathVariable Integer pageNo,                                           @PathVariable Integer pageSize) throws Exception {        return service.searchPageHighlighter(keywords,pageNo,pageSize);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、前后端交互"><a href="#4、前后端交互" class="headerlink" title="4、前后端交互"></a>4、前后端交互</h3><p>这里采用的是Vue前后端分离</p><img src="/2021/03/09/es/image-20210315233404656.png" alt="image-20210315233404656" style="zoom:80%;"><blockquote><p>随便一个文件夹下cmd输入命令npm install vue和npm install axios获取vue.min.js和xios.min.js，前提安装好了Node.js,因为Vue基于它。把下载好的两个js文件放在static文件夹下，在templates的index.html里面引入即可</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/1999/xhtml<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>lujiahong<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>keyword<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>input<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click.prevent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>searchKey1<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>搜索<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click.prevent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>searchKey2<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>高亮搜索<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>result in results<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token style-attr"><span class="token attr-name">STYLE</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token style language-css"><span class="token property">border</span><span class="token punctuation">:</span> 1px red solid<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token property">display</span><span class="token punctuation">:</span>flex<span class="token punctuation">;</span><span class="token property">flex-flow</span><span class="token punctuation">:</span> column wrap</span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>result.img<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>result.title<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>price<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{result.price}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/js/axios.min.js}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/js/vue.min.js}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token operator">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>        data<span class="token operator">:</span><span class="token punctuation">{</span>            keyword<span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token comment">//搜索关键字</span>            results<span class="token operator">:</span><span class="token string">""</span> <span class="token comment">//搜索结果</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token function">searchKey1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">const</span> keyword <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>keyword<span class="token punctuation">;</span>                <span class="token keyword">const</span> pageNo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">const</span> pageSize <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>                <span class="token comment">//对接后端接口</span>                axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">search/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>keyword<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>pageNo<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>pageSize<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>results<span class="token operator">=</span>res<span class="token punctuation">.</span>data<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">searchKey2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">const</span> keyword <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>keyword<span class="token punctuation">;</span>                <span class="token keyword">const</span> pageNo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">const</span> pageSize <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>                axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">searchHighlighter/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>keyword<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>pageNo<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>pageSize<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>results<span class="token operator">=</span>res<span class="token punctuation">.</span>data<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>搜索java，获取到es存放好已经爬取的数据</p></blockquote><img src="/2021/03/09/es/image-20210315233626542.png" alt="image-20210315233626542" style="zoom:80%;"><h3 id="5、关键字高亮显示"><a href="#5、关键字高亮显示" class="headerlink" title="5、关键字高亮显示"></a>5、关键字高亮显示</h3><blockquote><p>ContentService里面添加高亮设置和获取高亮字段替换原来字段</p></blockquote><img src="/2021/03/09/es/image-20210316004612244.png" alt="image-20210316004612244" style="zoom:80%;"><img src="/2021/03/09/es/image-20210316005329704.png" alt="image-20210316005329704" style="zoom:80%;"><blockquote><p>搜索vue</p></blockquote><img src="/2021/03/09/es/image-20210316005019447.png" alt="image-20210316005019447" style="zoom:80%;">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序开发</title>
      <link href="/2021/03/06/wei-xin-xiao-cheng-xu-kai-fa/"/>
      <url>/2021/03/06/wei-xin-xiao-cheng-xu-kai-fa/</url>
      
        <content type="html"><![CDATA[<p><a href="https://huke88.com/course/26116.html">视频</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>依赖和配置文件</title>
      <link href="/2021/03/05/yi-lai-he-pei-zhi-wen-jian/"/>
      <url>/2021/03/05/yi-lai-he-pei-zhi-wen-jian/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="SpringBoot常用依赖和配置文件"><a href="#SpringBoot常用依赖和配置文件" class="headerlink" title="SpringBoot常用依赖和配置文件"></a>SpringBoot常用依赖和配置文件</h1><hr><h4 id="项目打包"><a href="#项目打包" class="headerlink" title="项目打包"></a>项目打包</h4><blockquote><p>xml</p></blockquote><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>defaultGoal</span><span class="token punctuation">&gt;</span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>defaultGoal</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginManagement</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-compiler- plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">&gt;</span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">&gt;</span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven- plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mainClass</span><span class="token punctuation">&gt;</span></span>com.example.project.module.MainClass<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mainClass</span><span class="token punctuation">&gt;</span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">&gt;</span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">&gt;</span></span>                         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">&gt;</span></span>                             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">&gt;</span></span>repackage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">&gt;</span></span>                         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">&gt;</span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">&gt;</span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">&gt;</span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginManagement</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h4><table><thead><tr><th>组件</th></tr></thead><tbody><tr><td>mybatis</td></tr><tr><td>mybatis-plus</td></tr><tr><td>hibernate</td></tr></tbody></table><h5 id="mybtis"><a href="#mybtis" class="headerlink" title="mybtis"></a><em>mybtis</em></h5><blockquote><p><a href="https://blog.csdn.net/zhangjinwei417/article/details/92823438">xml</a></p></blockquote><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--阿里连接池--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.1.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>yaml</p></blockquote><img src="/2021/03/05/yi-lai-he-pei-zhi-wen-jian/image-20210303011758473.png" style="zoom:80%;"><blockquote><p>properties</p></blockquote><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">mybatis.type-aliases-package=com.lujiahong.pojomybatis.mapper-locations=classpath:mapper/*.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>java-dao</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Mapper@Repositorypublic interface UserMapper {    User queryUserByName(String name);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>dao.xml</p></blockquote><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.lujiahong.mapper.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryUserByName<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.lujiahong.pojo.User<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        select * from user where name = #{name}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>java-service</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">public interface UserService {    User queryUserByName(String name);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>java-serviceImpl</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Servicepublic class UserServiceImpl implements UserService {    @Autowired    UserMapper userMapper;    @Override    public User queryUserByName(String name) {        return userMapper.queryUserByName(name);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="mybtis-plus"><a href="#mybtis-plus" class="headerlink" title="mybtis-plus"></a><em>mybtis</em>-<em>plus</em></h5><blockquote><p>xml</p></blockquote><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--mybatis-plus的依赖--&gt;</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.4.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--逆向工程所需的依赖--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-plus-generator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.4.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.velocity<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>velocity-engine-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--需要打印sql语句在控制台再引用下面依赖--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.3.8.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>yaml</p></blockquote><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">mybatis-plus:  typeAliasesPackage: com.公司名.项目名.实体包configuration:  #SpringBoot+MyBatis-plus如何配置log4j日志输出（sql），需引入log4j和logging依赖  log-impl: org.apache.ibatis.logging.stdout.StdOutImpl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>java-entity</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Data@TableName("user")@AllArgsConstructor@NoArgsConstructorpublic class UserDO {    @TableId(value = "u_id", type = IdType.AUTO)    private String userId;    @TableField("u_phone")    private String phone;    @TableField("u_pwd")    private String pwd;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>dao.xml</p></blockquote><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.project.dao.IRoleDao<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>roleIdMap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        pk_id,        r_name,        r_describe    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>roleMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>RoleBean<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>roleId<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pk_id<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>roleName<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>r_name<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>roleDescribe<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>r_describe<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addRole<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        insert into t_role values(null,#{roleName},#{roleDescribe})    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>delRole<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        delete from t_role where pk_id = #{roleId}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateRole<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        update t_role set r_name = #{roleName},r_describe = #{roleDescribe} where pk_id = #{roleId}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>findByRoleId<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>roleMap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        select <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>roleIdMap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">&gt;</span></span> from t_role where pk_id = #{roleId}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>findByItem<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>roleMap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        select <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>roleIdMap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">&gt;</span></span> from t_role where 1=1        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>choose == <span class="token punctuation">'</span>角色名<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            and r_name like concat(concat('%',#{info}),'%')        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>choose == <span class="token punctuation">'</span>角色描述<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            and r_describe like concat(concat('%',#{info}),'%')        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkRoleName<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>roleMap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        select <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>roleIdMap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">&gt;</span></span> from t_role where r_name = #{roleName}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>java-dao</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">public interface UserDao extends BaseMapper&lt;UserDO&gt; {}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>java-service</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">public interface UserService extends IService&lt;UserDO&gt; {}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>java-serviceIpml</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Servicepublic class UserServiceImpl extends ServiceImpl&lt;UserDao, UserDO&gt; implements UserService {    @Resource    private UserDao userDao;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>java-逆向工程</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class CodeGenerator {    /**     * 读取控制台内容     */    public static String scanner(String tip) {        Scanner scanner = new Scanner(System.in);        StringBuilder help = new StringBuilder();        help.append("请输入" + tip + "：");        System.out.println(help.toString());        if (scanner.hasNext()) {            String ipt = scanner.next();            if (StringUtils.isNotBlank(ipt)) {                return ipt;            }        }        throw new MybatisPlusException("请输入正确的" + tip + "！");    }    public static void main(String[] args) {        // 代码生成器        AutoGenerator mpg = new AutoGenerator();        // 全局配置        GlobalConfig gc = new GlobalConfig();        String projectPath = System.getProperty("user.dir");        System.out.println(projectPath);        gc.setServiceName("%sService");        gc.setMapperName("%sDAO");        gc.setEntityName("%sDO");//        ---------------------------------------------------------------------------        gc.setOutputDir(projectPath + "/image-upload-back/src/main/java");        gc.setAuthor("bdk");        gc.setOpen(false);        // gc.setSwagger2(true); 实体属性 Swagger2 注解        mpg.setGlobalConfig(gc);        // 数据源配置        DataSourceConfig dsc = new DataSourceConfig();//        ---------------------------------------------------------------------------        dsc.setUrl("jdbc:mysql://localhost:6789/shiro?useUnicode=true&amp;useSSL=false&amp;characterEncoding=utf8");        // dsc.setSchemaName("public");        dsc.setDriverName("com.mysql.cj.jdbc.Driver");        dsc.setUsername("root");        dsc.setPassword("lovo");        mpg.setDataSource(dsc);        // 包配置        PackageConfig pc = new PackageConfig();//        pc.setModuleName(scanner("模块名"));//        ---------------------------------------------------------------------------        pc.setParent("com.lujiahong.imageupload");        pc.setMapper("dao");        pc.setEntity("model.ObjDO");        mpg.setPackageInfo(pc);        // 自定义配置        InjectionConfig cfg = new InjectionConfig() {            @Override            public void initMap() {                // to do nothing            }        };        // 如果模板引擎是 freemarker//        String templatePath = "/templates/mapper.xml.ftl";        // 如果模板引擎是 velocity        String templatePath = "/templates/mapper.xml.vm";        // 自定义输出配置        List&lt;FileOutConfig&gt; focList = new ArrayList&lt;&gt;();        // 自定义配置会被优先输出        focList.add(new FileOutConfig(templatePath) {            @Override            public String outputFile(TableInfo tableInfo) {                // 自定义输出文件名 ， 如果你 Entity 设置了前后缀、此处注意 xml 的名称会跟着发生变化！！//      ---------------------------------------------------------------------------                return projectPath + "/image-upload-back/src/main/resources/mapper/"                        + tableInfo.getEntityName() + StringPool.DOT_XML;            }        });        /*        cfg.setFileCreate(new IFileCreate() {            @Override            public boolean isCreate(ConfigBuilder configBuilder, FileType fileType, String filePath) {                // 判断自定义文件夹是否需要创建                checkDir("调用默认方法创建的目录，自定义目录用");                if (fileType == FileType.MAPPER) {                    // 已经生成 mapper 文件判断存在，不想重新生成返回 false                    return !new File(filePath).exists();                }                // 允许生成模板文件                return true;            }        });        */        cfg.setFileOutConfigList(focList);        mpg.setCfg(cfg);        // 配置模板        TemplateConfig templateConfig = new TemplateConfig();        // 配置自定义输出模板        //指定自定义模板路径，注意不要带上.ftl/.vm, 会根据使用的模板引擎自动识别        // templateConfig.setEntity("templates/entity2.java");        // templateConfig.setService();        // templateConfig.setController();        templateConfig.setXml(null);        mpg.setTemplate(templateConfig);        // 策略配置        StrategyConfig strategy = new StrategyConfig();        strategy.setNaming(NamingStrategy.underline_to_camel);        strategy.setColumnNaming(NamingStrategy.underline_to_camel);//        strategy.setSuperEntityClass("你自己的父类实体,没有就不用设置!");        strategy.setEntityLombokModel(true);        strategy.setRestControllerStyle(true);        // 公共父类//        strategy.setSuperControllerClass("你自己的父类控制器,没有就不用设置!");        // 写于父类中的公共字段        strategy.setSuperEntityColumns("id");        strategy.setInclude(scanner("表名，多个英文逗号分割").split(","));        strategy.setControllerMappingHyphenStyle(true);//        strategy.setTablePrefix(pc.getModuleName() + "_");        mpg.setStrategy(strategy);//        mpg.setTemplateEngine(new FreemarkerTemplateEngine());        mpg.execute();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="jpa-hibernate"><a href="#jpa-hibernate" class="headerlink" title="jpa-hibernate"></a><em>jpa</em>-<em>hibernate</em></h5><blockquote><p>xml</p></blockquote><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-jpa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.3.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.hibernate<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>hibernate-entitymanager<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.4.22.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>yaml</p></blockquote><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">spring:  jpa:    show-sql: true    database: mysql    hibernate:      ddl-auto: update      naming:       physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl    properties:      hibernate:       dialect: org.hibernate.dialect.MySQL5Dialect<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>java-entity</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Getter@Setter@Entity@Table(name = "mv_order")@ApiModel(value = "订单实体")@ToStringpublic class OrderEntity{    @Id    @GeneratedValue(strategy = GenerationType.IDENTITY)    @ApiModelProperty(value = "ID",hidden = true)    private long orderId;    @ApiModelProperty(value = "订单编号")    @Column(length = 48)    private String orderNum;    @ApiModelProperty(value = "电影名")    @Column(length = 48)    private String movieName;    @ApiModelProperty(value = "购买数量")    private int movieNum;    @ApiModelProperty(value = "价格",example = "50")    private float price;    @ApiModelProperty(value = "购买时间")    private String playDate;    @ApiModelProperty(value = "0-已支付未出票，1-已出票（投递到MQ）",example = "0")    private int tag;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>java-dao</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">public interface IOrderAddDao extends CrudRepository&lt;OrderEntity,Long&gt; {}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>java-service</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">public interface IOrderAddService {}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>java-serviceIpml</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Servicepublic class OrderServiceImpl implements IOrderAddService {    @Resource    private IOrderAddDao orderAddDao;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="鉴权"><a href="#鉴权" class="headerlink" title="鉴权"></a>鉴权</h4><table><thead><tr><th>组件</th></tr></thead><tbody><tr><td>shiro</td></tr><tr><td>spring security</td></tr></tbody></table><h5 id="Jwt"><a href="#Jwt" class="headerlink" title="Jwt"></a><em>Jwt</em></h5><blockquote><p>xml</p></blockquote><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.auth0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>java-jwt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.10.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>java-util</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">/** * 创建token，并验证token；作用原理类似与session中sessionId验证权限访问的作用； * 不同点是：token针对的是分布式开发，不同服务器间访问数据的唯一标识 * 通常是利用拦截器，在用户登录的时候进行验证，验证成功，分发一个token，之后不同服务器间crud数据，通过token即可 */public class CreateJWT {    private  static final  long EXPIRE_TIME=1000*2;    private static  final  String TOKEN_SECRET="J177";    public static String getToken(UserDto userDto){        //过期时间        Date date = new Date(System.currentTimeMillis() + EXPIRE_TIME);        //私钥及加密算法        Algorithm algorithm = Algorithm.HMAC256(TOKEN_SECRET);        //设置头信息        HashMap&lt;String, Object&gt; header = new HashMap&lt;&gt;(2);        header.put("typ", "JWT");        header.put("alg", "HS256");        //附带username和userID生成签名        String token= JWT.create().withHeader(header)                .withClaim("userName",userDto.getUserName())                .withClaim("password",userDto.getPassWord())                .withExpiresAt(date).sign(algorithm);        return  token;    }    public static String getToken(String userName,String power){        //过期时间        Date date = new Date(System.currentTimeMillis() + EXPIRE_TIME);        //私钥及加密算法        Algorithm algorithm = Algorithm.HMAC256(TOKEN_SECRET);        //设置头信息        HashMap&lt;String, Object&gt; header = new HashMap&lt;&gt;(2);        header.put("typ", "JWT");        header.put("alg", "HS256");        //附带username和userID生成签名        String token= JWT.create().withHeader(header)                .withClaim("userName",userName)                .withClaim("power",power)                .withExpiresAt(date).sign(algorithm);        return  token;    }    public static boolean verifyToken(String token){        boolean bl=true;        //私钥及加密算法        Algorithm algorithm = Algorithm.HMAC256(TOKEN_SECRET);        //构建认证对象        JWTVerifier verifier = JWT.require(algorithm).build();        try {            //认证  ,认证失败抛出异常            DecodedJWT jwt = verifier.verify(token);               //拿到token中的内容//            System.out.println(jwt.getClaim("userName").asString());//            System.out.println(jwt.getClaim("password").asString());        }catch (Exception e){            bl=false;        }        return  bl;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Shiro"><a href="#Shiro" class="headerlink" title="Shiro"></a><em>Shiro</em></h5><blockquote><p>xml</p></blockquote><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--subject:用户    SecuirtyManager:管理所有用户    Realm:连接数据--&gt;</span><span class="token comment">&lt;!--Shiro整合Spring的包--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>shiro-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.4.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--Shiro整合Thymeleaf --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.github.theborakompanioni<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>thymeleaf-extras-shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>java-ShiroConfig</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configurationpublic class ShiroConfig {    //ShiroFilterFactoryBean Shiro过滤的Bean    @Bean    public ShiroFilterFactoryBean getShiroFilterFactoryBean(@Qualifier("securityManager")DefaultWebSecurityManager defaultWebSecurityManager){        ShiroFilterFactoryBean bean = new ShiroFilterFactoryBean();        //设置安全管理器        bean.setSecurityManager(defaultWebSecurityManager);        /**         * 添加shiro的内置过滤器(表示通过一个map设置过滤器链)         * anon:无需认证就可以访问         * authc:必须认证了才能访问         * user:必须用有了 rememberMe 功能才能访问         * perms:拥有某个资源的权限才能访问         * role:拥有某个角色权限才能访问         */        Map&lt;String, String&gt; filterMap = new LinkedHashMap&lt;&gt;();        //下面两个put整合在一起使用通配符*：filterMap.put("/user/*","authc");        filterMap.put("/user/add","authc");        filterMap.put("/user/update","authc");        //授权,未授权跳转到未授权页面        filterMap.put("/user/add","perms[user:add]");        filterMap.put("/user/update","perms[user:update]");        bean.setFilterChainDefinitionMap(filterMap);        //设置未授权跳转页面        bean.setUnauthorizedUrl("/noauth");        //设置登录请求跳转页面        bean.setLoginUrl("/toLogin");        return bean;    }    //DefaultWebSecurityManager 安全对象    @Bean(name = "securityManager")    public DefaultWebSecurityManager getDefaultWebSecurityManager(@Qualifier("userRealm") UserRealm userRealm){        DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();        //关联UserRealm        securityManager.setRealm(userRealm);        return securityManager;    }    //创建realm对象，需要自定义类(UserRealm)    @Bean(name = "userRealm")    public UserRealm userRealm(){        return new UserRealm();    }    //整合ShiroDialect:用来整合shiro thymeleaf    @Bean    public ShiroDialect getShiroDialect(){        return new ShiroDialect();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>java-realm</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">/** * 自定义的UserRealm需要继承AuthorizingRealm重写里面的方法  （认证和授权） */public class UserRealm extends AuthorizingRealm {    @Autowired    UserService userService;    //授权    @Override    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {        System.out.println("执行了==&gt;&gt;授权doGetAuthorizationInfo");        //找到AuthorizationInfo实现类SimpleAuthorizationInfo        SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();        //获取登录用户对象，前提在认证所传递的三个参数中的第一个prinicpal即为认证成功的用户对象        Subject subject = SecurityUtils.getSubject();        User user = (User) subject.getPrincipal();        //按用户持有的权限给用户授权        info.addStringPermission(user.getPerms());        return info;    }    //认证    @Override    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {        System.out.println("执行了==&gt;&gt;认证doGetAuthorizationInfo");        //authenticationToken即为登录时保存的用户信息        UsernamePasswordToken token = (UsernamePasswordToken)authenticationToken;        //用户名不存在，抛出异常UnknownAccountException        User user = userService.queryUserByName(token.getUsername());        if(null==user){            System.out.println("用户名不存在，抛出异常UnknownAccountException");            return null;        }        /**         * 注：密码的验证是交给shrio来做的，为了安全         * shiro提供密码加密（1、md5加密_把密码直接加密；2、md5盐值加密_除了密码还额加一些属性）         * SimpleAuthenticationInfo是AuthenticationInfo的实现类         * prinicpal登录成功的用户对象，供授权时使用         * credentials密码         * realmName认证名         */        return new SimpleAuthenticationInfo(user,user.getPwd(),"");    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Spring-Scurity"><a href="#Spring-Scurity" class="headerlink" title="Spring Scurity"></a><em>Spring</em> <em>Scurity</em></h5><blockquote><p>xml</p></blockquote><pre class="line-numbers language-none"><code class="language-none"><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h4 id="DB"><a href="#DB" class="headerlink" title="DB"></a><a href="http://c.biancheng.net/view/3856.html">DB</a></h4><table><thead><tr><th>组件</th></tr></thead><tbody><tr><td><a href="http://c.biancheng.net/mysql/">MySQL</a>/MariaDB</td></tr><tr><td>Oracle</td></tr><tr><td>SQL Server</td></tr><tr><td>PostgrcSQL</td></tr><tr><td>DB2</td></tr></tbody></table><h5 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h5><blockquote><p>xml</p></blockquote><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.1.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>yaml</p></blockquote><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">spring:    datasource:      username: root      password: lovo      url: jdbc:mysql://localhost:6789/shiro?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=Asia/Shanghai      driver-class-name: com.mysql.jdbc.Driver      type: com.alibaba.druid.pool.DruidDataSource<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="引擎模板"><a href="#引擎模板" class="headerlink" title="引擎模板"></a><a href="https://zhuanlan.zhihu.com/p/337729633">引擎模板</a></h4><table><thead><tr><th align="center">组件</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">thymeleaf</td><td align="center">主要渲染xml，HTML，HTML5而且与springboot整合。</td></tr><tr><td align="center">Velocity</td><td align="center">不仅可以用于界面展示（HTML.xml等）还可以生成输入java代码，SQL语句等文本格式。</td></tr><tr><td align="center">FreeMarker</td><td align="center">功能与Velocity差不多，但是语法更加强大，使用方便。</td></tr><tr><td align="center">jsp</td><td align="center">是一种动态网页开发技术。它使用JSP标签在HTML网页中插入Java代码。</td></tr></tbody></table><h5 id="thymeleaf"><a href="#thymeleaf" class="headerlink" title="thymeleaf"></a><em>thymeleaf</em></h5><blockquote><p>xml</p></blockquote><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>thymeleaf-spring5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.thymeleaf.extras<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>thymeleaf-extras-java8time<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>yaml</p></blockquote><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">spring:    thymeleaf:       enabled: true  #开启thymeleaf视图解析       encoding: utf-8  #编码       prefix: classpath:/templates/  #前缀       cache: false  #是否使用缓存       mode: HTML  #严格的HTML语法模式       suffix: .html  #后缀名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>html</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>shiro</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org/thymeleaf-extras-shiro<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${msg}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${session.loginUser==null}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/toLogin}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--shiro:hasPermission="user:add" 表示有user:add权限就显示--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">shiro:</span>hasPermission</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user:add<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/user/add}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>add<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span> <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">shiro:</span>hasPermission</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user:update<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/user/update}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>update<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="日志"><a href="#日志" class="headerlink" title="日志"></a><a href="https://blog.csdn.net/ztchun/article/details/79804583">日志</a></h4><table><thead><tr><th>组件</th></tr></thead><tbody><tr><td>Log4j</td></tr><tr><td>Log4j2</td></tr><tr><td>Logback</td></tr><tr><td>jboss logging</td></tr></tbody></table><h5 id="log4j"><a href="#log4j" class="headerlink" title="log4j"></a><em>log4j</em></h5><blockquote><p>xml</p></blockquote><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>yaml</p></blockquote><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">logging:  level:    root: info<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>java-test</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">public void TestLog4j2Application{    private static Logger logger = LogManager.getLogger(TestLog4j2Application.class);    public static void main(String[] args) {        logger.error("log4j2----------------\n");        SpringApplication.run(TestLog4j2Application.class, args);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><table><thead><tr><th>组件</th><th>作用</th></tr></thead><tbody><tr><td>swagger</td><td>接口调试</td></tr><tr><td>junit</td><td>单元测试</td></tr><tr><td>lombok</td><td>简化类书写</td></tr><tr><td>configuration-processor</td><td>配置提示</td></tr><tr><td>devtools</td><td>热部署</td></tr><tr><td>validation</td><td>注册验证</td></tr><tr><td>fileuplod</td><td>文件上传下载</td></tr><tr><td>aspectjweaver</td><td>AOP</td></tr><tr><td></td><td></td></tr></tbody></table><h5 id="swagger"><a href="#swagger" class="headerlink" title="swagger"></a>swagger</h5><blockquote><p>xml</p></blockquote><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>springfox-swagger2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>springfox-swagger-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>java-config</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configuration@EnableSwagger2public class SwaggerConfig {    @Bean    public Docket createRestApi(){        return new Docket(DocumentationType.SWAGGER_2)                .apiInfo(apiInfo())                .select()                .apis(RequestHandlerSelectors.any())                .paths(PathSelectors.any()).build();    }    private ApiInfo apiInfo(){        return new ApiInfoBuilder()                .title("商城前端管理系统API文档")                .description("这是一份关于商城前端管理系统的接口文档")                .version("1.0")                .build();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>http-swagger</p></blockquote><pre class="line-numbers language-http" data-language="http"><code class="language-http">http://localhost:8080/swagger-ui.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="junit"><a href="#junit" class="headerlink" title="junit"></a>junit</h5><blockquote><p>xml</p></blockquote><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--JUnit的好处在于。 可以对代码进行单元测试。 并且可以根据单元测试生成单元测试报告--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>java-test</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">/**  *  注解的介绍：  *      @BeforeClass: 所有的方法运行前运行一次，必须是静态方法  *      @Before 要在所有的测试方法运行前运行，每个方法都运行一次  *      @Test 用在方法上，表示这是一个测试的方法  *      @After 要在所有的测试方法运行后运行，每个方法都运行一次  *      @AfterClass：所有的方法运行后运行一次，必须是静态方法  *      否则会出现以下异常：  *      java.lang.Exception: Method init() should be static  *      java.lang.Exception: Method destroy() should be static  */public class Demo1 {            //声明全局变量            Calc calc = new Calc();            //有一个方法要在所有的测试方法运行前运行，每个方法都运行一次            @Before            public void begin() {                System.out.println("我在你前面运行了");            }            @BeforeClass            public static void init() {                System.out.println("所有的方法运行前运行一次");            }            @AfterClass            public static void destroy() {                System.out.println("所有的方法运行完以后运行一次");            }            @After            public void end() {                System.out.println("我在测试方法后面运行");            }            /*             *     a. 必须是public             *     b. 没有返回值             *     c. 方法没有参数             */            @Test            public void testAdd() {                System.out.println(calc.add(4, 8));            }        }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="lombok"><a href="#lombok" class="headerlink" title="lombok"></a>lombok</h5><blockquote><p>xml</p></blockquote><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.18.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>lombok常用的几个注解:</p></blockquote><table><thead><tr><th>@Setter 注解在类或字段，注解在类时为所有字段生成setter方法，注解在字段上时只为该字段生成setter方法。</th></tr></thead><tbody><tr><td>@Getter 使用方法同上，区别在于生成的是getter方法。</td></tr><tr><td>@ToString 注解在类，添加toString方法。</td></tr><tr><td>@EqualsAndHashCode 注解在类，生成hashCode和equals方法。</td></tr><tr><td>@NoArgsConstructor 注解在类，生成无参的构造方法。</td></tr><tr><td>@RequiredArgsConstructor 注解在类，为类中需要特殊处理的字段生成构造方法，比如final和被@NonNull注解的字段。</td></tr><tr><td>@AllArgsConstructor 注解在类，生成包含类中所有字段的构造方法。</td></tr><tr><td>@Data 注解在类，生成setter/getter、equals、canEqual、hashCode、toString方法，如为final属性，则不会为该属性生成setter方法。</td></tr><tr><td>@Slf4j 注解在类，生成log变量，严格意义来说是常量。private static final Logger log = LoggerFactory.getLogger(UserController.class);</td></tr></tbody></table><h5 id="configuration-processor"><a href="#configuration-processor" class="headerlink" title="configuration-processor"></a>configuration-processor</h5><blockquote><p>xml</p></blockquote><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">     <span class="token comment">&lt;!--写配置文件的时候，提供提示--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="devtools"><a href="#devtools" class="headerlink" title="devtools"></a>devtools</h5><blockquote><p><a href="https://www.jianshu.com/p/de544b13b9d5">xml</a></p></blockquote><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- devtools热部署依赖 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 防止将依赖传递到其他模块中 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 只在运行时起作用，打包时不打进去（防止线上执行打包后的程序，启动文件监听线程File Watcher，耗费大量的内存资源） --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>                <span class="token comment">&lt;!-- devtools依赖此配置（否则，devtools不生效）。 --&gt;</span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fork</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fork</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>yaml</p></blockquote><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">spring:  devtools:    restart:      # 开启热部署（更改文件后，自动重启）      enabled: true      ## 设置哪些资源变动后不触发热部署，会覆盖默认的exclude内容（资源不会触发重启，但会触发实时重新加载）      # exclude: WEB-INF/**,static/**      ## 监控额外的路径（优先于exclude）      # additional-paths: src/main/java<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="validation"><a href="#validation" class="headerlink" title="validation"></a>validation</h5><blockquote><p>xml</p></blockquote><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">      <span class="token comment">&lt;!--注册验证用户信息--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-validation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>java-DTO</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Data@ApiModelpublic class StudentDTO {    private Integer id;    @ApiModelProperty(value = "学生姓名",required = true,example = "小王")    @NotBlank(message = "姓名不能为空")    @Pattern(regexp = "^[\u4e00-\u9fa5]{2,6}$",message = "姓名字符2-6个")    private String name;    @ApiModelProperty(value = "学生性别",required = true,example = "男")    @NotBlank(message = "性别不能为空")    private String sex;    @ApiModelProperty(value = "学生年龄",required = true,example = "22")    @NotNull(message = "年龄不能为空")    @Max(value = 120,message = "最大限度年龄120")    @Min(value = 18,message = "最小限度年龄120")    private Integer age;    @ApiModelProperty(value = "学生号码",required = true,example = "13956455645")    @NotBlank(message = "号码不能为空")    @Pattern(regexp = "^((13[0-9])|(14[5|7])|(15([0-3]|[5-9]))|(18[0,5-9]))\\d{8}$",message = "手机号必须为11位数字，\n" +            "* 移动号码段:139、138、137、136、135、134、150、151、152、157、158、159、182、183、187、188、147\n" +            "* 联通号码段:130、131、132、136、185、186、145\n" +            "* 电信号码段:133、153、180、189")    private String phone;    @ApiModelProperty(value = "学生密码",required = true,example = "888")    @NotBlank(message = "密码不能为空")    @Pattern(regexp = "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[$@$!%*?&amp;.])[A-Za-z\\d$@$!%*?&amp;.]{6,20}$",message = "– 最少6个字符\n" +            "– 至少有1个大写字符\n" +            "– 至少1个小写字符\n" +            "– 至少1个特殊字符")    private String pwd;    @ApiModelProperty(value = "学生头像",required = true,example = "pic")    @NotBlank(message = "图片路径不能为空")    private String img;    @ApiModelProperty(value = "班级名",required = true,example = "高一五班")    @NotBlank(message = "班级名不能为空")    private String className;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>java-Controller</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">   @ApiOperation("添加学生")//    @ApiImplicitParam(name = "studentDTO",value = "学生传输对象")    @PostMapping(value = "/add")    public Object addStu(@RequestBody @Valid StudentDTO studentDTO){        studentService.addStu(studentDTO);        return null;    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="fileupload"><a href="#fileupload" class="headerlink" title="fileupload"></a><a href="https://blog.csdn.net/backbug/article/details/99573586">fileupload</a></h5><blockquote><p><a href="https://blog.csdn.net/wzy18210825916/article/details/81226511">xml</a></p></blockquote><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--文件上传和下载--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.3.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="aspectjweaver"><a href="#aspectjweaver" class="headerlink" title="aspectjweaver"></a><a href="https://www.cnblogs.com/hongwz/p/5764917.html">aspectjweaver</a></h5><blockquote><p>xml</p></blockquote><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--aspectjweaver包含aspectjrt，所以我们只需要引入aspectjweaver依赖包就可以了--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.9.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="Json"><a href="#Json" class="headerlink" title="Json"></a>Json</h4><table><thead><tr><th>组件</th></tr></thead><tbody><tr><td>fastjson</td></tr><tr><td>gson</td></tr><tr><td>jacakson</td></tr></tbody></table><h5 id="fastjson"><a href="#fastjson" class="headerlink" title="fastjson"></a>fastjson</h5><blockquote><p><a href="https://www.w3cschool.cn/fastjson/fastjson-quickstart.html">xml</a></p></blockquote><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--fastjson是阿里巴巴的开源JSON解析库，它可以解析JSON格式的字符串，支持将Java Bean序列化为JSON字符串，也可以从JSON字符串反序列化到JavaBean。--&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.73<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>java-test</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">String text = JSON.toJSONString(obj); //序列化VO vo = JSON.parseObject("{...}", VO.class); //反序列化<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="gson"><a href="#gson" class="headerlink" title="gson"></a><em>gson</em></h5><blockquote><p>xml</p></blockquote><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.google.code.gson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>gson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.8.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>java</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">response.getWriter().print(new Gson().toJson(resultVO));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="jackson"><a href="#jackson" class="headerlink" title="jackson"></a>jackson</h5><blockquote><p>xml</p></blockquote><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.11.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>java</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">response.getWriter().print(new ObjectMapper().writeValueAsString(resultVO));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>java-util</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class WebUtil {    public static void writeJson(Object object, ServletResponse response) {        PrintWriter out = null;        try {            response.setCharacterEncoding("UTF-8");            response.setContentType("application/json; charset=utf-8");            out = response.getWriter();            ObjectMapper objectMapper = new ObjectMapper();            out.write(objectMapper.writeValueAsString(object));        } catch (IOException e) {            e.printStackTrace();        } finally {            if (out != null) {                out.close();            }        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h4><table><thead><tr><th>组件</th></tr></thead><tbody><tr><td>pagehelper</td></tr><tr><td>mybatis-plus</td></tr></tbody></table><h5 id="pagehelper"><a href="#pagehelper" class="headerlink" title="pagehelper"></a><em>pagehelper</em></h5><blockquote><p>xml</p></blockquote><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.github.pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>java-servlet</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">@WebServlet(name = "FindItemJurServlet",value = "/findItemJur")public class FindItemJurServlet extends HttpServlet {    private IJurisdictionService ser = new JurisdictionServiceImpl();    private ResultVO resultVO = new ResultVO();    private static int num = 5;    private static String getChoose,getInfo;    private List&lt;JurisdictionBean&gt; list;    @Override    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {        String choose = request.getParameter("pageParam[choose]");        String info = request.getParameter("pageParam[info]");        String page = request.getParameter("pageParam[page]");        String size = request.getParameter("pageParam[size]");        if(size!=null){            num=Integer.parseInt(size);        }        PageHelper.startPage(page==null?1:Integer.parseInt(page),size==null?num:Integer.parseInt(size));        if(choose!=null &amp;&amp; info!=null){            getChoose =choose;            getInfo = info;            list= ser.findByItem(choose,info);        }else{            list= ser.findByItem(getChoose,getInfo);        }        PageInfo pageInfo = PageInfo.of(list);            if(list!=null){                resultVO.setStatus(1);                resultVO.setMessage("成功");                resultVO.setData(pageInfo);                response.getWriter().print(new ObjectMapper().writeValueAsString(resultVO));            }else{                resultVO.setStatus(0);                resultVO.setMessage("失败");                resultVO.setData(null);                response.getWriter().print(new ObjectMapper().writeValueAsString(resultVO));            }    }    @Override    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {        doPost(request,response);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="mybatis-plus"><a href="#mybatis-plus" class="headerlink" title="mybatis-plus"></a>mybatis-plus</h5><blockquote><p>xml</p></blockquote><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.4.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>java-config</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configurationpublic class MyBatisPlusConfig {    @Bean    public MybatisPlusInterceptor mybatisPlusInterceptor() {        MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor();        interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL));        return interceptor;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>java-PageVO</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Data@AllArgsConstructor@NoArgsConstructorpublic class PageVO&lt;t&gt; {    private Long pageNum;    private Long pageSize;    private Long total;    private List&lt;t&gt; list;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>java-serviceImpl</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Override    public PageVO&lt;TAddressDO&gt; findAllPageAndSize(TConsumerDO consumerDO, FindAddressDTO findAddressDTO) {        System.out.println(findAddressDTO);        QueryWrapper&lt;TAddressDO&gt; queryWrapper = new QueryWrapper();        if(findAddressDTO.getProvince() != null) {            queryWrapper.like("province", findAddressDTO.getProvince());            queryWrapper.like("city", findAddressDTO.getCity());            if ("收货人".equals(findAddressDTO.getSelect())) {                queryWrapper.like("consignee", findAddressDTO.getInfo());            } else if ("手机号".equals(findAddressDTO.getSelect())) {                queryWrapper.like("phone", findAddressDTO.getInfo());            } else if ("详细地址".equals(findAddressDTO.getSelect())) {                queryWrapper.like("address", findAddressDTO.getInfo());            }        }        queryWrapper.eq("consumer_code",consumerDO.getConsumerCode());        queryWrapper.eq("delete_tab",DeleteStatus.NO_DELETE.getStatus());        Page&lt;TAddressDO&gt; p = new Page&lt;&gt;(findAddressDTO.getPage(),findAddressDTO.getSize());        IPage&lt;TAddressDO&gt; iPage = addressDAO.selectPage(p, queryWrapper);        return new PageVO&lt;TAddressDO&gt;( iPage.getCurrent(),iPage.getSize(),iPage.getTotal(),iPage.getRecords());    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>wrapper<a href="https://www.cnblogs.com/ttty/p/11685784.html">构造图</a></p><p>springboot + mybatis plus中的条件构造器queryWrapper、updateWrapper</p></blockquote><img src="/2021/03/05/yi-lai-he-pei-zhi-wen-jian/1558035-20191016152614813-1211190603.png" alt="img" style="zoom:80%;"><hr><h4 id="NoSql"><a href="#NoSql" class="headerlink" title="NoSql"></a>NoSql</h4><table><thead><tr><th>组件</th></tr></thead><tbody><tr><td>redis</td></tr><tr><td><a href="http://c.biancheng.net/mongodb/">MongoDB</a></td></tr><tr><td>Elasticsearch</td></tr></tbody></table><h5 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h5><blockquote><p><a href="https://www.jianshu.com/p/19628db2e7ef">xml</a></p></blockquote><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--Redis依赖--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!-- 排除lettuce包，使用jedis代替--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.lettuce<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lettuce-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--Redis客户端：jedis依赖--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--org.redisson应用于分布式锁的创建--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.redisson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>redisson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.5.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.netty<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>netty-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.1.25.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--guava实现布隆过滤器--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.google.guava<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>guava<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>29.0-jre<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>yaml</p></blockquote><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">spring:   redis:      host: localhost      password: 666      port: 8002<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>java-config</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configurationpublic class RedisConfig {    /**     * 利用依赖jedis框架连接redis；jedis自带了redis五种类型的存取方法；     * 项目中直接采用了直接封装好的框架（RedisCacheUtil），而不用原生的方法了     * 此bean也可以不需要，直接通过依赖     * @return     */    @Bean    public Jedis jedis(){        Jedis jedis = new Jedis("127.0.0.1",8002);        jedis.auth("666");        return jedis;    }    /**     * 实现Redis的分布式锁，除了自己基于redis client原生api来实现之外，还可以使用开源框架：Redission     * 参考链接：https://blog.csdn.net/xiaoxiaole0313/article/details/107011095/     * @return     */    @Bean    public RedissonClient redisson() {        Config config = new Config();        SingleServerConfig singleServerConfig = config.useSingleServer();        singleServerConfig.setAddress("redis://127.0.0.1:" + 8002);        singleServerConfig.setTimeout(3000);        // singleServerConfig.setDatabase(database);        singleServerConfig.setPassword("666");        return Redisson.create(config);    }    /**     * 布隆过滤器（Bloom Filter）     * 默认误差率3%。肯定不存在以及可能存在     * 可通过构造函数去设置误差率     * create(Funnel&lt;? super T&gt; funnel, int expectedInsertions, double fpp)     * 参考链接：https://www.cnblogs.com/yulibostu/articles/11716443.html     */    @Bean    public BloomFilter bloomFilter(){        BloomFilter bloomFilter=BloomFilter.create(Funnels.stringFunnel(Charsets.UTF_8),10000,0.001);            bloomFilter.put("魔警察");            bloomFilter.put("66.0");        return bloomFilter;    }    /**     * 好像可以代替实体类去实现序列化这个接口     * 对于 redis的String、hash、list、set、zSet这几种类型，可以把对象转化为json格式（利用了jackson），而不转化为二进制了     * @param factory     * @return     */    @Bean    public RedisTemplate&lt;String, Object&gt; redisTemplate(RedisConnectionFactory factory) {        RedisTemplate&lt;String, Object&gt; template = new RedisTemplate&lt;&gt;();        template.setConnectionFactory(factory);        // 使用Jackson2JsonRedisSerialize 替换默认的jdkSerializeable序列化        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);        ObjectMapper om = new ObjectMapper();        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);        jackson2JsonRedisSerializer.setObjectMapper(om);        StringRedisSerializer stringRedisSerializer = new StringRedisSerializer();        // key采用String的序列化方式        template.setKeySerializer(stringRedisSerializer);        // hash的key也采用String的序列化方式        template.setHashKeySerializer(stringRedisSerializer);        // value序列化方式采用jackson        template.setValueSerializer(jackson2JsonRedisSerializer);        // hash的value序列化方式采用jackson        template.setHashValueSerializer(jackson2JsonRedisSerializer);        template.afterPropertiesSet();        return template;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>java-util</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Service(value = "redisCacheUtil")public class RedisCacheUtil {    @Autowired    private RedisTemplate&lt;String, Object&gt; redisTemplate;    /**     * 指定缓存失效时间     * @param key  键     * @param time 时间(秒)     * @return     */    public boolean expire(String key, long time) {        try {            if (time &gt; 0) {                redisTemplate.expire(key, time, TimeUnit.SECONDS);            }            return true;        } catch (Exception e) {            e.printStackTrace();            return false;        }    }    /**     * 根据key 获取过期时间     * @param key 键 不能为null     * @return 时间(秒) 返回0代表为永久有效     */    public long getExpire(String key) {        return redisTemplate.getExpire(key, TimeUnit.SECONDS);    }    /**     * 判断key是否存在     * @param key 键     * @return true 存在 false不存在     */    public boolean hasKey(String key) {        try {            return redisTemplate.hasKey(key);        } catch (Exception e) {            e.printStackTrace();            return false;        }    }    /**     * 删除缓存     * @param key 可以传一个值 或多个     */    public void del(String... key) {        if (key != null &amp;&amp; key.length &gt; 0) {            if (key.length == 1) {                redisTemplate.delete(key[0]);            } else {                redisTemplate.delete(CollectionUtils.arrayToList(key));            }        }    }    /**     * 普通缓存获取     * @param key 键     * @return 值     */    public Object get(String key) {        return key == null ? null : redisTemplate.opsForValue().get(key);    }    /**     * 普通缓存放入     *     * @param key   键     * @param value 值     * @return true成功 false失败     */    public boolean set(String key, Object value) {        try {            redisTemplate.opsForValue().set(key, value);            return true;        } catch (Exception e) {            e.printStackTrace();            return false;        }    }    /**     * 普通缓存放入并设置时间     * @param key   键     * @param value 值     * @param time  时间(秒) time要大于0 如果time小于等于0 将设置无限期     * @return true成功 false 失败     */    public boolean set(String key, Object value, long time) {        try {            if (time &gt; 0) {                redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);            } else {                set(key, value);            }            return true;        } catch (Exception e) {            e.printStackTrace();        }        return false;    }    /**     * 递增     * @param key 键     * @param delta 要增加几(大于0)     * @return     */    public Long incr(String key, long delta) {        if (delta &lt; 0) {            throw new RuntimeException("递增因子必须大于0");        }        return redisTemplate.opsForValue().increment(key, delta);    }    /**     * 递减     * @param key 键     * @param delta 要减少几(小于0)     * @return     */    public long decr(String key, long delta) {        if (delta &lt; 0) {            throw new RuntimeException("递减因子必须大于0");        }        return redisTemplate.opsForValue().increment(key, -delta);    }    /**     * HashGet     * @param key 键 不能为null     * @param item 项 不能为null     * @return 值     */    public Object hget(String key, String item) {        return redisTemplate.opsForHash().get(key, item);    }        /**     * 获取hashKey对应的所有键值     * @param key 键     * @return 对应的多个键值     */    public Map&lt;Object, Object&gt; hmget(String key) {        return redisTemplate.opsForHash().entries(key);    }    /**     * HashSet     * @param key 键     * @param map 对应多个键值     * @return true 成功 false 失败     */    public boolean hmset(String key, Map&lt;String, Object&gt; map) {        try {            redisTemplate.opsForHash().putAll(key, map);            return true;        } catch (Exception e) {            e.printStackTrace();            return false;        }    }    /**     * HashSet 并设置时间     * @param key 键     * @param map 对应多个键值     * @param time 时间(秒)     * @return true成功 false失败     */    public boolean hmset(String key, Map&lt;String, Object&gt; map, long time) {        try {            redisTemplate.opsForHash().putAll(key, map);            if (time &gt; 0) {                expire(key, time);            }            return true;        } catch (Exception e) {            e.printStackTrace();            return false;        }    }    /**     * 向一张hash表中放入数据,如果不存在将创建     * @param key 键     * @param item 项     * @param value 值     * @return true 成功 false失败     */    public boolean hset(String key, String item, Object value) {        try {            redisTemplate.opsForHash().put(key, item, value);            return true;        } catch (Exception e) {            e.printStackTrace();            return false;        }    }    /**     * 向一张hash表中放入数据,如果不存在将创建     * @param key 键     * @param item 项     * @param value 值     * @param time 时间(秒) 注意:如果已存在的hash表有时间,这里将会替换原有的时间     * @return true 成功 false失败     */    public boolean hset(String key, String item, Object value, long time) {        try {            redisTemplate.opsForHash().put(key, item, value);            if (time &gt; 0) {                expire(key, time);            }            return true;        } catch (Exception e) {            e.printStackTrace();            return false;        }    }    /**     * 删除hash表中的值     * @param key 键 不能为null     * @param item 项 可以使多个 不能为null     */    public void hdel(String key, Object... item) {        redisTemplate.opsForHash().delete(key, item);    }        /**     * 判断hash表中是否有该项的值     * @param key 键 不能为null     * @param item 项 不能为null     * @return true 存在 false不存在     */    public boolean hHasKey(String key, String item) {        return redisTemplate.opsForHash().hasKey(key, item);    }    /**     * hash递增 如果不存在,就会创建一个 并把新增后的值返回     * @param key 键     * @param item 项     * @param by 要增加几(大于0)     * @return     */    public double hincr(String key, String item, double by) {        return redisTemplate.opsForHash().increment(key, item, by);    }    /**     * hash递减     * @param key 键     * @param item 项     * @param by 要减少记(小于0)     * @return     */    public double hdecr(String key, String item, double by) {        return redisTemplate.opsForHash().increment(key, item, -by);    }    /**     * 根据key获取Set中的所有值     * @param key 键     * @return     */    public Set&lt;Object&gt; sGet(String key) {        try {            return redisTemplate.opsForSet().members(key);        } catch (Exception e) {            e.printStackTrace();            return null;        }    }    /**     * 根据value从一个set中查询,是否存在     * @param key 键     * @param value 值     * @return true 存在 false不存在     */    public boolean sHasKey(String key, Object value) {        try {            return redisTemplate.opsForSet().isMember(key, value);        } catch (Exception e) {            e.printStackTrace();            return false;        }    }    /**     * 将数据放入set缓存     * @param key 键     * @param values 值 可以是多个     * @return 成功个数     */    public long sSet(String key, Object... values) {        try {            return redisTemplate.opsForSet().add(key, values);        } catch (Exception e) {            e.printStackTrace();            return 0;        }    }    /**     * 将set数据放入缓存     * @param key 键     * @param time 时间(秒)     * @param values 值 可以是多个     * @return 成功个数     */    public long sSetAndTime(String key, long time, Object... values) {        try {            Long count = redisTemplate.opsForSet().add(key, values);            if (time &gt; 0)                expire(key, time);            return count;        } catch (Exception e) {            e.printStackTrace();            return 0;        }    }        /**     * 获取set缓存的长度     * @param key 键     * @return     */    public long sGetSetSize(String key) {        try {            return redisTemplate.opsForSet().size(key);        } catch (Exception e) {            e.printStackTrace();            return 0;        }    }    /**     * 移除值为value的     * @param key 键     * @param values 值 可以是多个     * @return 移除的个数     */    public long setRemove(String key, Object... values) {        try {            Long count = redisTemplate.opsForSet().remove(key, values);            return count;        } catch (Exception e) {            e.printStackTrace();            return 0;        }    }    /**     * 获取list缓存的内容     * @param key 键     * @param start 开始     * @param end 结束 0 到 -1代表所有值     * @return     */    public List&lt;Object&gt; lGet(String key, long start, long end) {        try {            return redisTemplate.opsForList().range(key, start, end);        } catch (Exception e) {            e.printStackTrace();            return null;        }    }    /**     * 获取list缓存的长度     * @param key 键     * @return     */    public long lGetListSize(String key) {        try {            return redisTemplate.opsForList().size(key);        } catch (Exception e) {            e.printStackTrace();            return 0;        }    }    /**     * 通过索引 获取list中的值     * @param key 键     * @param index 索引 index&gt;=0时， 0 表头，1 第二个元素，依次类推；index&lt;0时，-1，表尾，-2倒数第二个元素，依次类推     * @return     */    public Object lGetIndex(String key, long index) {        try {            return redisTemplate.opsForList().index(key, index);        } catch (Exception e) {            e.printStackTrace();            return null;        }    }    /**     * 将list放入缓存     * @param key 键     * @param value 值     * @return     */    public boolean lSet(String key, Object value) {        try {            redisTemplate.opsForList().rightPush(key, value);            return true;        } catch (Exception e) {            e.printStackTrace();            return false;        }    }    /**     * 将list放入缓存     * @param key 键     * @param value 值     * @param time 时间(秒)     * @return     */    public boolean lSet(String key, Object value, long time) {        try {            redisTemplate.opsForList().rightPush(key, value);            if (time &gt; 0)                expire(key, time);            return true;        } catch (Exception e) {            e.printStackTrace();            return false;        }    }    /**     * 将list放入缓存     * @param key 键     * @param value 值     * @return     */    public boolean lSet(String key, List&lt;Object&gt; value) {        try {            redisTemplate.opsForList().rightPushAll(key, value);            return true;        } catch (Exception e) {            e.printStackTrace();            return false;        }    }    /**     * 将list放入缓存     * @param key 键     * @param value 值     * @param time 时间(秒)     * @return     */    public boolean lSet(String key, List&lt;Object&gt; value, long time) {        try {            redisTemplate.opsForList().rightPushAll(key, value);            if (time &gt; 0)                expire(key, time);            return true;        } catch (Exception e) {            e.printStackTrace();            return false;        }    }    /**     * 根据索引修改list中的某条数据     * @param key 键     * @param index 索引     * @param value 值     * @return     */    public boolean lUpdateIndex(String key, long index, Object value) {        try {            redisTemplate.opsForList().set(key, index, value);            return true;        } catch (Exception e) {            e.printStackTrace();            return false;        }    }    /**     * 移除N个值为value     * @param key 键     * @param count 移除多少个     * @param value 值     * @return 移除的个数     */    public long lRemove(String key, long count, Object value) {        try {            Long remove = redisTemplate.opsForList().remove(key, count, value);            return remove;        } catch (Exception e) {            e.printStackTrace();            return 0;        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>java-StringUtile</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">/** * 对于一些验证、异常、返回结果等采用，此种归类的工具类，直接调用，方便更改 * 工具类采用静态：在jvm中划分存储空间。不会消失。公有，供其它类调用；缺点：比较占用空间 * 当在其他类调用该静态方法时是随着类的定义而被分配和装载入内存中。而非静态方法属于对象的具体实例，只有在类的对象创建时在对象的内存中才有这个方法的代码段。 * 参考链接：https://blog.csdn.net/myysophia/article/details/88593596 */public class StringUtile {    public static final  String UPDATE_OK="修改成功";    public static final  String UPDATE_ERROR="修改失败";    public static final  String BUY_OK="购买成功";    public static final  String BUY_NO="购买失败";    public static  final  int  REDIS_TIME=60*10;    public static  final  int  PENETRATE_TIME=3;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>java-SerializeUtil</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">/** * serialize(Object obj) 序列化 * unserizlize(byte[] byt)反序列化 */public class SerializeUtil {    public static byte[] serialize(Object obj) {        ObjectOutputStream obi = null;        ByteArrayOutputStream bai = null;        try {            bai = new ByteArrayOutputStream();            obi = new ObjectOutputStream(bai);            obi.writeObject(obj);            byte[] byt = bai.toByteArray();            return byt;        } catch (IOException e) {            e.printStackTrace();        }        return null;    }    public static Object unserizlize(byte[] byt) {        ObjectInputStream oii = null;        ByteArrayInputStream bis = null;        bis = new ByteArrayInputStream(byt);        try {            oii = new ObjectInputStream(bis);            Object obj = oii.readObject();            return obj;        } catch (Exception e) {            e.printStackTrace();        }        return null;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>java-service</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">public interface IMovieService {    /**     * 按姓名价格持续电影集合（缓存雪崩——采用随机数设置redis的key值过期时间，避免集体key值失效）     * @param movieName     * @param price     * @return     */    List&lt;MovieEntity&gt; findAllByMovieNameAndPrice1(String movieName, float price);    /**     * 按姓名价格持续电影集合（缓存穿透——1、对查询为null的key值，直接把value赋值为null；2、布隆过滤器）     * @param movieName     * @param price     * @return     */    List&lt;MovieEntity&gt; findAllByMovieNameAndPrice2(String movieName, float price);    /**     * 按姓名价格持续电影集合（缓存击穿——对于高并发访问同一个key值，即将失效（过期）时候，     * 由于是分布式不同服务期间去访问同一个数据，因此采用分布式锁机制，redission和zookeeper，本次采用redission）     * @param movieName     * @param price     * @return     */    List&lt;MovieEntity&gt; findAllByMovieNameAndPrice3(String movieName, float price) throws InterruptedException;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>java-serviceImpl</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Servicepublic class MovieServieImpl implements IMovieService {    @Resource    private IMovieEntityDao movieEntityDao;    //原生jedis    @Resource    private Jedis jedis;    //封装redis的工具类，实际采用    @Resource    private RedisCacheUtil redisCacheUtil;    //布隆过滤器——用于穿透，过滤掉不明不白的key    @Resource    private BloomFilter bloomFilter;    //分布式锁——用于击穿，允许一个线程访问数据库，把数据保于预缓存    @Resource    private RedissonClient redisson;    /**     * 避免缓存雪崩——随机设置key过期时间     * @param movieName     * @param price     * @return     */    @Override    public List&lt;MovieEntity&gt; findAllByMovieNameAndPrice1(String movieName, float price) {        long beforeTime = System.currentTimeMillis();        List&lt;MovieEntity&gt; movieEntityList = null;        //自定义redis缓存中的key值        String key = "movie="+movieName+"and"+price;        movieEntityList = (List&lt;MovieEntity&gt;) redisCacheUtil.get(key);        if(movieEntityList!=null){            return movieEntityList;        }else {            movieEntityList = movieEntityDao.findAllByMovieNameAndPrice(movieName, price);            //StringUtile.REDIS_TIME为600，加1后保证取陌后的区间在1——600            Long time = System.currentTimeMillis() % StringUtile.REDIS_TIME + 1;            redisCacheUtil.set(key, movieEntityList, time);        }        System.out.println("--------------------------------------------------------");        long afterTime = System.currentTimeMillis();        long time = afterTime-beforeTime;        System.out.println(time);        return movieEntityList;    }    /**     * 避免缓存穿透——1、不存在的key，value赋值为null；2、布隆过滤器     * @param movieName     * @param price     * @return     */    @Override    public List&lt;MovieEntity&gt; findAllByMovieNameAndPrice2(String movieName, float price) {        long beforeTime = System.currentTimeMillis();        List&lt;MovieEntity&gt; movieEntityList = null;        if(bloomFilter.mightContain(movieName) &amp;&amp; bloomFilter.mightContain(String.valueOf(price))) {            //自定义redis缓存中的key值            String key = "movie=" + movieName + "and" + price;            movieEntityList = (List&lt;MovieEntity&gt;) redisCacheUtil.get(key);            if (movieEntityList != null) {                return movieEntityList;            } else {                movieEntityList = movieEntityDao.findAllByMovieNameAndPrice(movieName, price);                if (!movieEntityList.isEmpty()) {                    //StringUtile.REDIS_TIME为600，加1后保证取陌后的区间在1——600                    Long time = System.currentTimeMillis() % StringUtile.REDIS_TIME + 1;                    redisCacheUtil.set(key, movieEntityList, time);                } else {                    //StringUtile.PENETRATE_TIME为3，不存在的key，设置较短的过期时间                    redisCacheUtil.set(key, movieEntityList, StringUtile.PENETRATE_TIME);                }            }        }        System.out.println("--------------------------------------------------------");        long afterTime = System.currentTimeMillis();        long time = afterTime-beforeTime;        System.out.println(time);        return movieEntityList;    }    /**     * 避免缓存击穿——分布式锁redission     * @param movieName     * @param price     * @return     */    @Override    public List&lt;MovieEntity&gt; findAllByMovieNameAndPrice3(String movieName, float price) throws InterruptedException {        long beforeTime = System.currentTimeMillis();        List&lt;MovieEntity&gt; movieEntityList = null;        if(bloomFilter.mightContain(movieName) &amp;&amp; bloomFilter.mightContain(String.valueOf(price))) {            //自定义redis缓存中的key值            String key = "movie=" + movieName + "and" + price;            movieEntityList = (List&lt;MovieEntity&gt;) redisCacheUtil.get(key);            if (movieEntityList != null) {                System.out.println("--------------------------------------------------------");                long afterTime = System.currentTimeMillis();                long time = afterTime-beforeTime;                System.out.println(time);                return movieEntityList;            } else {                //很明显，击穿后获取数据在数据库，所以在此设置线程获取锁                RLock lock = redisson.getLock("movie");                //tryLock(等待获取锁时间，释放锁时间，释放锁时间格式)                if(lock.tryLock(5,5, TimeUnit.SECONDS)) {                    movieEntityList = movieEntityDao.findAllByMovieNameAndPrice(movieName, price);                    if (!movieEntityList.isEmpty()) {                        //StringUtile.REDIS_TIME为600，加1后保证取陌后的区间在1——600                        Long time = System.currentTimeMillis() % StringUtile.REDIS_TIME + 1;                        redisCacheUtil.set(key, movieEntityList, time);                    } else {                        //StringUtile.PENETRATE_TIME为3，不存在的key，设置较短的过期时间                        redisCacheUtil.set(key, movieEntityList, StringUtile.PENETRATE_TIME);                    }                    //得到数据，释放锁（快于等待等待释放锁时间，释放锁时间只是为了预防其它问题，避免一个线程一直占用锁，造成死锁现象）                    lock.unlock();                }else{                    //说明有线程占用锁，要求下一个线程等待                    Thread.sleep(600);                    return this.findAllByMovieNameAndPrice3(movieName,price);                }            }        }        System.out.println("--------------------------------------------------------");        long afterTime = System.currentTimeMillis();        long time = afterTime-beforeTime;        System.out.println(time);        return movieEntityList;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>java-jedis(五中数据类型的使用)</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class testRedis {        private static Jedis jedis = null;        @Before    public void before(){        jedis = RedisDao.getRedis();    }    @Test    public void testString(){        jedis.set("username","LuJiaHong");        System.out.println(jedis.get("username"));    }    /**     * redis 的 String 类型支持 二进制 存取对象，必先满足对象的序列化 和 反序列化     */    @Test    public void testObj(){        UserDto userDto = new UserDto("赵云","123456","超级管理员");        //序列化-调用工具类SerializeUtil        jedis.set("user".getBytes(), SerializeUtil.serialize(userDto));        //反序列化        System.out.println((UserDto)SerializeUtil.unserizlize(jedis.get("user".getBytes())));    }    @Test    public void testHash(){        List&lt;UserDto&gt; list = UserDto.userDtoList;        Map&lt;String,String&gt; map = new HashMap&lt;&gt;();        map.put("user1",list.get(0).toString());        map.put("user2",list.get(1).toString());        map.put("user3",list.get(2).toString());        jedis.hmset("users",map);        System.out.println(jedis.hmget("users","user1","user2","user3"));    }    @Test    public void testList(){        jedis.lpush("man","june","tom","jack");        System.out.println(jedis.lpop("man"));        System.out.println(jedis.rpop("man"));    }    @Test    public void testSet(){        jedis.sadd("students1","jim","kok","opo");        jedis.sadd("students2","jim","kok","opo","yui");        System.out.println(jedis.sinter("students1","students2"));        System.out.println(jedis.sdiff("students1","students2"));        System.out.println(jedis.sdiff("students2","students1"));        System.out.println(jedis.sunion("students1","students2"));    }    @Test    public void testZSet(){        Map&lt;String, Double&gt; map1 = new HashMap&lt;&gt;();        for(int i = 0 ; i&lt; 5 ; i++){            map1.put("a"+i,i+0.0);        }        jedis.zadd("num1",map1);        System.out.println(jedis.zrange("num1",0,-1));        jedis.zincrby("num1",6,"a1");        System.out.println(jedis.zrevrange("num1",0,-1));    }        @After    public void after(){        jedis.close();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="MQ"><a href="#MQ" class="headerlink" title="MQ"></a>MQ</h4><p><a href="https://mp.weixin.qq.com/s/p8JDWzCL-_poTcWwbWVs_g">参考文档</a></p><table><thead><tr><th>组件</th><th>作用</th></tr></thead><tbody><tr><td>RabbitMQ</td><td>Erlang语言开发，基于AMQP协议来实现。用在企业系统内，对数据一致性、稳定性和可靠性要求很高的场景，对性能和吞吐量的要求还在其次。</td></tr><tr><td>ActiveMQ</td><td>类似于ZeroMQ，它能够以代理人和点对点的技术实现队列。同时类似于RabbitMQ，它少量代码就可以高效地实现高级应用场景。</td></tr><tr><td>RocketMQ</td><td>在阿里集团被广泛应用在订单，交易，充值，流计算，消息推送，日志流式处理，binglog分发等场景。</td></tr><tr><td>Kafka</td><td>日志收集和传输，适合产生大量数据的互联网服务的数据收集业务。</td></tr><tr><td>ZeroMQ</td><td>号称最快的消息队列系统，尤其针对大吞吐量的需求场景。</td></tr></tbody></table><h5 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h5><blockquote><p>xml</p></blockquote><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>java-MQConfig</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">/** * rabbitMQ消息队列用来削峰，是异步处理（即发出请求后不需要立马收到回应，即可执行其它的请求） */@Configurationpublic class MQConfig {    //注入工厂（已经预加载）    @Autowired    CachingConnectionFactory connectionFactory;    //rabbitmq模板    @Bean(value = "rabbitTemplate")    public RabbitTemplate rabbitTemplate(){        return new RabbitTemplate(connectionFactory);    }    //创建普通队列//     @Bean//     public Queue createPointQueue(){//            return new Queue("j177_point");//     }    //死信队列    @Bean    public  Queue deadQueue(){        return new Queue("deadQueue");    }    /**     *DLX（Dead-Letter-Exchange）也是一个正常的Exchange，和一般的Exchange没有任何的区别，他能在任何的队列上被指定，实际上就是设置某个队列的属性。     * 当这个队列出现死信的时候，RabbitMQ就会自动将这条消息重新发布到Exchange上去，进而被路由到另一个队列。     * 可以监听这个队列中的消息作相应的处理，这个特性可以弥补rabbitMQ以前支持的immediate参数的功能；-------     * 从此可以看出一个消息队列绑定了两个交换机（一个是DLX，一个是自己rounteKey指定的交换机）     * @return生成一个死信交换机对象     */    @Bean    public DirectExchange deadExchange(){        return  new DirectExchange("deadExchange");    }    //死信交换机队列绑定    @Bean    public Binding deadQueueToDeadExchange(Queue deadQueue,DirectExchange deadExchange){        return  BindingBuilder.bind(deadQueue).to(deadExchange).with("dead_routing_key");    }    /**     * 死信（dead message，就是没有任何消费者消费）     * @return 与DLX（死信交换机）绑定的一个队列：j177_point;因此上面单独创建的bean队列对象j177_point就没用了，用这个跟DLX绑定的队列对象就行     * 普通队列与DLX绑定的时候，需要指明：1、绑定的死信交换机；2、死信路由key；3、声明队列的TTL（当时间一过期就会通过死信交换机 按死信路由key 指定到 死信队列）；---------     * 什么是TTL？即：time to live 生存时间；     * 1、支持消息的过期时间，在消息发送时可以指定。     * 2、支持队列过期时间，在消息入队列开始计算时间，只要超过了队列的超时时间配置，那么消息就会自动的清除     */    @Bean    public Queue createPointQueue(){        //关联死信交换机        Map&lt;String, Object&gt; args = new HashMap&lt;&gt;(3);        // x-dead-letter-exchange    这里声明当前队列绑定的死信交换机        args.put("x-dead-letter-exchange", "deadExchange");        // x-dead-letter-routing-key  这里声明当前队列的死信路由key        args.put("x-dead-letter-routing-key","dead_routing_key");        // x-message-ttl  声明队列的TTL，有效时间30s，时间一过，要是没有消费者消费，就指定到死信队列；避免暂用队列的空间，也避免队列里面会出现越来越多的死信        args.put("x-message-ttl",30000);        return QueueBuilder.durable("j177_point").withArguments(args).build();    }    @Bean    public Queue createTopicQueue(){        return new Queue("j177_topic");    }    @Bean    public Queue createFanoutQueue(){        return new Queue("j177_fanout");    }     //创建交换机    @Bean    public DirectExchange directExchange(){        return new DirectExchange("directExchange");//点到点，按路由键指定交换机发往的消息队列    }    @Bean    public TopicExchange topicExchange(){        return new TopicExchange("topicExchange");//模糊匹配，通过键可能发往到一个或多个消息队列    }    @Bean    public FanoutExchange fanoutExchange(){ return new FanoutExchange("fanoutExchange");//扇形发往消息队列，每个消息队列都能够收到扇形交换机发往的消息    }    //把队列绑定到交换机    @Bean    public Binding createPointQueueToDirectExchange(Queue createPointQueue, DirectExchange directExchange){      return BindingBuilder.bind(createPointQueue).to(directExchange).with("j177.order");    }    @Bean    public Binding createTopicQueueToTopicExchange(Queue createTopicQueue, TopicExchange topicExchange){        return BindingBuilder.bind(createTopicQueue).to(topicExchange).with("j177.#");    }    @Bean    public Binding createFanoutQueueToFanoutExchange(Queue createFanoutQueue,FanoutExchange fanoutExchange){        return BindingBuilder.bind(createFanoutQueue).to(fanoutExchange);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>java-service</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">public interface IBuyMovie {    /**     * 创建购买订单(点对点)     * @param order     * @return     */     boolean createOrderByDirect(OrderEntity order);    /**     * 创建购买订单(模糊)     * @param order     * @return     */     boolean createOrderByTopic(OrderEntity order);    /**     * 创建购买订单(扇形)     * @param order     * @return     */     boolean createOrderByFanout(OrderEntity order);    /**     * 通过callback回调函数，判断布尔b值真假，确定消息是否投递到MQ，若b==true，表明消息投递到MQ，则执行updateOrder方法，修改tag为1，表示下单成功，已出票（     * 这里把tag改为1，只是专门针对于消息成功投递到了MQ，并不代表该消息被消费者（movie服务器）接收，若消费者没有接收，才会真正的发送消息给客户，购票失败；     * ）     * @param orderNum 订单编号     * @param tag 订单状态     * @return     */     boolean updateOrder(String orderNum,int tag);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>java-serviceImpl-生产者-发送消息到队列</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Servicepublic class OrderService implements IBuyMovie{    @Autowired    RabbitTemplate rabbitTemplate;    @Autowired    private IOrderDao orderDao;    /**     * 构建生产者发送消息到MQ的回调函数，来确定消息投递到MQ是否成功，若成功好执行生产者内部的业务方法（     * 列如下面就是，判断b==true，就表明投递成功，订单系统就按照传递到MQ的唯一标识属性（orderNum）来设置tag=1，表示待出票）     */    RabbitTemplate.ConfirmCallback callback=(CorrelationData correlationData, boolean b, String s)-&gt;{        //获得MQ返回的唯一标志orderNum        String orderNum=  correlationData.getId();        if(b){            this.updateOrder(orderNum,1);        }    };    @Override    public boolean createOrderByDirect(OrderEntity order) {        boolean bl=false;        //创建订单        String orderNUm=  String.valueOf(System.currentTimeMillis());        //创建时间        LocalDate today = LocalDate.now();        DateTimeFormatter fmt = DateTimeFormatter.ofPattern("yyyy-MM-dd");        String dateStr = today.format(fmt);        order.setOrderNum(orderNUm);        order.setPlayDate(dateStr);        order.setTag(0);        //保存订单        Object object=  orderDao.save(order);      if(null!=object) {          //创建DTO          OrderDto dto = new OrderDto();          dto.setOrderNum(orderNUm);          dto.setMovieName(order.getMovieName());          dto.setMovieNum(order.getMovieNum());          dto.setPlayDate(dateStr);          //开启手动确认          rabbitTemplate.setMandatory(true);//开启消息确认          //绑定回调函数          rabbitTemplate.setConfirmCallback(callback);          //组装关联数据          CorrelationData correlationData=new CorrelationData(orderNUm);          //发送到MQ          rabbitTemplate.convertAndSend("directExchange","j177.order",dto,correlationData);        bl=true;      }        return bl;    }    @Override    public boolean createOrderByTopic(OrderEntity order) {        boolean bl=false;        //创建订单        String orderNUm=  String.valueOf(System.currentTimeMillis());        //创建时间        LocalDate today = LocalDate.now();        DateTimeFormatter fmt = DateTimeFormatter.ofPattern("yyyy-MM-dd");        String dateStr = today.format(fmt);        order.setOrderNum(orderNUm);        order.setPlayDate(dateStr);        order.setTag(0);        //保存订单        Object object=  orderDao.save(order);        if(null!=object) {            //创建DTO            OrderDto dto = new OrderDto();            dto.setOrderNum(orderNUm);            dto.setMovieName(order.getMovieName());            dto.setMovieNum(order.getMovieNum());            dto.setPlayDate(dateStr);            //发送到MQ            rabbitTemplate.convertAndSend("topicExchange","j177.order",dto);            bl=true;        }        return bl;    }    @Override    public boolean createOrderByFanout(OrderEntity order) {        boolean bl=false;        //创建订单        String orderNUm=  String.valueOf(System.currentTimeMillis());        //创建时间        LocalDate today = LocalDate.now();        DateTimeFormatter fmt = DateTimeFormatter.ofPattern("yyyy-MM-dd");        String dateStr = today.format(fmt);        order.setOrderNum(orderNUm);        order.setPlayDate(dateStr);        order.setTag(0);        //保存订单        Object object=  orderDao.save(order);        if(null!=object) {            //创建DTO            OrderDto dto = new OrderDto();            dto.setOrderNum(orderNUm);            dto.setMovieName(order.getMovieName());            dto.setMovieNum(order.getMovieNum());            dto.setPlayDate(dateStr);            //发送到MQ            rabbitTemplate.convertAndSend("fanoutExchange",dto);            bl=true;        }        return bl;    }    @Override    @Transactional    public boolean updateOrder(String orderNum,int tag) {        boolean bl=false;        int count= orderDao.updateOrder(orderNum,tag);        if(count&gt;0){            bl=true;        }        return bl;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>java-serviceIpml-消费者-从消息队列中拿取监听的消息消费</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Servicepublic class OrderMQ {    @Autowired    private IMovieDao movieDao;    @Resource    private IMovieService movieService ;   @RabbitListener(queues = {"j177_point","deadQueue"})    public void getOrderByDirect(OrderDto orderDto, Channel channel,@Header(AmqpHeaders.DELIVERY_TAG) long tag){       MovieEntity movieEntity = movieDao.findMovieEntityByMovieName(orderDto.getMovieName());       int movieNums = movieEntity.getMovieNums();       if(movieNums!=0){           int movieNum = orderDto.getMovieNum();           if(movieNums&gt;=movieNum){               movieEntity.setMovieNums(movieNums-movieNum);               movieDao.saveAndFlush(movieEntity);               movieService.updateTag(orderDto.getOrderNum(),3);               OrderMovieDto orderMovieDto = new OrderMovieDto();               orderMovieDto.setOrderNum(orderDto.getOrderNum());               orderMovieDto.setMovieName(orderDto.getMovieName());               orderMovieDto.setMovieNum(orderDto.getMovieNum());               orderMovieDto.setPrice(movieEntity.getPrice());               orderMovieDto.setPriceTotal(movieEntity.getPrice()*orderDto.getMovieNum());               orderMovieDto.setPlayDate(orderDto.getPlayDate());               orderMovieDto.setMovieStatus(3);               System.out.println("购票信息："+orderMovieDto);           }       }else{           movieService.updateTag(orderDto.getOrderNum(),4);           movieEntity.setMovieTag(1);           movieDao.saveAndFlush(movieEntity);           System.out.println("4--&gt;票已售空");       }       try {           //tag-队列中数据的标记，flase-非批量确认              channel.basicAck(tag,false);           //不确认，false不批量处理，true,不消费，继续保留在队列中//           channel.basicNack(tag,false,true);       } catch (IOException e) {           e.printStackTrace();       }    }    @RabbitListener(queues = "j177_topic")    public void getOrderByTopic(OrderDto orderDto){        System.out.println(orderDto.getMovieName());    }    @RabbitListener(queues = "j177_fanout")    public void getOrderByFanout(OrderDto orderDto){        System.out.println(orderDto.getMovieName());    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h1><table><thead><tr><th>组件</th><th>作用</th></tr></thead><tbody><tr><td>Nginx</td><td>反向代理负载均衡</td></tr><tr><td>zuul</td><td>服务路由和过滤</td></tr><tr><td>Eureka</td><td>服务治理（服务注册与发现）</td></tr><tr><td>Feign</td><td>服务器之间的远程调用</td></tr><tr><td>Hystrix</td><td>限流、降级、熔断</td></tr><tr><td>Ribbon</td><td>服务内部实现负载均衡</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue</title>
      <link href="/2021/03/04/vue/"/>
      <url>/2021/03/04/vue/</url>
      
        <content type="html"><![CDATA[<hr><h5 id="一、初识VUE"><a href="#一、初识VUE" class="headerlink" title="一、初识VUE"></a>一、初识<a href="https://huke88.com/course/64930.html">VUE</a></h5><h6 id="1、什么是vue？"><a href="#1、什么是vue？" class="headerlink" title="1、什么是vue？"></a>1、<a href="https://cn.vuejs.org/">什么是vue？</a></h6><img src="/2021/03/04/vue/image-20210304185041488.png" alt="image-20210304185041488" style="zoom:80%;"><img src="/2021/03/04/vue/image-20210304190119491.png" alt="image-20210304190119491" style="zoom:80%;"><h6 id="2、vue在前端的地位"><a href="#2、vue在前端的地位" class="headerlink" title="2、vue在前端的地位"></a>2、vue在前端的地位</h6><img src="/2021/03/04/vue/image-20210304191033540.png" alt="image-20210304191033540" style="zoom:80%;"><h6 id="3、安装软件和插件"><a href="#3、安装软件和插件" class="headerlink" title="3、安装软件和插件"></a>3、<a href="https://code.visualstudio.com/">安装软件和插件</a></h6><img src="/2021/03/04/vue/image-20210304191211377.png" alt="image-20210304191211377" style="zoom:80%;"><hr><h5 id="二、vue初体验"><a href="#二、vue初体验" class="headerlink" title="二、vue初体验"></a>二、vue初体验</h5><h6 id="1、起步"><a href="#1、起步" class="headerlink" title="1、起步"></a>1、起步</h6><img src="/2021/03/04/vue/image-20210304191709679.png" alt="image-20210304191709679" style="zoom:80%;"><h6 id="2、体验vue开发"><a href="#2、体验vue开发" class="headerlink" title="2、体验vue开发"></a>2、体验vue开发</h6><img src="/2021/03/04/vue/image-20210304191736804.png" alt="image-20210304191736804" style="zoom:80%;"><hr><h5 id="三、vue核心概念"><a href="#三、vue核心概念" class="headerlink" title="三、vue核心概念"></a>三、vue核心概念</h5><h6 id="1、ES6知识补充"><a href="#1、ES6知识补充" class="headerlink" title="1、ES6知识补充"></a>1、ES6知识补充</h6><img src="/2021/03/04/vue/image-20210304193425137.png" alt="image-20210304193425137" style="zoom:80%;"><img src="/2021/03/04/vue/image-20210304194853803.png" alt="image-20210304194853803" style="zoom:80%;"><img src="/2021/03/04/vue/image-20210304194959816.png" alt="image-20210304194959816" style="zoom:80%;"><img src="/2021/03/04/vue/image-20210304195126544.png" alt="image-20210304195126544" style="zoom:80%;"><h6 id="2、注入"><a href="#2、注入" class="headerlink" title="2、注入"></a>2、注入</h6><img src="/2021/03/04/vue/image-20210304193459539.png" alt="image-20210304193459539" style="zoom:80%;"><img src="/2021/03/04/vue/image-20210304195805806.png" alt="image-20210304195805806" style="zoom:80%;"><h6 id="3、虚拟DOM树"><a href="#3、虚拟DOM树" class="headerlink" title="3、虚拟DOM树"></a>3、虚拟DOM树</h6><img src="/2021/03/04/vue/image-20210304200038546.png" alt="image-20210304200038546" style="zoom:80%;"><img src="/2021/03/04/vue/image-20210304200516454.png" alt="image-20210304200516454" style="zoom:80%;"><img src="/2021/03/04/vue/image-20210304200546711.png" alt="image-20210304200546711" style="zoom:80%;"><h6 id="4、挂载"><a href="#4、挂载" class="headerlink" title="4、挂载"></a>4、挂载</h6><img src="/2021/03/04/vue/image-20210304201503744.png" alt="image-20210304201503744" style="zoom:80%;"><h6 id="5、完整流程"><a href="#5、完整流程" class="headerlink" title="5、完整流程"></a>5、完整流程</h6><img src="/2021/03/04/vue/image-20210304201550735.png" alt="image-20210304201550735" style="zoom:80%;"><hr><h5 id="四、模板语法和计算属性"><a href="#四、模板语法和计算属性" class="headerlink" title="四、模板语法和计算属性"></a>四、模板语法和计算属性</h5><hr><h5 id="二、vue初体验-1"><a href="#二、vue初体验-1" class="headerlink" title="二、vue初体验"></a>二、vue初体验</h5><hr><h5 id="二、vue初体验-2"><a href="#二、vue初体验-2" class="headerlink" title="二、vue初体验"></a>二、vue初体验</h5><hr><h5 id="二、vue初体验-3"><a href="#二、vue初体验-3" class="headerlink" title="二、vue初体验"></a>二、vue初体验</h5><hr><h5 id="二、vue初体验-4"><a href="#二、vue初体验-4" class="headerlink" title="二、vue初体验"></a>二、vue初体验</h5><hr><h5 id="二、vue初体验-5"><a href="#二、vue初体验-5" class="headerlink" title="二、vue初体验"></a>二、vue初体验</h5><hr><h5 id="二、vue初体验-6"><a href="#二、vue初体验-6" class="headerlink" title="二、vue初体验"></a>二、vue初体验</h5><hr><h5 id="二、vue初体验-7"><a href="#二、vue初体验-7" class="headerlink" title="二、vue初体验"></a>二、vue初体验</h5>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>深入shiro</title>
      <link href="/2021/03/04/shen-ru-shiro/"/>
      <url>/2021/03/04/shen-ru-shiro/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot</title>
      <link href="/2021/03/04/springboot/"/>
      <url>/2021/03/04/springboot/</url>
      
        <content type="html"><![CDATA[<hr><hr><hr><p><a href="https://huke88.com/course/62432.html?pageType=1&amp;key=springboot&amp;identify=1614794598"><em>你真的了解SpringBoot吗？</em></a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ssm</title>
      <link href="/2021/03/04/ssm/"/>
      <url>/2021/03/04/ssm/</url>
      
        <content type="html"><![CDATA[<hr><hr><p><a href="https://huke88.com/course/51016.html?pageType=1&amp;key=ssm&amp;identify=1614794092">你真的了解SSM吗？</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SVN和GIT</title>
      <link href="/2021/03/03/svn-he-git/"/>
      <url>/2021/03/03/svn-he-git/</url>
      
        <content type="html"><![CDATA[<hr><h4 id="一、SVN"><a href="#一、SVN" class="headerlink" title="一、SVN"></a>一、<a href="https://huke88.com/course/32251.html">SVN</a></h4><img src="/2021/03/03/svn-he-git/image-20210303221109640.png" alt="image-20210303221109640" style="zoom:80%;"><h5 id="lt-1-gt-SVN的简介"><a href="#lt-1-gt-SVN的简介" class="headerlink" title="<1>SVN的简介"></a>&lt;1&gt;SVN的简介</h5><h6 id="1、svn是什么？"><a href="#1、svn是什么？" class="headerlink" title="1、svn是什么？"></a>1、<a href="https://subversion.apache.org/download">svn是什么？</a></h6><img src="/2021/03/03/svn-he-git/image-20210303213211094.png" alt="image-20210303212729127" style="zoom:80%;"><h6 id="2、作用"><a href="#2、作用" class="headerlink" title="2、作用"></a>2、作用</h6><img src="/2021/03/03/svn-he-git/image-20210303213211095.png" alt="image-20210303213211095" style="zoom:80%;"><h6 id="3、基本操作"><a href="#3、基本操作" class="headerlink" title="3、基本操作"></a>3、基本操作</h6><img src="/2021/03/03/svn-he-git/image-20210303214307831.png" alt="image-20210303214307831" style="zoom:80%;"><hr><h5 id="lt-2-gt-服务器端的软件下载和安装"><a href="#lt-2-gt-服务器端的软件下载和安装" class="headerlink" title="<2>服务器端的软件下载和安装"></a>&lt;2&gt;服务器端的软件下载和安装</h5><h6 id="1、下载"><a href="#1、下载" class="headerlink" title="1、下载"></a>1、<a href="https://sourceforge.net/projects/win32svn/">下载</a></h6><img src="/2021/03/03/svn-he-git/image-20210303215341681.png" alt="image-20210303215341681" style="zoom:80%;"><h6 id="2、查看环境变量"><a href="#2、查看环境变量" class="headerlink" title="2、查看环境变量"></a>2、查看环境变量</h6><img src="/2021/03/03/svn-he-git/image-20210303220526085.png" alt="image-20210303220526085" style="zoom:80%;"><h6 id="3、验证安装是否成功"><a href="#3、验证安装是否成功" class="headerlink" title="3、验证安装是否成功"></a>3、验证安装是否成功</h6><img src="/2021/03/03/svn-he-git/image-20210303220132557.png" alt="image-20210303220132557" style="zoom:80%;"><img src="/2021/03/03/svn-he-git/image-20210303220730669.png" alt="image-20210303220730669" style="zoom:80%;"><hr><h5 id="lt-3-gt-创建项目版本库"><a href="#lt-3-gt-创建项目版本库" class="headerlink" title="<3>创建项目版本库"></a>&lt;3&gt;创建项目版本库</h5><h6 id="1、创建项目版本库（svn-reponsitory）"><a href="#1、创建项目版本库（svn-reponsitory）" class="headerlink" title="1、创建项目版本库（svn reponsitory）"></a>1、创建项目版本库（svn reponsitory）</h6><img src="/2021/03/03/svn-he-git/image-20210303221444016.png" alt="image-20210303221444016" style="zoom:80%;"><img src="/2021/03/03/svn-he-git/image-20210303221938260.png" alt="image-20210303221938260" style="zoom:80%;"><img src="/2021/03/03/svn-he-git/image-20210303222320395.png" alt="image-20210303222320395" style="zoom:80%;"><img src="/2021/03/03/svn-he-git/image-20210303223359135.png" alt="image-20210303223359135" style="zoom:80%;"><h6 id="2、svn版本控制文件说明"><a href="#2、svn版本控制文件说明" class="headerlink" title="2、svn版本控制文件说明"></a>2、svn版本控制文件说明</h6><blockquote><p>1、conf：有关项目权限的配置</p><p>2、db：svn保存项目各个版本源代码的地方</p><p>3、hooks：勾子，一个触发器，当员工提交代码到svn服务器上的时候，都需要给项目经理发送份邮件，通过hooks即可实现，对我们提交代码的时候就会触发这个钩子，钩子就会自动给项目经理发送一份邮件</p><p>4、locks：svn提交代码出问题的时候，会自动把我们的源代码锁掉；或者说员工离职了，我们就在conf配置文件中把该员工的账号信息删除掉，如果再在远端提交更新的话，源代码就会被锁死</p><p>5、format和README.txt是版本信息</p></blockquote><hr><h5 id="lt-4-gt-、服务端的启动方法"><a href="#lt-4-gt-、服务端的启动方法" class="headerlink" title="<4>、服务端的启动方法"></a>&lt;4&gt;、服务端的启动方法</h5><blockquote><p>SVN服务器和Tomcat、Nexus服务器一样，必须处于运行状态才能响应客户端请求，帮助我们管理项目文件。</p></blockquote><h6 id="1、方法一（不推荐）："><a href="#1、方法一（不推荐）：" class="headerlink" title="1、方法一（不推荐）："></a>1、方法一（不推荐）：</h6><img src="/2021/03/03/svn-he-git/image-20210303225610288.png" alt="image-20210303225610288" style="zoom:80%;"><img src="/2021/03/03/svn-he-git/image-20210303231443263.png" alt="image-20210303231443263" style="zoom:80%;"><img src="/2021/03/03/svn-he-git/image-20210303231850130.png" alt="image-20210303231850130" style="zoom:80%;"><h6 id="2、方法二（推荐）："><a href="#2、方法二（推荐）：" class="headerlink" title="2、方法二（推荐）："></a>2、方法二（推荐）：</h6><img src="/2021/03/03/svn-he-git/image-20210303230218782.png" alt="image-20210303230218782" style="zoom:80%;"><img src="/2021/03/03/svn-he-git/image-20210303232700336.png" alt="image-20210303232700336" style="zoom:80%;"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#1、管理员cmd执行命令，创建服务svnserver：sc create svnserver binpath= "E:\svn_install\bin\svnserve.exe --service -r E:\svn_install\svnreponsitory" start= auto depend= Tcpip#2、启动服务sc start svnserver#3、关闭服务sc stop svnserver#4、删除服务sc delete svnserver@总结：这样启动的好处：1、路径(E:\svn_install\svnreponsitory)文件夹下的项目全部启动了2、关闭的话执行命令即可<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h5 id="lt-5-gt-用命令行的方式检出更新提交"><a href="#lt-5-gt-用命令行的方式检出更新提交" class="headerlink" title="<5>用命令行的方式检出更新提交"></a>&lt;5&gt;用命令行的方式检出更新提交</h5><h6 id="1、conf文件夹下开启权限"><a href="#1、conf文件夹下开启权限" class="headerlink" title="1、conf文件夹下开启权限"></a>1、conf文件夹下开启权限</h6><img src="/2021/03/03/svn-he-git/image-20210303235714668.png" alt="image-20210303235714668" style="zoom:80%;"><img src="/2021/03/03/svn-he-git/image-20210304000036872.png" alt="image-20210304000036872" style="zoom:80%;"><h6 id="2、模拟客户端访问服务器"><a href="#2、模拟客户端访问服务器" class="headerlink" title="2、模拟客户端访问服务器"></a>2、模拟客户端访问服务器</h6><blockquote><p>模拟两个程序员访问svn服务器上的项目</p><p>下载项目到本地：svn checkout svn://svn服务器ip/项目名</p><p>文件（代码）纳入版本控制：svn add 文件名</p><p>上传更新后项目到svn服务器：svn commit “注释”</p><p>更新本地下载的项目：svn update</p></blockquote><img src="/2021/03/03/svn-he-git/image-20210304000204414.png" alt="image-20210304000204414" style="zoom:80%;"><img src="/2021/03/03/svn-he-git/image-20210304001435945.png" alt="image-20210304001435945" style="zoom:80%;"><h6 id="3、工作副本的几种状态"><a href="#3、工作副本的几种状态" class="headerlink" title="3、工作副本的几种状态"></a>3、工作副本的几种状态</h6><p><em>工作副本即程序员从svn服务器上checkout到本地的项目文件</em></p><img src="/2021/03/03/svn-he-git/image-20210304001805356.png" alt="image-20210304001805356" style="zoom:80%;"><img src="/2021/03/03/svn-he-git/image-20210304002112064.png" alt="image-20210304002112064" style="zoom:80%;"><hr><h5 id="lt-6-gt-通过命令行查询工作副本的信息和日志"><a href="#lt-6-gt-通过命令行查询工作副本的信息和日志" class="headerlink" title="<6>通过命令行查询工作副本的信息和日志"></a>&lt;6&gt;通过命令行查询工作副本的信息和日志</h5><img src="/2021/03/03/svn-he-git/image-20210304004746138.png" alt="image-20210304004746138" style="zoom:80%;"><img src="/2021/03/03/svn-he-git/image-20210304005032265.png" alt="image-20210304005032265" style="zoom:80%;"><hr><h5 id="lt-7-gt-用命令的方式将工作副本回复到某个历史版本的状态"><a href="#lt-7-gt-用命令的方式将工作副本回复到某个历史版本的状态" class="headerlink" title="<7>用命令的方式将工作副本回复到某个历史版本的状态"></a>&lt;7&gt;用命令的方式将工作副本回复到某个历史版本的状态</h5><blockquote><p>整个项目：svn update –revision 版本号</p><p>某个文件：svn update 文件名 –revision 版本号</p></blockquote><h6 id="1、整个项目"><a href="#1、整个项目" class="headerlink" title="1、整个项目"></a>1、整个项目</h6><img src="/2021/03/03/svn-he-git/image-20210304005931025.png" alt="image-20210304005931025" style="zoom:80%;"><h6 id="2、某个文件"><a href="#2、某个文件" class="headerlink" title="2、某个文件"></a>2、某个文件</h6><img src="/2021/03/03/svn-he-git/image-20210304010607610.png" alt="image-20210304010607610" style="zoom:80%;"><h6 id="3、总结"><a href="#3、总结" class="headerlink" title="3、总结"></a>3、总结</h6><img src="/2021/03/03/svn-he-git/image-20210304011151972.png" alt="image-20210304011151972" style="zoom:80%;"><hr><hr><h4 id="二、GIT"><a href="#二、GIT" class="headerlink" title="二、GIT"></a>二、<a href="https://huke88.com/course/54815.html?pageType=1&amp;key=svn%E5%92%8Cgit&amp;identify=1614777769">GIT</a></h4>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>jwt+shiro</title>
      <link href="/2021/03/02/jwt-shiro/"/>
      <url>/2021/03/02/jwt-shiro/</url>
      
        <content type="html"><![CDATA[<hr><h5 id="一、shiro快速开始"><a href="#一、shiro快速开始" class="headerlink" title="一、shiro快速开始"></a>一、shiro<a href="http://shiro.apache.org/">快速开始</a></h5><pre class="line-numbers language-none"><code class="language-none">subject:用户SecuirtyManager:管理所有用户Realm:连接数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/2021/03/02/jwt-shiro/image-20210302201338573.png" alt="image-20210302201338573" style="zoom:80%;"><img src="/2021/03/02/jwt-shiro/image-20210302202742842.png" alt="image-20210302202742842" style="zoom:80%;"><img src="/2021/03/02/jwt-shiro/format,f_auto" alt="img" style="zoom:80%;"><img src="/2021/03/02/jwt-shiro/image-20210302203002766.png" alt="image-20210302203002766" style="zoom:80%;"><img src="/2021/03/02/jwt-shiro/format,f_auto1" alt="img" style="zoom:80%;"><hr><h6 id="1、构建项目"><a href="#1、构建项目" class="headerlink" title="1、构建项目"></a>1、构建项目</h6><blockquote><p>1、导入依赖</p><p>2、配置文件</p><p>3、hello word</p></blockquote><img src="/2021/03/02/jwt-shiro/image-20210302212538914.png" alt="image-20210302212538914" style="zoom:80%;"><hr><h6 id="2、Shiro的Subject分析"><a href="#2、Shiro的Subject分析" class="headerlink" title="2、Shiro的Subject分析"></a>2、Shiro的Subject分析</h6><img src="/2021/03/02/jwt-shiro/image-20210302235713594.png" alt="image-20210302235713594" style="zoom:80%;"><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Quickstart {    private static final transient Logger log = LoggerFactory.getLogger(Quickstart.class);    public static void main(String[] args) {        Factory&lt;SecurityManager&gt; factory = new IniSecurityManagerFactory("classpath:shiro.ini");        SecurityManager securityManager = factory.getInstance();        SecurityUtils.setSecurityManager(securityManager);        // 获取当前的用户对象Subject        Subject currentUser = SecurityUtils.getSubject();        // 通过当前用户拿到Session，通过Session来存取值        Session session = currentUser.getSession();        session.setAttribute("someKey", "aValue");        String value = (String) session.getAttribute("someKey");        if (value.equals("aValue")) {            log.info("Retrieved the correct value! [" + value + "]");        }        // 判断当前的用户是否被认证        if (!currentUser.isAuthenticated()) {            //被认证后拿去用户的用户名和密码生成令牌token            UsernamePasswordToken token = new UsernamePasswordToken("lonestarr", "vespa");            //设置记住我            token.setRememberMe(true);            try {                //执行登录操作                currentUser.login(token);            } catch (UnknownAccountException uae) {                //用户名出错误                log.info("There is no user with username of " + token.getPrincipal());            } catch (IncorrectCredentialsException ice) {                //密码错误                log.info("Password for account " + token.getPrincipal() + " was incorrect!");            } catch (LockedAccountException lae) {                //几次登录失败，用户被锁定了                log.info("The account for username " + token.getPrincipal() + " is locked.  " +                        "Please contact your administrator to unlock it.");            }            // ... catch more exceptions here (maybe custom ones specific to your application?            catch (AuthenticationException ae) {                //unexpected condition?  error?            }        }        //currentUser.getPrincipal()表示获取当前用户的信息        log.info("User [" + currentUser.getPrincipal() + "] logged in successfully.");        //测试当前用户有没有该角色（shiro.ini中设定的角色）        if (currentUser.hasRole("schwartz")) {            log.info("May the Schwartz be with you!");        } else {            log.info("Hello, mere mortal.");        }        //测试当前用户有没有该权限（shiro.ini中设定的权限）——这里设置的是更简单的权限        if (currentUser.isPermitted("lightsaber:wield")) {            log.info("You may use a lightsaber ring.  Use it wisely.");        } else {            log.info("Sorry, lightsaber rings are for schwartz masters only.");        }        //测试当前用户有没有更高级的权限（shiro.ini中设定的权限）        if (currentUser.isPermitted("winnebago:drive:eagle5")) {            log.info("You are permitted to 'drive' the winnebago with license plate (id) 'eagle5'.  " +                    "Here are the keys - have fun!");        } else {            log.info("Sorry, you aren't allowed to drive the 'eagle5' winnebago!");        }        //注销        currentUser.logout();        System.exit(0);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h6 id="3、SpringBoot整合Shiro环境搭建"><a href="#3、SpringBoot整合Shiro环境搭建" class="headerlink" title="3、SpringBoot整合Shiro环境搭建"></a>3、SpringBoot整合Shiro环境搭建</h6><blockquote><p>1、Shiro整合spring包</p><p>2、配置文件：ShiroConfig</p><p>3、自定义realm类：UserRealm</p></blockquote><pre class="line-numbers language-xaml" data-language="xaml"><code class="language-xaml">&lt;!--Shiro整合Spring的包--&gt; &lt;dependency&gt;     &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;     &lt;artifactId&gt;shiro-spring&lt;/artifactId&gt;     &lt;version&gt;1.4.1&lt;/version&gt; &lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configurationpublic class ShiroConfig {    //ShiroFilterFactoryBean Shiro过滤的Bean    @Bean    public ShiroFilterFactoryBean getShiroFilterFactoryBean(@Qualifier("securityManager")DefaultWebSecurityManager defaultWebSecurityManager){        ShiroFilterFactoryBean bean = new ShiroFilterFactoryBean();        //设置安全管理器        bean.setSecurityManager(defaultWebSecurityManager);               /**         * 添加shiro的内置过滤器(表示通过一个map设置过滤器链)         * anon:无需认证就可以访问         * authc:必须认证了才能访问         * user:必须用有了 rememberMe 功能才能访问         * perms:拥有某个资源的权限才能访问         * role:拥有某个角色权限才能访问         */        Map&lt;String, String&gt; filterMap = new LinkedHashMap&lt;&gt;();        //下面两个put整合在一起使用通配符*：filterMap.put("/user/*","authc");        filterMap.put("/user/add","authc");        filterMap.put("/user/update","authc");        //授权,未授权跳转到未授权页面        filterMap.put("/user/add","perms[user:add]");        filterMap.put("/user/update","perms[user:update]");        bean.setFilterChainDefinitionMap(filterMap);        //设置未授权跳转页面        bean.setUnauthorizedUrl("/noauth");        //设置登录请求跳转页面        bean.setLoginUrl("/toLogin");                return bean;    }    //DefaultWebSecurityManager 安全对象    @Bean(name = "securityManager")    public DefaultWebSecurityManager getDefaultWebSecurityManager(@Qualifier("userRealm") UserRealm userRealm){        DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();        //关联UserRealm        securityManager.setRealm(userRealm);        return securityManager;    }    //创建realm对象，需要自定义类(UserRealm)    @Bean(name = "userRealm")    public UserRealm userRealm(){        return new UserRealm();    }    //整合ShiroDialect:用来整合shiro thymeleaf    @Bean    public ShiroDialect getShiroDialect(){        return new ShiroDialect();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">/** * 自定义的UserRealm需要继承AuthorizingRealm重写里面的方法  （认证和授权） */public class UserRealm extends AuthorizingRealm {    @Autowired    UserService userService;    //授权    @Override    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {        System.out.println("执行了==&gt;&gt;授权doGetAuthorizationInfo");        //找到AuthorizationInfo实现类SimpleAuthorizationInfo        SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();        //获取登录用户对象，前提在认证所传递的三个参数中的第一个prinicpal即为认证成功的用户对象        Subject subject = SecurityUtils.getSubject();        User user = (User) subject.getPrincipal();        //按用户持有的权限给用户授权        info.addStringPermission(user.getPerms());        return info;    }    //认证    @Override    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {        System.out.println("执行了==&gt;&gt;认证doGetAuthorizationInfo");        //authenticationToken即为登录时保存的用户信息        UsernamePasswordToken token = (UsernamePasswordToken)authenticationToken;        //用户名不存在，抛出异常UnknownAccountException        User user = userService.queryUserByName(token.getUsername());        if(null==user){            System.out.println("用户名不存在，抛出异常UnknownAccountException");            return null;        }        /**         * 注：密码的验证是交给shrio来做的，为了安全         * shiro提供密码加密（1、md5加密_把密码直接加密；2、md5盐值加密_除了密码还额加一些属性）         * SimpleAuthenticationInfo是AuthenticationInfo的实现类         * prinicpal登录成功的用户对象，供授权时使用         * credentials密码         * realmName认证名         */        return new SimpleAuthenticationInfo(user,user.getPwd(),"");    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h6 id="4、Shiro实现登录拦截"><a href="#4、Shiro实现登录拦截" class="headerlink" title="4、Shiro实现登录拦截"></a>4、Shiro实现登录拦截</h6><blockquote><p>ShiroFilterFactoryBean里面添加内置过滤器，即登录认证之后才能够访问对应路径下的页面</p><p>如下：路径”/user/add”和”/user/update”作为键，”authc”作为值，authc则表示用户需要登录认证之后才能访问这两个页面</p></blockquote><img src="/2021/03/02/jwt-shiro/image-20210302233644427.png" alt="image-20210302233644427" style="zoom:80%;"><hr><h6 id="5、Shiro实现用户认证"><a href="#5、Shiro实现用户认证" class="headerlink" title="5、Shiro实现用户认证"></a>5、Shiro实现用户认证</h6><blockquote><p>1、登录过程中要用到Subject和封装UsernamePasswordToken</p><p>2、认证是交给自定义reaml类UserRealm完成的，通过继承AuthorizingRealm实现的doGetAuthenticationInfo(AuthenticationToken authenticationToken)方法，其中authenticationToken即为登录时保存的用户数据（用户名和密码）</p><p>3、密码的校验是交给shrio框架完成的</p></blockquote><img src="/2021/03/02/jwt-shiro/image-20210303004459026.png" alt="image-20210303004459026" style="zoom:80%;"><img src="/2021/03/02/jwt-shiro/image-20210303004709818.png" alt="image-20210303004709818" style="zoom:80%;"><hr><h6 id="6、Shrio整合Mybatis"><a href="#6、Shrio整合Mybatis" class="headerlink" title="6、Shrio整合Mybatis"></a>6、Shrio整合Mybatis</h6><img src="/2021/03/02/jwt-shiro/image-20210303011758473.png" alt="image-20210303011758473" style="zoom:80%;"><blockquote><p>shrio里面提供对用户登录密码加密()</p><p>1、md5加密__把密码直接加密；_</p><p>2、md5盐值加密_除了密码还额加一些属性</p></blockquote><img src="/2021/03/02/jwt-shiro/image-20210303021354038.png" alt="image-20210303021354038" style="zoom:80%;"><hr><h6 id="7、Shiro请求授权实现"><a href="#7、Shiro请求授权实现" class="headerlink" title="7、Shiro请求授权实现"></a>7、Shiro请求授权实现</h6><blockquote><p>perms[user:add]表示拥有了user:add这个资源才能访问</p><p>因此每个用户登录成功后根据自己持有的资源（数据库字段）就能够实现不同用户访问不同的页面了（路径）</p><p>因此在数据库里面就要事先确定好某用户具备某资源能访问某页面，授权里面的登录对象需要在认证的时候就得保存，供授权时使用</p></blockquote><img src="/2021/03/02/jwt-shiro/image-20210303025518058.png" alt="image-20210303025518058" style="zoom:80%;"><img src="/2021/03/02/jwt-shiro/image-20210303034151095.png" alt="image-20210303034151095" style="zoom:80%;"><hr><h6 id="8、Shiro整合Thymeleaf"><a href="#8、Shiro整合Thymeleaf" class="headerlink" title="8、Shiro整合Thymeleaf"></a>8、Shiro整合Thymeleaf</h6><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--Shiro整合Thymeleaf --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.github.theborakompanioni<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>thymeleaf-extras-shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">//整合ShiroDialect:用来整合shiro thymeleaf@Beanpublic ShiroDialect getShiroDialect(){    return new ShiroDialect();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2021/03/02/jwt-shiro/image-20210303041625342.png" alt="image-20210303041625342" style="zoom:80%;"><img src="/2021/03/02/jwt-shiro/image-20210303041758116.png" alt="image-20210303041758116" style="zoom:80%;"><hr><p><a href="https://www.bilibili.com/video/BV1NE411i7S8?from=search&amp;seid=5679324005303288660">视频</a></p><p><a href="">源码</a></p><hr><h5 id="二、jwt快速开始"><a href="#二、jwt快速开始" class="headerlink" title="二、jwt快速开始"></a>二、jwt快速开始</h5>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>spring-security 安全认证</title>
      <link href="/2021/02/19/spring-security-an-quan-ren-zheng/"/>
      <url>/2021/02/19/spring-security-an-quan-ren-zheng/</url>
      
        <content type="html"><![CDATA[<hr><p><a href="https://www.bilibili.com/video/BV1KE411i7bC?from=search&amp;seid=3490859130575145565">视频</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SSO单点登录</title>
      <link href="/2021/02/18/sso-dan-dian-deng-lu/"/>
      <url>/2021/02/18/sso-dan-dian-deng-lu/</url>
      
        <content type="html"><![CDATA[<hr><h5 id="一、什么是单点登录？"><a href="#一、什么是单点登录？" class="headerlink" title="一、什么是单点登录？"></a>一、什么是单点登录？</h5><p>单点登录简称SSO（Single Sign On） ，列如登录京东官网，点开几个栏目，发现主域名一样(jd.com)，而子域名是不一样的(miaosha.jd.com);在任何一个栏目进行登录再去点开其它的栏目发现也登录了，这就是单点登录。</p><img src="/2021/02/18/sso-dan-dian-deng-lu/image-20210218110519430.png" alt="image-20210218110519430" style="zoom:80%;"><img src="/2021/02/18/sso-dan-dian-deng-lu/image-20210218110622847.png" alt="image-20210218110622847" style="zoom:80%;"><img src="/2021/02/18/sso-dan-dian-deng-lu/image-20210218110739959.png" alt="image-20210218110739959" style="zoom:80%;"><hr><h5 id="二、通过cookie实现SSO"><a href="#二、通过cookie实现SSO" class="headerlink" title="二、通过cookie实现SSO"></a>二、通过cookie实现SSO</h5><img src="/2021/02/18/sso-dan-dian-deng-lu/image-20210218111815244.png" alt="image-20210218111815244" style="zoom:80%;"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#上面这个需求中，告诉这代码商店有四个子系统，无论在那个系统登录都会跳转到登录系统，完成登陆后向发起登录的子系统写入一个cookie（用来在客户端存取数据的工具），保存用于认证用户是否登录的信息（token），其它的子系统要能访问到这个cookie，在其它子系统向服务器发送请求的时候，携带这个cookie完成登录。前提是：cookie的域要是所有子系统相同的域，这样所有的子系统才能访问得到这个cookie。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h5 id="三、编码来实现SSO"><a href="#三、编码来实现SSO" class="headerlink" title="三、编码来实现SSO"></a>三、编码来实现SSO</h5><h6 id="1、基于Gradle实现"><a href="#1、基于Gradle实现" class="headerlink" title="1、基于Gradle实现"></a>1、基于Gradle实现</h6><img src="/2021/02/18/sso-dan-dian-deng-lu/image-20210218193558203.png" alt="image-20210218193558203" style="zoom:80%;"><img src="/2021/02/18/sso-dan-dian-deng-lu/image-20210218113400543.png" alt="image-20210218113400543" style="zoom:80%;"><h6 id="2、创建sso-use-cookie父模块和sso-main、sso-cart、sso-vip、sso-login四个子模块"><a href="#2、创建sso-use-cookie父模块和sso-main、sso-cart、sso-vip、sso-login四个子模块" class="headerlink" title="2、创建sso-use-cookie父模块和sso-main、sso-cart、sso-vip、sso-login四个子模块"></a>2、创建sso-use-cookie父模块和sso-main、sso-cart、sso-vip、sso-login四个子模块</h6><img src="/2021/02/18/sso-dan-dian-deng-lu/image-20210218114648916.png" alt="image-20210218114648916" style="zoom:80%;"><h6 id="3、sso-use-cookie"><a href="#3、sso-use-cookie" class="headerlink" title="3、sso-use-cookie"></a>3、sso-use-cookie</h6><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#在sso-use-cookie父模块下指定Gradle依赖下载地址1、指定buildscript优先使用本地本地仓库，再使用maven的中央仓库    repositories {        mavenLocal()        mavenCentral()    }2、指定springboot版本    ext {       springBootVersion = '2.3.0.RELEASE'    }3、导入springboot引用插件    dependencies {        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"    }4、给每个子模块导入依赖，通过subprojects,首先各个子模块group和version相同，定义在一起就好；都是java工程，然后通过apply plugin导入java插件、spring依赖管理插件、springboot插件；子模块导入依赖通过dependencies；由于在父模块中已经定义了相关依赖，对应的四个子模块中的配置文件可全部删除subprojects {    group 'com.sso'    version '1.0-SNAPSHOT'    apply Plugin: "java"    apply Plugin: "io.spring.dependency-management"    apply Plugin: "org.springframework.boot"    dependencies {        compile 'org.springframework.boot:spring-boot-starter-web'        compile 'org.springframework.boot:spring-boot-starter-thymeleaf'        annotationProcessor 'org.projectlombok:lombok:1.18.2'        compileOnly 'org.projectlombok:lombok:1.18.2'    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2021/02/18/sso-dan-dian-deng-lu/image-20210218160204759.png" alt="image-20210218160204759" style="zoom:80%;"><img src="/2021/02/18/sso-dan-dian-deng-lu/image-20210218160940046.png" style="zoom:80%;"><img src="/2021/02/18/sso-dan-dian-deng-lu/image-20210218162533553.png" alt="image-20210218162533553" style="zoom:80%;"><h6 id="4、sso-login、sso-main、sso-vip、sso-cart"><a href="#4、sso-login、sso-main、sso-vip、sso-cart" class="headerlink" title="4、sso-login、sso-main、sso-vip、sso-cart"></a>4、sso-login、sso-main、sso-vip、sso-cart</h6><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#步骤1、配置sso-login配置文件application.yml和写启动类LoginApp2、用teymeleaf模板做页面展示，在sso-use-cookie的build.gradle中添加依赖；3、创建实体类User；4、创建控制类：LoginController和ViewController；controller中的只能使用@Controller的注解，不能使用@RestController；#只能使用@Controller的注解参考文章：【https://blog.csdn.net/qq_36838406/article/details/100867004】5、在Resources的templates文件夹下创建login.html网页;6、启动类LoginApp，访问ViewController中的方法，跳转到登录页面；7、同理编写sso-main、sso-vip、sso-cart子模块<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2021/02/18/sso-dan-dian-deng-lu/image-20210218214812190.png" alt="image-20210218214812190" style="zoom:80%;"><img src="/2021/02/18/sso-dan-dian-deng-lu/image-20210218214850335.png" alt="image-20210218214850335" style="zoom:80%;"><img src="/2021/02/18/sso-dan-dian-deng-lu/image-20210218221828129.png" alt="image-20210218221828129" style="zoom:80%;"><img src="/2021/02/18/sso-dan-dian-deng-lu/image-20210218221902760.png" alt="image-20210218221902760" style="zoom:80%;"><img src="/2021/02/18/sso-dan-dian-deng-lu/image-20210218221919961.png" alt="image-20210218221919961" style="zoom:80%;"><h6 id="5、登录"><a href="#5、登录" class="headerlink" title="5、登录"></a>5、登录</h6><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#步骤：1、根据需求把几个系统的IP地址（域名）进行映射；#什么是域名映射？访问给定的域名就是到映射的IP地址上去windows管理员启动windows PowerShell ，输入命令notepad hosts编辑hosts文件，文件尾加入域名映射：127.0.0.1www.lujiahong.com    127.0.0.1main.lujiahong.com    127.0.0.1vip.lujiahong.com    127.0.0.1cart.lujiahong.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2021/02/18/sso-dan-dian-deng-lu/image-20210218225459844.png" style="zoom:80%;"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">2、域名映射好后，去ping域名，都可访问成功<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2021/02/18/sso-dan-dian-deng-lu/image-20210218225052056.png" style="zoom:80%;"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">3、配置好域名后在sso-mian、sso-vip、sso-cart系统里面添加登录按钮，实现跳转到登录系统；由于登录成功后要跳转到发起登录的页面，因此登录的时候要带上发起登录页面的域名（IP地址），因此登录跳转连接上要携带这个参数；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2021/02/18/sso-dan-dian-deng-lu/image-20210219001252243.png" alt="image-20210219001252243" style="zoom:80%;"><img src="/2021/02/18/sso-dan-dian-deng-lu/image-20210218231609854.png" alt="image-20210218231609854" style="zoom:80%;"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">4、编写登录页面的业务逻辑（除登录系统登录成功跳转到主页面，其它系统登录成功，跳转到发起登录系统界面），写个工具LoginCache来保存用户信息；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">#ViewController/** * 页面跳转的逻辑 * 做页面跳转必须是@Controller不能是@RestController，参考文章：https://blog.csdn.net/qq_36838406/article/details/94220890 */@Controller@RequestMapping("/view")public class ViewController {    /**     * 跳转到登录页面     * @RequestParam表明不是从其它系统进入的登录系统，而直接进入的登录系统，那么定义默认target为空     * @return     */    @GetMapping("/login")    public String toLogin(@RequestParam(required = false,defaultValue = "") String target, HttpSession session){        //若为空，则默认登录后跳转到主页面去        if(StringUtils.isEmpty(target)){            target="http://www.lujiahong.com:9010";        }        //TPDO；要做target地址是否合法的校验        //不为空存到session里面去,重定向地址        session.setAttribute("target",target);        return "login";    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">#LoginController/** *登录判断，页面跳转 */@Controller@RequestMapping("/login")public class LoginController {    private static Set&lt;User&gt; dbUsers;    static {        dbUsers=new HashSet&lt;&gt;();        dbUsers.add(new User(1,"tom","666"));        dbUsers.add(new User(2,"jack","777"));        dbUsers.add(new User(3,"lisa","888"));    }    @PostMapping    public String doLogin(User user, HttpSession session){        //获取发起登录页面的IP地址        String target = (String) session.getAttribute("target");        //模拟从数据库中通过登录的用户名和密码去查找数据库中的用户        Optional&lt;User&gt; first = dbUsers.stream().filter(dbUser -&gt; dbUser.getUsername().equals(user.getUsername()) &amp;&amp;                dbUser.getPassword().equals(user.getPassword()))                .findFirst();        //判断用户是否登录        if(first.isPresent()){        //登录成功,保存用户登录信息            String token = UUID.randomUUID().toString();            LoginCache.loginUser.put(token,first.get() );        }else {            //登录失败            session.setAttribute("msg","用户名或密码错误");            return "login";        }        //重定向到target地址        return "redirect:"+target;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">#LoginCache/** * 登录缓存用户信息 */public class LoginCache {    //定义一个集合来装登录的用户信息    public static Map&lt;String, User&gt; loginUser = new HashMap&lt;&gt;();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html">#login.html<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Login Module<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>欢迎来到登录界面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token style-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token style language-css"><span class="token property">color</span><span class="token punctuation">:</span> red</span><span class="token punctuation">"</span></span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${session.msg}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/login<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">&gt;</span></span>用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">&gt;</span></span>密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="6、控制登录成功后不许跳转到登录系统页面了"><a href="#6、控制登录成功后不许跳转到登录系统页面了" class="headerlink" title="6、控制登录成功后不许跳转到登录系统页面了"></a>6、控制登录成功后不许跳转到登录系统页面了</h6><blockquote><p>通过cookie来实现，一旦登录了，不管在哪个子系统点登录按钮都不会跳转到登录界面了（前提：1、cookie对象不为空；2、各子系统主域名相同）</p></blockquote><img src="/2021/02/18/sso-dan-dian-deng-lu/image-20210219010143348.png" alt="image-20210219010143348" style="zoom:80%;"><img src="/2021/02/18/sso-dan-dian-deng-lu/image-20210219010221996.png" alt="image-20210219010221996" style="zoom:80%;"><img src="/2021/02/18/sso-dan-dian-deng-lu/image-20210219013010692.png" alt="image-20210219013010692" style="zoom:80%;"><h6 id="7、登录成功后不在展示登录按钮"><a href="#7、登录成功后不在展示登录按钮" class="headerlink" title="7、登录成功后不在展示登录按钮"></a>7、登录成功后不在展示登录按钮</h6><blockquote><p>RestTemplate远程调用，按token获取用户信息；</p><p>thymeleaf来实现按钮的展示与否</p></blockquote><img src="/2021/02/18/sso-dan-dian-deng-lu/image-20210219023507940.png" alt="image-20210219023507940" style="zoom:80%;"><pre class="line-numbers language-html" data-language="html"><code class="language-html">#主页thymeleaf的书写<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/1999/xhtml<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>欢迎来到Main<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${session.loginUser==null}<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.lujiahong.com:9000/view/login?target=http://www.lujiahong.com:9010/view/index<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>unless</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${session.loginUser==null}<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>退出<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>unless</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${session.loginUser==null}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${session.loginUser.username}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">&gt;</span></span>已登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#为啥要用@CookieValue(required = false,value = "TOKEN") Cookie cookie？1、登录成功后Cookie对象里面存取了一个，键为TOKEN，值为token（由UUID生成）；工具类LoginCache用来存放登录用户信息，以token为键，以用户信息对象为值；2、在登录接口里面做了逻辑判断，即Cookie对象不为空、token不为空，则存在登录用户，所以不用重新登录，直接返回主页面；反之没有用户登录，需跳转到登录页面子系统；而这里required设为false，在cookie对象为空，即没有用户登录过的时候访问此接口不会报错，value为TOKEN表示登录成功后所存的Cookie对象的键为TOKEN<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h6 id="8、退出登录"><a href="#8、退出登录" class="headerlink" title="8、退出登录"></a>8、退出登录</h6><blockquote><p>在主页面（sso-main）、vip页面（sso-vip）、购买页面（cart-vip）编写接口，页面上给定跳转链接</p></blockquote><img src="/2021/02/18/sso-dan-dian-deng-lu/image-20210219120112490.png" alt="image-20210219120112490" style="zoom:80%;"><img src="/2021/02/18/sso-dan-dian-deng-lu/image-20210219120618674.png" alt="image-20210219120618674" style="zoom:80%;"><hr><h5 id="四、测试"><a href="#四、测试" class="headerlink" title="四、测试"></a>四、测试</h5><blockquote><p>总结：基于cook ie实现的单点登录，该项目由四个系统组成，分别是登录系统（sso-login）、主页系统（sso-main）、vip系统（sso-vip）、购物系统（sso-cart），采用Gradle构建项目，后端采用SpringBoot框架，前端采用thymeleaf工具做展示；要实现各系统之间的cookie共享，需满足：系统之间域名映射；四个系统无论在哪个系统登录成功之后，然后在到其它系统去点击登录按钮，会发现已经实现了登录，这就是单点登录的原理。</p><p>细节1：任何一个系统在点击登录按钮时候，在跳转登录URL末尾都要携带自己原系统的URL地址，把这个地址在登录时保存到Session对象中，起到登录成功后跳转回发起登录的这个系统的页面。</p><p>细节2：登录接口里面，以UUID产生一个token，保存在Cookie对象中，响应到各个系统，以token为键，登录用户信息为值存取到工具类LoginCache里面。</p><p>细节3：退出登录，就是让Cookie对象失效，使得需要重新登录。</p></blockquote><p><video src="SSO单点登录/20210219_122041.mp4" controls="controls" style="max-width: 100%; display: block; margin-left: auto; margin-right: auto;"> SSO测试 </video></p><hr><p><a href="https://www.bilibili.com/video/BV1Gb411T7uq?p=1">视频教学</a></p><p><a href="https://gitee.com/LJH130168/sso-use-cookie.git">源码克隆</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>如何部署项目到阿里云</title>
      <link href="/2021/02/01/ru-he-bu-shu-xiang-mu-dao-a-li-yun/"/>
      <url>/2021/02/01/ru-he-bu-shu-xiang-mu-dao-a-li-yun/</url>
      
        <content type="html"><![CDATA[<hr><h5 id="一、阿里云部署常用的工具"><a href="#一、阿里云部署常用的工具" class="headerlink" title="一、阿里云部署常用的工具"></a>一、<a href="https://www.bilibili.com/video/BV1oK4y147Qu?from=search&amp;seid=17581513644754243705">阿里云部署常用的工具</a></h5><h6 id="1、目前阿里云推出了“轻量应用服务器”和”云服务器ESC”两款服务器"><a href="#1、目前阿里云推出了“轻量应用服务器”和”云服务器ESC”两款服务器" class="headerlink" title="1、目前阿里云推出了“轻量应用服务器”和”云服务器ESC”两款服务器"></a>1、目前阿里云推出了<a href="https://blog.csdn.net/qq_41204464/article/details/90635404">“轻量应用服务器”和”云服务器ESC”</a>两款服务器</h6><p>两款服务器具体操作差不多,购买时选择centos 系统，毕竟基于Linux系统，性能好；购买服务器后，两个重要的操作就是设置防火墙和镜像加速器（提高工具下载速度）。</p><p>设置防火墙，打开提供外部访问的端口：</p><img src="/2021/02/01/ru-he-bu-shu-xiang-mu-dao-a-li-yun/1.png" style="zoom:50%;"><p>设置阿里云镜像加速器，复制代码到系统内运行即可：</p><img src="/2021/02/01/ru-he-bu-shu-xiang-mu-dao-a-li-yun/2.png" style="zoom:50%;"><p>推荐几款好用的远程操控阿里云的<a href="https://baike.baidu.com/item/SSH/10407">SSH工具</a>：</p><p><a href="http://www.hostbuf.com/t/988.html">FinalShell</a>     <a href="https://www.netsarang.com/zh/free-for-home-school/">Xshell</a>     <a href="https://filezilla-project.org/">filezilla</a></p><h6 id="2、-yum"><a href="#2、-yum" class="headerlink" title="2、**yum:**"></a>2、**<a href="https://note.youdao.com/ynoteshare/index.html?id=1b00505d90f75f183e8be7219c79bae7&amp;type=note">yum</a>:**</h6><p>是redhat, centos 系统下的软件安装方式，基于Linux，全称为 Yellow dog Updater, Modified，是一个在Fedora和RedHat以及CentOS中的Shell前端软件包管理器基于RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包</p><h6 id="3、Linux下常用指令："><a href="#3、Linux下常用指令：" class="headerlink" title="3、Linux下常用指令："></a>3、Linux下常用指令：</h6><p>创建：</p><pre class="line-numbers language-none"><code class="language-none">创建文件： mkdir 创建多级文件夹：mkdir -p 创建文件： touch chmod -R 777  权限目录export LANG=zh_CN.gbk ssh中文乱码/etc/locale.conf&nbsp;中添加 LANG=zh_CN.gbk 执行source /etc/locale.conf&nbsp;  乱码问永久解决ip addr  查看ip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除：</p><pre class="line-numbers language-none"><code class="language-none">rm -f 删除文件rm -rf 删除文件夹和它下面的所有文件echo ""&gt; 清空文件内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>拷贝：</p><pre class="line-numbers language-none"><code class="language-none">cp 移动单个文件cp -r 移动文件夹下的所有文件mv 复制粘贴<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>端口：</p><pre class="line-numbers language-none"><code class="language-none">1、强制杀死该端口进程&nbsp; &nbsp; &nbsp; fuser -k -n tcp 802、根据PID关闭某个被占用的端口&nbsp; &nbsp; &nbsp;&nbsp;netstat -tunlp&nbsp;| grep 80&nbsp; &nbsp; &nbsp;&nbsp;lsof -i:80&nbsp; &nbsp; &nbsp;&nbsp;sudo kill -9 PID 启动指令:service iptables start &nbsp;&nbsp;&nbsp;&nbsp;重启指令:service iptables restart &nbsp;&nbsp;&nbsp;&nbsp;关闭指令:service iptables stop&nbsp; /sbin/iptables -I INPUT -p tcp --dport 8011 -j ACCEPT #开启8011端口&nbsp;/etc/rc.d/init.d/iptables save #保存配置&nbsp;/etc/rc.d/init.d/iptables restart #重启服务&nbsp;禁用防火墙[root@rhel7 ~]# systemctl stop firewalld.service[root@rhel7 ~]# systemctl disable firewalld.service[root@rhel7 ~]# systemctl status firewalld.servicesystemctl start firewalld.service 开启systemctl enable firewalld.service 开机启动防火墙只允许IP访问端口iptables -A INPUT -p tcp --dport 9200 ! -s 127.0.0.1 -j DROP添加firewall-cmd&nbsp;--zone=public --add-port=80/tcp --permanent （--permanent永久生效，没有此参数重启后失效）重新载入firewall-cmd&nbsp;--reload查看firewall-cmd&nbsp;--zone=public --query-port=80/tcp删除firewall-cmd&nbsp;--zone=public --remove-port=80/tcp --permanent<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="4、阿里云部署docker"><a href="#4、阿里云部署docker" class="headerlink" title="4、阿里云部署docker"></a>4、<a href="https://www.bilibili.com/video/BV1og4y1q7M4/?spm_id_from=333.788.videocard.3">阿里云部署docker</a></h6><p><a href="https://hub.docker.com/">dockerhub</a></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">1、查看系统(docker)内核版本：uname -r2、查看系统配置：cat /etc/os-release3、显示docker版本信息：docker version4、显示docker系统信息、包括镜像和容器数量：docker info5、docker帮助命令：docker 命令 --help<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2021/02/01/ru-he-bu-shu-xiang-mu-dao-a-li-yun/2.jpg" style="zoom:50%;"><img src="/2021/02/01/ru-he-bu-shu-xiang-mu-dao-a-li-yun/1.jpg" style="zoom:50%;"><img src="/2021/02/01/ru-he-bu-shu-xiang-mu-dao-a-li-yun/3.jpg" style="zoom:50%;"><p><a href="https://docs.docker.com/engine/install/centos/">基于centos安装docker</a></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">1、包更新到最新：yum update 2、yum -y install yum-utils安装需要的软件包，yum-utils提供yum-config-manager功能，另外两个是devicemapper驱动依赖的：yum install -y yum-utils device-mapper-persistent-data lvm23、设置yum源为阿里云：yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo4、安装docker：yum install docker-ce5、安装后查看docker版本：docker -v6、docker常用命令：启动docker：systemctl start docker停止docker：systemctl stop docker重启docker：systemctl restart docker查看docker状态：systemctl status docker开机启动：systemctl enable docker查看运行的容器docker ps    查看所有容器包括没运行的 docker ps -a搜索镜像docker search image 拉取镜像docker pull mysql查看镜像docker images 删除镜像docker image rmi -f 镜像id #删除指定镜像docker image rmi -f 镜像id 镜像id 镜像id #删除多个镜像docker image rmi -f $(docker images -aq) #删除全部镜像推出容器exit #直接容器停止并退出Ctrl+P+Q #容器不停止退出删除容器docker rm 容器id #删除指定容器，不能删除正在运行的docker rm -f $(docker ps -aq) #删除全部容器，包括运行的docker ps -a -q|xargs docker rm #删除全部容器启动和停止容器docker start 容器id #启动容器docker restart 容器id #重启容器docker stop 容器id #停止当前正在运行的容器docker kill 容器id #强制停止当前容器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2021/02/01/ru-he-bu-shu-xiang-mu-dao-a-li-yun/4.jpg" style="zoom:50%;"><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">#1、后台启动容器：    1、命令：docker run -d 镜像名        docker run -d mysql    2、问题：docker ps，发现mysql停止了，为什么？        docker容器使用后台运行，就必须要有一个前台进程，docker发现没有应用，就会自动停止。（docker run -it mysql bash）#2、查看日志：    --tf #显示全部日志（docker logs --help查看）    --tail number #显示日志条数    docker logs -tf --tail 10 容器id#3、查看容器中的进程信息：    docker top 容器id#4、查看镜像的元数据：    docker inspect 容器id#5、进入当前正在运行的容器：    #方式一（进入容器后开启一个新的终端，可以在里面操作）    docker exec -it 容器id bash     #方式二（进入容器正在执行的终端，不会启动新的进程）    docker attach 容器id #6、从容器内拷贝文件到主机上：    docker cp 容器id：容器内路径 目的的主机路径    #步骤：        docker exec -it mysql bash #进入容器        cd /home #进入容器home文件夹        touch test.java #在容器home文件夹创建test.java文件        ls #查看创建的test.java文件        exit #退出容器        docker cp mysql:/home/test.java /home #拷贝文件到主机home文件夹下        cd /home #进入主机home文件夹        ls #即可查看是否拷贝test.java成功<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2021/02/01/ru-he-bu-shu-xiang-mu-dao-a-li-yun/5.jpg" style="zoom:50%;"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#运行docker：docker run [OPTIONS] IMAGE [COMMAND] [ARG...]常用选项说明-d, --detach=false， 指定容器运行于前台还是后台，默认为false-i, --interactive=false， 打开STDIN，用于控制台交互-t, --tty=false， 分配tty设备，该可以支持终端登录，默认为false-u, --user=""， 指定容器的用户-a, --attach=[]， 登录容器（必须是以docker run -d启动的容器）-w, --workdir=""， 指定容器的工作目录-c, --cpu-shares=0， 设置容器CPU权重，在CPU共享场景使用-e, --env=[]， 指定环境变量，容器中可以使用该环境变量-m, --memory=""， 指定容器的内存上限-P, --publish-all=false， 指定容器暴露的端口,随机映射端口-p, --publish=[]， 指定容器暴露的端口-h, --hostname=""， 指定容器的主机名-v, --volume=[]， 给容器挂载存储卷，挂载到容器的某个目录--volumes-from=[]， 给容器挂载其他容器上的卷，挂载到容器的某个目录--cap-add=[]， 添加权限，权限清单详见：http://linux.die.net/man/7/capabilities--cap-drop=[]， 删除权限，权限清单详见：http://linux.die.net/man/7/capabilities--cidfile=""， 运行容器后，在指定文件中写入容器PID值，一种典型的监控系统用法--cpuset=""， 设置容器可以使用哪些CPU，此参数可以用来容器独占CPU--device=[]， 添加主机设备给容器，相当于设备直通--dns=[]， 指定容器的dns服务器--dns-search=[]， 指定容器的dns搜索域名，写入到容器的/etc/resolv.conf文件--entrypoint=""， 覆盖image的入口点--env-file=[]， 指定环境变量文件，文件格式为每行一个环境变量--expose=[]， 指定容器暴露的端口，即修改镜像的暴露端口--link=[]， 指定容器间的关联，使用其他容器的IP、env等信息--lxc-conf=[]， 指定容器的配置文件，只有在指定--exec-driver=lxc时使用--name=""， 指定容器名字，后续可以通过名字进行容器管理，links特性需要使用名字--net="bridge"， 容器网络设置:bridge 使用docker daemon指定的网桥host //容器使用主机的网络container:NAME_or_ID &gt;//使用其他容器的网路，共享IP和PORT等网络资源none 容器使用自己的网络（类似--net=bridge），但是不进行配置管理卷# docker volume create edc-nginx-vol // 创建一个自定义容器卷# docker volume ls // 查看所有容器卷# docker volume inspect edc-nginx-vol // 查看指定容器卷详情信息# docker volume rm edc-nginx-vol // 删除自定义数据卷# docker inspect edc-nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="5、docker-部署MySQL"><a href="#5、docker-部署MySQL" class="headerlink" title="5、docker 部署MySQL"></a>5、<a href="https://www.jb51.net/article/172192.htm">docker 部署MySQL</a></h6><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">1、拉取mysql（可设置拉取镜像版本号）：docker pull mysql:5.72、运行容器：    -d 后台运行    -p 端口映射    -v 卷挂载    -e 环境配置    --name 容器名#不带数据卷：    docker run --name mysql -p 3306:3306     -e MYSQL_ROOT_PASSWORD=1234 -d mysql#带数据卷(容器和主机数据同步，保证数据不丢失)：    docker run --name mysql -p 3306:3306 \    -v /home/mysql/conf:/etc/mysql/conf.d \    -v /home/mysql/data:/var/lib/mysql \    -e MYSQL_ROOT_PASSWORD=root -d mysql:5.6    3、进入容器：docker exec -it mysql5.7 bash4、进入mysql：mysql -uroot -p5、选择一个数据库：use mysql6、修改加密方式（MYSQL8需要）：alter user 'root'@'localhost' identified with mysql_native_password by 123456';7、查看加密方式：select host,user,plugin from user;8、开启远程：GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '1234' WITH GRANT OPTION;9、刷新权限：flush privileges;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="6、docker部署tomcat"><a href="#6、docker部署tomcat" class="headerlink" title="6、docker部署tomcat"></a>6、docker部署tomcat</h6><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">#官方的使用(docker run -it --rm,一般用来测试，用完就删除)docker run -it --rm tomcat:9.0#下载后使用1、拉取镜像：docker pull tomcat2、启动：docker run --name tomcat -p 8080:8080 -d tomcat3、查看tomcat安装在哪儿：whereis tomcat4、进入容器：docker exec -it tomcat bash5、查看(发现webapps文件里没有东西，镜像的原因，官方默认webapps里没有文件，webapps.dist文件里有)：ls6、复制webapps.dist内所有文件到webapps即可：cp -r webapps.dist/* webapps7、访问：阿里云IP+8080外部端口8、查看端口号是否被占用：netstat -anp |grep 8080 9、访问部署端口号是否成功：crul localhost:8080<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="7、docker部署nginx"><a href="#7、docker部署nginx" class="headerlink" title="7、docker部署nginx"></a>7、<a href="https://www.bilibili.com/video/BV1WK4y147Gh?from=search&amp;seid=7513476555024216705">docker部署nginx</a></h6><p><a href="https://www.nginx.cn/doc/">什么是nginx？</a></p><p><a href="https://zhuanlan.zhihu.com/p/54793789">nginx有哪些作用？</a></p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">1、拉取nginx：docker pull nginx2、查看镜像：docker images nginx3、启动：docker run --name cade-nginx-test -p 8081:80 -d nginx4、访问：阿里云IP地址+8081端口号5、部署（创建nginx目录，三个子文件夹www、logs、conf）：mkdir -p ~/nginx/www ~/nginx/logs ~/nginx/conf6、拷贝容器内nginx默认配置文件到本地当前目录下的conf目录：docker cp d21ec270e7f3:/etc/nginx/nginx.conf ~/nginx/conf7、进入拷贝文件夹：cd nginx/conf8、查看nginx.conf文件：cat nginx.conf9、部署：docker run -d -p 8082:80 --name cade-nginx-test-web -v ~/nginx/www:/usr/share/nginx/html -v ~/nginx/conf/nginx.conf:/etc/nginx/nginx.conf -v ~/nginx/logs:/var/log/nginx nginx10、写个测试页面：进入www文件夹：cd nginx/www写一个index.html文件：vim index.html写个html：&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;title&gt;my nginx&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 style="color:red"&gt;你好！我是nginx服务器&lt;/h1&gt;&lt;img src="img/1.jpg"/&gt;//img文件夹也放于www文件夹下&lt;/body&gt;&lt;/html&gt;11、访问部署好的网页：阿里云IP地址+8082端口号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="8、docker部署es（elasticsearch）-kibana"><a href="#8、docker部署es（elasticsearch）-kibana" class="headerlink" title="8、docker部署es（elasticsearch）+kibana"></a>8、docker部署es（elasticsearch）+kibana</h6><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">#首先知道：es暴露的端口很多，es十分耗内存，es的数据需要放置到安全目录#--net somenetwork 表示网络配置1、启动elasticsearch：docker run -d --name elasticsearch --net somenetwork -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" elasticsearch:7.10.12、查看cpu状态(可知es相当占内存)：docker stats 3、因此增加内存限制，修改配置文件(-e 环境配置修改)：docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" -e ES_JAVA_OPTS="-Xms64m -Xmx512m" elasticsearch:7.10.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    kibana如何连接es？</p><img src="/2021/02/01/ru-he-bu-shu-xiang-mu-dao-a-li-yun/7.jpg" style="zoom:50%;"><pre class="line-numbers language-none"><code class="language-none"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h6 id="9、管理镜像和容器的可视化工具"><a href="#9、管理镜像和容器的可视化工具" class="headerlink" title="9、管理镜像和容器的可视化工具"></a>9、管理镜像和容器的可视化工具</h6><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">#工具1：portainer（提供操控的面板）1、什么是portainer？它是docker的图形化界面管理工具，提供一个后台面板供我们操作！2、部署portainer：docker run -d -p 8089:9000 --restart=always -v /var/run/docker.sock:/var/run/docker.sock --privileged=true portainer/portainer3、访问：阿里云IP+8089外网端口4、设置秘密5、选择本地（local）6、查看---------#工具2（CI/CD）：Rancher(持续集成和持续部署使用)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h6 id="10、commit-镜像"><a href="#10、commit-镜像" class="headerlink" title="10、commit 镜像"></a>10、commit 镜像</h6><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">#命令：docker commit -m="提交的描述信息" -a="作者" 容器id 目标镜像名:[tag]#上面部署tomcat时候webapps里面没有文件，经过我们从webapps.dist里面复制文件到webapps里面，外网就可以访问前端数据了，现在我们把我么自己修改的tomcat提交：docker commit -m="add webapps app" -a="xiaolu" 6e0af437ec7c tomcat01:1.0#输入命令（即可查看自己提交的tomcat01）：docker images<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2021/02/01/ru-he-bu-shu-xiang-mu-dao-a-li-yun/8.jpg" style="zoom:50%;"><hr><h6 id="11、容器数据卷"><a href="#11、容器数据卷" class="headerlink" title="11、容器数据卷"></a>11、容器数据卷</h6><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">#什么是容器数据卷？将应用和环境打包放在容器里面，如果我们不小心把容器删除了，那么我们打包好的数据也会丢失；为了使数可以持久化（好比部署了一个mysql容器，里面有数据库，有人删了容器，不就删库跑路了吗，数据库里面的数据全部丢失了！），容器数据卷提供了一个容器之间可以数据共享的技术（docker容器中产生的数据，同步到本地；也就是目录的挂载，将我们容器内的目录，挂载到Linux上面！）#总结：容器的持久化和同步操作；容器间也是可以数据共享的！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img src="/2021/02/01/ru-he-bu-shu-xiang-mu-dao-a-li-yun/9.jpg" style="zoom:50%;"><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">#方式一：直接使用命令 -v 来挂载（指定宿主机目录）命令：docker run -it -v 主机目录：容器目录 容器名 /bin/bash形如：docker run -it -v /home/a:/home/a mysql bash查看挂载情况（如下图）：docker inspect 容器id数据同步操作：在主机a文件夹下或在容器a文件夹下建立一个文件（touch test.java）,进入对应的容器文件夹或主机文件夹，都能看见建立的文件，说明保证了数据的同步和持久化 ；同样关闭容器的同时，对主机上test.java的修改，也会同步到容器（即容器里面的test.java同步改变）容器数据卷带来的好处：修改本地主机上的文件即可，容器内会自动同步<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2021/02/01/ru-he-bu-shu-xiang-mu-dao-a-li-yun/10.jpg" style="zoom:50%;"><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">#方式二：dockerfile1、什么是Dockerfile？用来构建docker镜像的构建文件，一段命令脚本（通过这个脚本可以生成镜像），启动执行即可2、体验：2-1:创建一个dockerfile文件，名字可以随意形如：FROM nginx VOLUME ["volume01","volume02"] CMD echo "----end----" CMD /bin/bash上面的四个命令，每个命令就是镜像的一层2-2:构建镜像命令:docker build -f dockerfile -t lujiahong/nginx:1.0 .2-3:查看镜像命令:docker images2-4:启动自己构建的镜像命令:docker run -it 镜像id /bin/bash可以看到自动挂载的数据卷目录：volume01和volume02进入volume01文件夹创建文件：touch test.java2-5：明确volume01和volume02 是匿名挂载查看自己构建的镜像id：docker ps查看镜像元数据（如下图）：docker inspect 镜像id进入volume01目录：cd/var/lib/docker/volumes/4febd1f8e1a4d4c282095ebf743b59cabe0a3e7d6782d02e3b20d599df5f0684/_data查看文件（可看见同样有文件test.java,说明通过dockerfile也能实现数据同步）：ls<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2021/02/01/ru-he-bu-shu-xiang-mu-dao-a-li-yun/blog\source\_posts\如何部署项目到阿里云\15.jpg" style="zoom:50%;"><img src="/2021/02/01/ru-he-bu-shu-xiang-mu-dao-a-li-yun/14.jpg" style="zoom:50%;"><img src="/2021/02/01/ru-he-bu-shu-xiang-mu-dao-a-li-yun/blog\source\_posts\如何部署项目到阿里云\16.jpg" style="zoom:50%;"><img src="/2021/02/01/ru-he-bu-shu-xiang-mu-dao-a-li-yun/blog\source\_posts\如何部署项目到阿里云\17.jpg" style="zoom:50%;"><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">#数据卷容器之间实现数据同步1、实现方式：形如：多个mysql实现数据同步2、体验：通过上面构建的镜像（lujiahong/nginx:1.0）来创建两个（多个，其中一个为主容器，其它容器需要去继承这种关系，实现数据同步）容器#创建主容器：命令：docker run -it --name 主容器名 镜像id /bin/bash形如：docker run -it --name nginx_test01 ee0c211759f7 bash#创建子容器：命令：docker run -it --name 子容器名1 --volumes-from 主容器名 镜像id形如：docker run -it --name nginx_test2 --volumes-from nginx_test1 ee0c211759f73、测试进入主容器的目录volume01里面创建文件：touch test.txt进入子容器的目录volume01里面查看文件: ls4、结果子容器volume01文件夹下有test.txt文件，能够实现容器间数据同步；即使主容器停掉或者删除，子容器仍然可以访问以前创建的文件；子容器和主容器通过命令：--volumes-from来同步共享卷；5、结论容器之间配置信息的传递，数据卷容器一直持续到没有容器使用为止；但是一旦你通过-v持久化到了本地，那么本地的数据是不会被删除的；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h6 id="12、具名和匿名挂载"><a href="#12、具名和匿名挂载" class="headerlink" title="12、具名和匿名挂载"></a>12、具名和匿名挂载</h6><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">#具名挂载（通过 -v 指定名字）命令：docker run -d -P --name 容器名 -v 卷名：/etc/镜像名 镜像名形如：docker run -d -P --name nginx01 -v nginx_ok:/etc/nginx nginx查看卷：docker volume ls查看卷挂载目录：docker volume inspect nginx_ok查看volumes文件夹下的卷：cd var/lib/docker/volumes查看_data文件夹（可看见nginx.conf）:cd nginx_ok/_data#结论：所有docker容器内的卷，没有指定目录的情况下都是在：var/lib/docker/volumes/卷名/_data通常使用的就是具名挂载，方便找到卷#匿名挂载（没有卷名，是一长字符串，不好找，不采用建议）命令：docker run -d -P --name 容器名 -v /etc/镜像名 镜像名#如何区分 具名挂载、匿名挂载和指定路径挂载？-v 容器内路径 #匿名挂载-v 卷名:容器内路径 #具名挂载-v /宿主机路径:容器内路径 #指定路径挂载#拓展ro表示：readonly #只读，说明这个路径只能通过宿主机来操作，容器内部无法操作了rw表示：readwrite #只写docker run -d -P --name 容器名 -v 卷名：/etc/镜像名:ro 镜像名docker run -d -P --name 容器名 -v 卷名：/etc/镜像名:rw 镜像名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2021/02/01/ru-he-bu-shu-xiang-mu-dao-a-li-yun/11.jpg" style="zoom:50%;"><img src="/2021/02/01/ru-he-bu-shu-xiang-mu-dao-a-li-yun/12.jpg" style="zoom:50%;"><img src="/2021/02/01/ru-he-bu-shu-xiang-mu-dao-a-li-yun/13.jpg" style="zoom:50%;"><hr><h6 id="13、关于DockerFile"><a href="#13、关于DockerFile" class="headerlink" title="13、关于DockerFile"></a>13、关于DockerFile</h6><blockquote><p>dockerfile是用来构建docker镜像的文件！命令参数脚本！</p></blockquote><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">#构建步骤：    1、编写一个dockerfile文件；    2、docker build 构建成一个镜像；    3、docker run 运行镜像；    4、docker push 发布镜像（DockerHub、阿里云镜像仓库）#dockerfile文件构建过程：    1、每个保留关键字（指令）都必须是大学字母    2、执行顺序从上到下    3、#表示注释    4、每一个指令都会创建提交一个新的镜像层，并提交<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2021/02/01/ru-he-bu-shu-xiang-mu-dao-a-li-yun/19.jpg" style="zoom:50%;"><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">#结论（开发-&gt;部署-&gt;运维）：1、dockerfile(构建文件，定义了一切的步骤，源代码):是面向开发的，我们以后要发布项目，做镜像，就需要编写dockerfile文件，这个文件十分简单！2、dockerImages(通过dockerfile构建生成的镜像，最终发布和运行的产品):逐渐成为企业交付的标准，必须要掌握！3、dockerContainer(容器就是镜像运行起来提供的服务)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>以前我们使用别人的镜像，现在我们通过dockerfile来构建自己的镜像！</p></blockquote><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">#dockerfile指令 FROM #基础镜像，一切从这里开始MAINTAINER #镜像是谁写的（姓名+邮箱）RUN #镜像构建的时候需要运行的命令ADD #添加你构建镜像所需的压缩包（tomcat、redis..）WORHDIR #镜像的工作目录VOLUME #挂载的目录EXPOSE #暴露端口配置CMD #指定这个容器启动时要运行的命令，只有最后一个会生效，可被替换ENTRYPOINT #指定这个容器启动时要运行的命令，可以追加命令COPY #类似ADD命令，将文件拷贝到镜像中ENV #构建时候设置环境变量ONBUILD #当构建一个被继承dockerfile，这个时候就会运行ONBUILD的指令（被触发，为触发指令），<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2021/02/01/ru-he-bu-shu-xiang-mu-dao-a-li-yun/21.jpg" style="zoom:50%;"><blockquote><p>实战，写一个dockerfile</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#明确1、创库 DockerHub中 99%镜像都是从这个基础镜像（FROM scratch）过来的，然后配置需要的软件和配置来进行构建的；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/2021/02/01/ru-he-bu-shu-xiang-mu-dao-a-li-yun/22.jpg" style="zoom:50%;"><blockquote><p>创键一个自己的centos</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">1、编写dockerfile文件（dockerfile-centos）：FROM centosMAINTAINER lujiahong&lt;2275435926@qq.com&gt;ENV MYPATH /usr/localWORKDIR $MYPATHRUN yum -y install vimRUN yum -y install net-toolsEXPOSE 80CMD echo $MYPATHCMD echo "---end---"CMD /bin/bash2、通过这个文件构建镜像命令：docker build -f dockerfile文件路径 -t 构建的镜像名:版本号 .形如：docker build -f dockerfile-centos -t mycentos:1.0 .输出：Successfully built 7a57298bfce2 Successfully tagged mycentos:1.03、测试命令：docker run -it mycentos:1.0 bash结果：根目录变为了/usr/local 能够执行ifconfig、vim、ls等命令了 （相比于原生的centos）查看镜像的历史：docker history 镜像id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>CMD 和 ENTRYPOINT  指令区别</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">CMD #指定这个容器启动时要运行的命令，只有最后一个会生效，可被替换ENTRYPOINT #指定这个容器启动时要运行的命令，可以追加命令<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#测试CMD1、查看构建的dockerfile（dockerfile-cmd-test）：命令：cat dockerfile-cmd-test FROM centosCMD ["ls","-a"]2、构建镜像：命令： docker build -f dockerfile-cmd-test -t cmd-test:1.0 .Successfully built dd377d081f6cSuccessfully tagged cmd-test:1.03、启动镜像（dd377d081f6c），发现CMD中定义的ls和-a命令生效：命令： docker run dd377....dockerenvbindevetchomeliblib64。。。。4、执行追加的命令 -l，想要（ls -al），但发现报错命令：docker run dd377 -ldocker: Error response from daemon: OCI runtime create failed: container_linux.go:370: starting container process caused: exec: "-l": executable file not found in $PATH: unknown.原因：CMD的情况下，-l替换了["ls","-a"]命令，-l不是命令，所以报错；然而这种情况用ENTRYPOINT命令可以解决<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>实战:dockerfile创建tomcat镜像<br>1、准备镜像文件(dockerfile)和压缩包(tomcat和jdk)</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#进入MyImages文件夹1、下载tomcat的tar.gzwget https://downloads.apache.org/tomcat/tomcat-9/v9.0.43/bin/apache-tomcat-9.0.43.tar.gz2、下载jdk的tar.gzwget https://www.oracle.com/webapps/redirect/signon?nexturl=https://download.oracle.com/otn/java/jdk/11.0.10%2B8/020c4a6d33b74f6a9d2bc6fbf189da81/jdk-11.0.10_linux-x64_bin.tar.gz3、编写Dockerfile文档vim Dockerfile4、编写readme.txt说明文档touch readme.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2021/02/01/ru-he-bu-shu-xiang-mu-dao-a-li-yun/23.jpg" style="zoom:50%;"><p>2、编写dockerfile文件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">FROM centosMAINTAINER lujiahong&lt;2275435906@qq.com&gt;COPY readme.txt /usr/local/readme.txt ADD apache-tomcat-9.0.43.tar.gz /usr/local/ADD jdk-8u241-linux-x64.tar.gz /usr/local/RUN yum -y install vimENV MYPATH /usr/localWORKDIR $MYPATHENV JAVA_HOME /usr/local/jdk1.8.0_241ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jarENV CATALINA_HOME /usr/local/apache-tomcat-9.0.43ENV CATALINA_BASH /usr/local/apache-tomcat-9.0.43ENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/binEXPOSE 8080CMD /usr/local/apache-tomcat-9.0.43/bin/startup.sh &amp;&amp; tail -F /usr/local/apache-tomcat-9.0.43/bin/logs/catalina.out<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、构建镜像</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#执行命令（由于官方命名就是Dockerfile文件，因此这里构建镜像时不用-f 指定文件路径）：docker build -t mytomcat .Successfully built 4fada7bd13fdSuccessfully tagged mytomcat:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/2021/02/01/ru-he-bu-shu-xiang-mu-dao-a-li-yun/24.jpg" style="zoom:50%;"><p>4、运行镜像</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">#运行镜像，并和宿主机路径挂载，实现数据(测试和日志)同步docker run -d -p 8080:8080 --name LJH-tomcat -v /home/MyImages/test:/usr/local/apache-tomcat-9.0.43/webapps/test -v /home/MyImages/logs:/usr/local/apache-tomcat-9.0.43/logs mytomcat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/2021/02/01/ru-he-bu-shu-xiang-mu-dao-a-li-yun/25.jpg" style="zoom:50%;"><p>5、访问测试</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">#方式一curl localhost:9090#方式二http://阿里云ip地址 + 9090端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>6、发布项目（由于做了卷挂载，我们直接在本地编写项目就可以发布了！）</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">#test文件夹下 需要个WEB-INF文件夹(里面需要有web.xml)和index.jsp文件(或者html)1、web.xml  <span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/javaee<span class="token punctuation">"</span></span>           <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/javaee                       http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd<span class="token punctuation">"</span></span>           <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2.5<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">&gt;</span></span>  2、index.jsp&lt;%@ page language="java" contentType="text/html; charset=UTF-8"    pageEncoding="UTF-8"%&gt;<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>mytomcat-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>Hello!this is LJH-tomcat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>&lt;%=request.getRemoteAddr());%&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7、发布自己的镜像（DockerHub或者阿里云）</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#发布镜像到DockerHub1、注册账号并登录（https://hub.docker.com/）docker login -u 用户名 -p 密码2、在我们的服务器上提交自己的镜像docker push 镜像名：版本号    #不能提交自己镜像怎么解决，那么肯定是镜像名重复l    docker tag 镜像id 新镜像名：版本号    #那么再来提交    docker push 新镜像名：版本号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2021/02/01/ru-he-bu-shu-xiang-mu-dao-a-li-yun/26.jpg" style="zoom:50%;"><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">#发布到阿里云镜像服务器1、登录阿里云docker login --username=ljh130168 registry.cn-shanghai.aliyuncs.com2、找到容器镜像服务3、创建命名空间4、创建容器镜像5、点开容器镜像最后张图片，可知给我们提供了发布镜像的步骤6、提交镜像docker tag [ImageId] registry.cn-shanghai.aliyuncs.com/lujiahong/lujiahong:[镜像版本号]docker push registry.cn-shanghai.aliyuncs.com/lujiahong/lujiahong:[镜像版本号]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2021/02/01/ru-he-bu-shu-xiang-mu-dao-a-li-yun/27.jpg" style="zoom:50%;"><img src="/2021/02/01/ru-he-bu-shu-xiang-mu-dao-a-li-yun/28.jpg" style="zoom:50%;"><img src="/2021/02/01/ru-he-bu-shu-xiang-mu-dao-a-li-yun/29.jpg" alt="image-20210205215326157" style="zoom:50%;"><blockquote><p>Dockerfile小结</p></blockquote><img src="/2021/02/01/ru-he-bu-shu-xiang-mu-dao-a-li-yun/2.jpg" style="zoom:80%;"><img src="/2021/02/01/ru-he-bu-shu-xiang-mu-dao-a-li-yun/4.jpg" style="zoom:80%;"><hr><h6 id="14、docker网络"><a href="#14、docker网络" class="headerlink" title="14、docker网络"></a>14、docker网络</h6><blockquote><p>docker0</p></blockquote><p>好比说现在部署了一个项目在docker上面，那么容器tomcat是如何访问到容器mysql里面的数据的呢（容器网络访问）？这就是docker网络探讨的问题</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#理解docker0命令：ip addr结果：可以得到三个网络：lo       #本机回环地址eth0     #阿里云内网地址docker0  #docker0地址探讨：docker是如何处理容器网络访问的？ 步骤： 1、启动一个容器：docker start 容器id 2、查看容器ip：docker exec -it 容器id ip addr 3、再查看主机ip：ip addr 4、对比2和3的ip发现：成对出现，采用evth-pair技术结论：我们每启动一个docker容器，docker就会给docker容器分配一个ip，我们只需要安装了docker，就会有一个docker0（采用桥接模式，使用的技术是evth-pair技术）evth-pair技术：evth-pair就是一对的虚拟设备接口，它们都是成对出现，一段连着协议，一段彼此相连；正因有这个特性，evth-pair充当一个桥梁（按道理Linux主机上是不能ping通分配给容器的ip，正因这个桥梁就可以ping通了；同样依靠evth-pair技术，容器之间也可以ping通了），连接各种虚拟网络设备；使用evth-pair技术的有（Openstac、OVS连接、Docker容器之间连接）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2021/02/01/ru-he-bu-shu-xiang-mu-dao-a-li-yun/30.jpg" style="zoom:50%;"><img src="/2021/02/01/ru-he-bu-shu-xiang-mu-dao-a-li-yun/31.jpg" style="zoom:30%;"><img src="/2021/02/01/ru-he-bu-shu-xiang-mu-dao-a-li-yun/32.jpg" style="zoom:30%;"><img src="/2021/02/01/ru-he-bu-shu-xiang-mu-dao-a-li-yun/34.jpg" style="zoom:50%;"><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">#思考容器与容器之间能够ping通的原理？实际上采用的还是evth-pair技术。但容器之间的访问，不是两者之间的直接访问，而是通过docker0（相当于路由器，有路由表等）依赖evth-pair技术实现容器之间的访问，如下图#结论：1、所有的容器在不指定网络的情况下，都是docker0路由的，docker会给我们的容器分配一个默认可用的IP；2、Docker中所有的接口都是虚拟的，虚拟的转化效率高；3、只要容器删除，依赖evth-pair技术的网桥一对就没了； #docker0的特点：1、默认的网络模式（bridge）；2、域名（容器名）不能访问，--link可以打通连接；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2021/02/01/ru-he-bu-shu-xiang-mu-dao-a-li-yun/33.jpg" style="zoom:50%;"><blockquote><p>–link</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#思考:上面容器与容器之间ping通是通过docker0分发给容器的IP地址,那么除了IP地址能够ping通外,还可以通过--link在运行时候指定容器名,然后通过容器名ping通来实现容器之间的访问,如下图:命令:docker run -it --name 容器名 --link 另一个建立好的容器名 镜像命令：docker exec -it 容器名 ping 另一个建立好的容器名命令：docker exec -it 容器名 cat /etc/hosts<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2021/02/01/ru-he-bu-shu-xiang-mu-dao-a-li-yun/36.jpg" style="zoom:50%;"><img src="/2021/02/01/ru-he-bu-shu-xiang-mu-dao-a-li-yun/37.jpg" style="zoom:60%;"><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">#结论：1、--link本质就是在hosts里面配置本地绑定(容器之间映射)；2、通过--link通过容器名来ping通适合于初学者，企业都采用自定义网络；3、docker0是官方的网桥，支持容器之间IP连接访问，但不支持容器之间容器名（--name 容器名）连接访问，而自定义网络可以实现，我们可以自定义一个网络支持容器名连接访问即可。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>自定义网络</p></blockquote><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">#查看所有的网络：docker network ls#有哪些网络模式？1、桥接模式(bridge),说白了就是在docker上进行搭桥,docker默认模式2、不配置网络(none)3、和宿主机共享网络(host)4、容器内网络连通(container)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2021/02/01/ru-he-bu-shu-xiang-mu-dao-a-li-yun/38.jpg" style="zoom:50%;"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#测试#--net bridge这个可以不写，默认桥接模式，也就是的docker0；通过--net可以更改网络或者自定义网络docker run -d -P --name test-nginx --net bridge nginx#自定义网络#--driver bridge （定义网络模式为桥接模式）#--subnet 192.168.0.0/16（子网：192.168.0.2~192.168.255.255）#--gateway 192.168.0.1 （定义网关，也就是路由默认ip）#mynet （自定义网络名）创建自定义网络命令：docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 mynet查看自定义网络命令：docker inspect mynet<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2021/02/01/ru-he-bu-shu-xiang-mu-dao-a-li-yun/39.jpg" style="zoom:50%;"><img src="/2021/02/01/ru-he-bu-shu-xiang-mu-dao-a-li-yun/40.jpg" style="zoom:50%;"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#把服务放在自定义网络mynet里面#启动两个容器，再查看命令： docker run -d -P --name test-nginx --net mynet nginx命令：docker run -d -P --name test-nginx-01 --net mynet nginx命令：docker inspect mynet <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2021/02/01/ru-he-bu-shu-xiang-mu-dao-a-li-yun/41.jpg" style="zoom:50%;"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#通过容器名（域名）来实现容器之间的访问命令：docker exec -it test-nginx ping test-ngix-01 #结论：1、采用自定义网络无需通过--link来指定容器之间映射关系，这种关系已经维护好了；2、在做redis集群和mysql集群的时候，不同集群使用不同的网络，保证了集群是安全和健康的；那么不同集群使用的不同的网络，则需要认知网络连通；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2021/02/01/ru-he-bu-shu-xiang-mu-dao-a-li-yun/42.jpg" style="zoom:50%;"><blockquote><p>网络连通</p></blockquote><img src="/2021/02/01/ru-he-bu-shu-xiang-mu-dao-a-li-yun/44.jpg" style="zoom:50%;"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">![43](E:\blog\source\_posts\如何部署项目到阿里云\43.jpg)#通过docker network connet来实现不同网络的连通#通过docker network --help查找到connet命令#通过docker network connet --help连接connet的用法现在已经有默认网络docker0和自定义网络mynet，现在如何实现两个网络下的容器相互访问；docker0下有容器tomcat-test，mynet下有容器tomcat01和tomcat02；连通指定网络和容器名即可实现网络连通命令：docker network connet mynet tomcat-test命令：docker inspect mynet命令：docker exec -it tomcat-test ping tomcat01#结论：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2021/02/01/ru-he-bu-shu-xiang-mu-dao-a-li-yun/43.jpg" style="zoom:50%;">&gt;实战：部署Redis集群<img src="/2021/02/01/ru-he-bu-shu-xiang-mu-dao-a-li-yun/45.jpg" style="zoom:50%;"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#shell脚本1、创建网卡docker network create redis --subnet 172.38.0.0/162、通过脚本创建六个redis配置for port in $(seq 1 6);\do \mkdir -p /mydata/redis/node-${port}/conftouch /mydata/redis/node-${port}/conf/redis.confcat &lt;&lt;EOF&gt;&gt;/mydata/redis/node-${port}/conf/redis.confport 6379bind 0.0.0.0cluster-enabled yescluster-config-file nodes.confcluster-node-timeout 5000cluster-announce-ip 172.38.0.1${port}cluster-announce-port 6379cluster-announce-bus-port 16379appendonly yesEOFdocker run -p 637${port}:6379 -p 1637${port}:16379 --name redis-${port} \-v /mydata/redis/node-${port}/data:/data \-v/mydata/redis/node-${port}/conf/redis.conf:/etc/redis/redis.conf \-d --net redis --ip 172.38.0.1${port} redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.confdonedocker run -p 6371:6379 -p 16371:16379 --name redis-1 \-v /mydata/redis/node-1/data:/data \-v /mydata/redis/node-1/conf/redis.conf:/etc/redis/redis.conf \-d --net redis --ip 172.38.0.11 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf3、创建集群（docker exec -it redis-1 sh）redis-cli --cluster create 172.38.0.11:6379 172.38.0.12:6379 172.38.0.13:6379 172.38.0.14:6379 172.38.0.15:6379 172.38.0.16:6379 --cluster-replicas 14、测试redis-cli #单机redis-cli -c #集群cluster info #查看集群信息cluster nodes #查看集群节点#分析：所搭建的集群是三主三从。实现高性能、高可用和负载均衡5、测试高可用命令：set key value命令：get key当存入的时候找到存入的服务ip，然后停止服务，再取数据，会发现是从从redis里面获取到的数据。实现了高可用(关闭存入的主redis，相当于故障转移，和它数据同步的从redis会替换它成为主redis，如下图)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2021/02/01/ru-he-bu-shu-xiang-mu-dao-a-li-yun/46.jpg" style="zoom:50%;"><img src="/2021/02/01/ru-he-bu-shu-xiang-mu-dao-a-li-yun/47.jpg" style="zoom:50%;"><img src="/2021/02/01/ru-he-bu-shu-xiang-mu-dao-a-li-yun/48.jpg" style="zoom:50%;"><img src="/2021/02/01/ru-he-bu-shu-xiang-mu-dao-a-li-yun/49.jpg" style="zoom:50%;"><blockquote><p>SpringBoot微服务打包Docker镜像</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#步骤1、构架springboot项目2、打包应用3、编写dockerfile4、构建镜像5、发布运行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="15、docker-Compose"><a href="#15、docker-Compose" class="headerlink" title="15、docker Compose"></a>15、docker Compose</h6><hr><h6 id="16、docker-Swarm及k8s"><a href="#16、docker-Swarm及k8s" class="headerlink" title="16、docker Swarm及k8s"></a>16、docker Swarm及k8s</h6><hr><h6 id="17、CI-CD之Jenkins"><a href="#17、CI-CD之Jenkins" class="headerlink" title="17、CI/CD之Jenkins"></a>17、CI/CD之Jenkins</h6><hr><h5 id="二、基于一个Servlet部署到阿里云（war包）"><a href="#二、基于一个Servlet部署到阿里云（war包）" class="headerlink" title="二、基于一个Servlet部署到阿里云（war包）"></a>二、<a href="http://tomcat.apache.org/">基于一个Servlet部署到阿里云（war包）</a></h5><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">1、安装java运行环境：yum install java2、复制新版本tar.gz地址到,执行此命令下载：wget tar.gz地址3、解压下载好的tomcat:tar -xzf apache-tomcat-9.0.22.tar.gz4、进入解压好的文件夹：cd apache-tomcat-9.0.225、再进入里面的bin文件夹：cd bin6、查看文件夹文件（有启动tomcat文件：startup.sh）：ls7、启动tomcat:sh startup.sh 8、访问阿里云tomcat：阿里云IP地址+8080端口号，前提打开8080防火墙端口9、<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.bilibili.com/video/BV1y4411U77K?t=548">视频资源</a></p><hr><h5 id="三、部署一个项目（前后端）到阿里云"><a href="#三、部署一个项目（前后端）到阿里云" class="headerlink" title="三、部署一个项目（前后端）到阿里云"></a>三、部署一个项目（前后端）到阿里云</h5><pre class="line-numbers language-none"><code class="language-none"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>面试必问HashMap</title>
      <link href="/2021/01/29/mian-shi-bi-wen-hashmap/"/>
      <url>/2021/01/29/mian-shi-bi-wen-hashmap/</url>
      
        <content type="html"><![CDATA[<hr><p><img src="/2021/01/29/mian-shi-bi-wen-hashmap/1.png"></p><hr><h5 id="一、HashMap底层原理存储原理详解"><a href="#一、HashMap底层原理存储原理详解" class="headerlink" title="一、HashMap底层原理存储原理详解"></a>一、HashMap底层原理存储原理详解</h5><pre class="line-numbers language-basic" data-language="basic"><code class="language-basic">1、键不可重复、值可以重复；底层哈希表；线程不安全；运行key值为null，value也可以为null。2、为什么HashMap底层JDK1.8后是：数组+链表+红黑树？   数组:ArrayList是最常用的 List（继承于Collection）实现类，内部是通过数组实现的，它允许对元素进行快速随机访问。数组的缺点是每个元素之间不能有间隔，当数组大小不满足时需要增加存储能力，就要将已经有数组的数据复制到新的存储空间中。当从 ArrayList 的中间位置插入或者删除元素时，需要对数组进行复制、移动、代价比较高。因此，它适合随机查找和遍历，不适合插入和删除。   链表：LinkedList 是用链表结构存储数据的，很适合数据的动态插入和删除，随机访问和遍历速度比较慢。另外，他还提供了 List 接口中没有定义的方法，专门用于操作表头和表尾元素，可以当作堆栈、队列和双向队列使用。   红黑树：红黑树的查询效率高于链表，因此当链表长度为8时转化为红黑树结构；为什么查询快？（维护了树的特性，依赖于左、中、右三个节点，对应的大小为：小、中、大。当去查询一个节点时，会先去和根节点(中节点)进行比较，比它大，则和右节点进行比较，直到找到相同的，比它小则和左节点进行比较，直到找到相同的）；为什么链表阈值为8？（小于8，链表效率大于红黑树，大于8，链表效率小于红黑树）；为什么先是链表再是红黑树？（因为链表插入比红黑树快，红黑树在插入的时候需要去维护树结构，满足左中右的小中大，过程中会进行左旋或右旋，所以插入慢，所以先是链表）。3、结论：数组：查询快、插入删除慢，有序；链表：查询慢、插入删除快，无序；红黑树：查询快于链表、慢于数组，插入删除快于数组、慢于链表。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h5 id="二、HashMap哈希算法详解"><a href="#二、HashMap哈希算法详解" class="headerlink" title="二、HashMap哈希算法详解"></a>二、HashMap哈希算法详解</h5><pre class="line-numbers language-basic" data-language="basic"><code class="language-basic">1、哈希算法（也叫散列），就是把任意长度值（key）通过哈希算法变换成固定长度的key（地址），通过这个地址进行访问的数据结构；它通过关键码值映射到表中一个位置来访问记录，以加快查找的速度。2、hashcode：通过字符串（key）算出它的Ascall码，进行mod（取模，计算出所设定数组大小的下标），算出哈希表中的下标。3、哈希算法幂等性：相同的key，无论编译多少次，它的hash值一定是固定不变的同一个值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h5 id="三、哈希冲突产生的原因详解"><a href="#三、哈希冲突产生的原因详解" class="headerlink" title="三、哈希冲突产生的原因详解"></a>三、哈希冲突产生的原因详解</h5><pre class="line-numbers language-basic" data-language="basic"><code class="language-basic">1、不同的字符串（key），计算出来的hash值相同（即数组的下标相同），解决hash冲突的方法就是通过链表（hash冲突时，调用equal()方法，如果key相同，返回true，覆盖原来的值；如果key不同，返回false，在链表的下一个节点新存储这个值）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://blog.csdn.net/qq_35956041/article/details/77532763">hash冲突原理及解决方法</a></p><hr><h5 id="四、HashMap底层存储数据结构详解"><a href="#四、HashMap底层存储数据结构详解" class="headerlink" title="四、HashMap底层存储数据结构详解"></a>四、HashMap底层存储数据结构详解</h5><pre class="line-numbers language-basic" data-language="basic"><code class="language-basic">JDK1.8之前：数组+链表JDK1.8之后：数组+链表+红黑树1、数组：每个元素存储key、value、hash、next,key和value对应键和值，hash对应key通过hash算法计算得到的hash值，next用来指向数组中有相同下标的元素（分析：假如数组下标为4的位置现在已经有值了，现在又来存一个值，它的key通过hash算法计算出来的下标也为4，那么这个值会替换之前那个值，用next指向所替换的那个值，这时就形成了一个链表结构.如下图；当然查询时候也通过key计算出hash值，hash值取模得到下标，找到位置比较hash值是否相同，相同则返回值，不相同则去判断next为不为null，不为null说明为链表结构、然后再依次去判断每个节点和所查询的节点的hash值是否相同，如果存在返回值，不存在返回null。因此hash是查询作用，next是指向作用）。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/2021/01/29/mian-shi-bi-wen-hashmap/8.png" style="zoom:45.0%;"><pre class="line-numbers language-apl" data-language="apl"><code class="language-apl">2、链表：单向链表和双向链表。单向链表（在Java中用Node表示，通过next指向下一个节点。假如现在有三个节点，那么他们的指向关系为：Node n = new Node("张三");n.next = new Node("李四")；n.next.next = new Node("王五")；）。双向链表（也是Node表示，除了通过next指向下一个节点，还通过pre指向上一个节点；因此每一个节点除了存取值以外，还包含next和pre节点的引用地址）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h5 id="五、HashMap在JDK8新增的红黑树详解"><a href="#五、HashMap在JDK8新增的红黑树详解" class="headerlink" title="五、HashMap在JDK8新增的红黑树详解"></a>五、HashMap在JDK8新增的红黑树详解</h5><pre class="line-numbers language-html" data-language="html"><code class="language-html">JDK8内部数据结构为数组+(链表 或 红黑树)，通过key的hash值计算数据所在数组下标，多个key的hash相同或hash计算的数组下标相同，但是key值不同时，检查节点是否为树节点，是树节点则往树节点添加，如果是普通节点则往链表尾追加Entry，当链表长度大于8时，则将链表转为红黑树。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2021/01/29/mian-shi-bi-wen-hashmap/2.png" style="zoom:33%;"><p><a href="https://www.jianshu.com/p/814432ed04e8">参考1</a></p><p><a href="https://cloud.tencent.com/developer/inventory/3692">参考2</a></p><hr><h5 id="六、头插法和尾插法的优缺点是什么？"><a href="#六、头插法和尾插法的优缺点是什么？" class="headerlink" title="六、头插法和尾插法的优缺点是什么？"></a>六、头插法和尾插法的优缺点是什么？</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">1、头插法：JDk1.8之前采用的方式。即链表的存储结构，当有相同下标的元素时，会替换之前那个元素，用next指向它。2、尾插法：JDK1.8之后采用的方式。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="https://blog.csdn.net/shuaishuai3409/article/details/50756406">头插法和尾插法建立链表区别</a></p><p><a href="https://blog.csdn.net/AlohaHeja/article/details/90576432?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control">关于HashMap扩容造成死循环的介绍</a></p><p> <a href="https://blog.csdn.net/chenyiminnanjing/article/details/82706942">hashmap扩容时死循环问题</a>    </p><p><a href="https://blog.csdn.net/qq_36744695/article/details/103624524?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control">hashmap头插法的危害</a></p><hr><h5 id="七、手写实现HashMap并性能测试"><a href="#七、手写实现HashMap并性能测试" class="headerlink" title="七、手写实现HashMap并性能测试"></a>七、手写实现HashMap并性能测试</h5><p>1、接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public interface IMap&lt;K,V&gt; {     V put(K k,V v);     V get(K k);     int size();     interface Entry&lt;K,V&gt;{         K getKey();         V getValue();     }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class HashMap&lt;K,V&gt; implements IMap&lt;K,V&gt; {    private Entry&lt;K,V&gt; table[] = null;    int size = 0;    public HashMap(){        table = new Entry[16];    }    /**     * 通过key进行hash算出hashcode     * 进行取模获取下标     * 去数组找到下标对应Entry对象     * 判断这个对象是否为空     * 如果为空 直接存储key value     * 如果不为空 采用链表     * 返回     * @param k     * @param v     * @return     */    @Override    public V put(K k, V v) {        int index = hash(k);        Entry&lt;K, V&gt; entry = table[index];        if(entry == null){            table[index] = new Entry&lt;&gt;(k,v,index,null);            size++;        }else{//链表            table[index] = new Entry&lt;&gt;(k,v,index,entry);        }        return table[index].getValue();    }    private int hash(K k) {       int i = k.hashCode() % 16;       return i &gt;=0 ? i:-i;    }    /**     * 通过key进行hash算出hashcode     * 进行取模获取下标     * 去数组找到下标对应Entry对象     * 查询的key和对象进行比较是否相等     * 如果不相等 判断next是否为空     * 如果不为空 比较他们hash是否相等     * 如果相等直接返回     * 如果不相等 再判断next是否为空 直到空或者相等为止     * 然后返回     * @return     */    @Override    public V get(K k) {        if(size == 0){            return null;        }        int index = hash(k);        Entry&lt;K, V&gt; entry =findValue(k,table[index]);        return entry==null?null:entry.getValue();    }    private Entry findValue(K k, Entry&lt;K,V&gt; entry) {        if(k.equals(entry.getKey()) || k == entry.getKey()){            return entry;        }else{            if(entry.next!=null){                return findValue(k,entry.next);            }        }        return null;    }    @Override    public int size() {        return size;    }    class Entry&lt;K,V&gt; implements IMap.Entry&lt;K,V&gt;{        K k;        V v;        int hash;        Entry&lt;K,V&gt; next;        public Entry(K k, V v, int hash, Entry&lt;K, V&gt; next) {            this.k = k;            this.v = v;            this.hash = hash;            this.next = next;        }        @Override        public K getKey() {            return k;        }        @Override        public V getValue() {            return v;        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h5 id="八、记一次生产环境HashMap导致cpu100-的问题"><a href="#八、记一次生产环境HashMap导致cpu100-的问题" class="headerlink" title="八、记一次生产环境HashMap导致cpu100%的问题"></a>八、记一次生产环境HashMap导致cpu100%的问题</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">通过解读HashMap源码并结合实例可以发现，HashMap扩容导致死循环的主要原因在于扩容过程中使用*头插法*将oldTable中的单链表中的节点插入到newTable的单链表中，所以newTable中的单链表会倒置oldTable中的单链表。那么在多个线程同时扩容的情况下就可能导致扩容后的HashMap中存在一个有环的单链表，从而导致后续执行get操作的时候，会触发死循环，引起CPU的100%问题。所以一定要避免在并发环境下使用HashMap。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://www.jianshu.com/p/4d1cad21853b">参考1</a></p><p><a href="https://www.jianshu.com/p/1e9cf0ac07f4">参考2</a></p><hr><h5 id="九、集合关系图"><a href="#九、集合关系图" class="headerlink" title="九、集合关系图"></a>九、集合关系图</h5><img src="/2021/01/29/mian-shi-bi-wen-hashmap/7.png" style="zoom:0%;"><img src="/2021/01/29/mian-shi-bi-wen-hashmap/3.png" style="zoom:0%;"><p>1、List（ArrayList、Vector 和 LinkedList。）</p><img src="/2021/01/29/mian-shi-bi-wen-hashmap/4.png" style="zoom:0%;"><p>2、Set（HashSet、LinkHashSet、TreeSet）</p><img src="/2021/01/29/mian-shi-bi-wen-hashmap/5.png" style="zoom:0%;"><p>3、Map（HashMap、LinkHashMap、HashTable、TreeMap）</p><img src="/2021/01/29/mian-shi-bi-wen-hashmap/6.png" style="zoom:0%;"><hr><p><a href="https://pan.baidu.com/s/1fGHjntHoFlbC6uXfj8bq2A">百度云视频资源</a></p><p><em>提取码：3u3m</em></p><p><a href="http://data.biancheng.net/linear_list/">数据结构教程</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
